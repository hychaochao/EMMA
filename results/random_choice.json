{
  "Math_1": {
    "pid": "Math_1",
    "question": "Which of the figures shown bellow cannot be cut out of the figure illustrated nearby?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_2": {
    "pid": "Math_2",
    "question": "A square is cut into four pieces. Which shape can you not make with these four pieces?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_3": {
    "pid": "Math_3",
    "question": "Which part of the house is missing?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_4": {
    "pid": "Math_4",
    "question": "Florian has 10 equally long metal strips with equally many holes.\n<image_1>\nHe bolts the metal strips together in pairs. Now he has five long strips (see the diagram).\nWhich of the long strips is the shortest?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_5": {
    "pid": "Math_5",
    "question": "Which of the kangaroo cards shown below can be turned around so that it then looks the same as the card shown on the right?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_6": {
    "pid": "Math_6",
    "question": "Which piece is missing?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_7": {
    "pid": "Math_7",
    "question": "Konrad has some pieces of cardboard which all look like this:\n<image_1>\nWhich of the shapes below can he not make out of these pieces?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_8": {
    "pid": "Math_8",
    "question": "Ellen wants to decorate the butterfly Which butterfly can she make?\n<image_1>\nusing\u00a0these\u00a06\u00a0stickers",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_10": {
    "pid": "Math_10",
    "question": "Simon has two identical tiles, whose front look like this: The back is white.\n<image_1>\nWhich pattern can he make with those two tiles?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_11": {
    "pid": "Math_11",
    "question": "Peter has drawn this pattern:\n<image_1>\nHe draws exactly the same pattern once more.\nWhich point is on his drawing?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_12": {
    "pid": "Math_12",
    "question": "This diagram shows two see-through sheets. You place the sheets on top of each other.Which pattern do you get?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_13": {
    "pid": "Math_13",
    "question": "Lisa needs exactly 3 pieces to complete her jigsaw.\nWhich of the 4 pieces is left over?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "C or D"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_14": {
    "pid": "Math_14",
    "question": "Susi makes this pattern using ice-lolly sticks. Each stick is $5 \\mathrm{~cm}$ long and $1 \\mathrm{~cm}$ wide. How long is Susi's pattern?\n<image_1>",
    "options": [
      "$20 \\mathrm{~cm}$",
      "$21 \\mathrm{~cm}$",
      "$22 \\mathrm{~cm}$",
      "$23 \\mathrm{~cm}$",
      "$25 \\mathrm{~cm}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_16": {
    "pid": "Math_16",
    "question": "The floor of a room is covered with equally big rectangular tiles (see picture). How long is the room? <image_1>",
    "options": [
      "$6 \\mathrm{~m}$",
      "$8 \\mathrm{~m}$",
      "$10 \\mathrm{~m}$",
      "$11 \\mathrm{~m}$",
      "$12 \\mathrm{~m}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_17": {
    "pid": "Math_17",
    "question": "Which of the figures can be cut into these 3 pieces?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_18": {
    "pid": "Math_18",
    "question": "Ana has the cards shown on the left. She chooses several of them to assemble the tower shown on the right. Which cards did she not use?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_19": {
    "pid": "Math_19",
    "question": "Which of the tiles below is NOT part of the wall next door?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_20": {
    "pid": "Math_20",
    "question": "Turning a card around on the top side, we see the photo of the kangaroo. Instead, if we turn the card around on the right side, what will appear?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_21": {
    "pid": "Math_21",
    "question": "A kangaroo laid out 3 sticks like this to make a shape. It is not allowed to break or to bend the sticks. Which shape could the kangaroo make?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_22": {
    "pid": "Math_22",
    "question": "Which figure can be made from the 2 pieces shown on the right?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_23": {
    "pid": "Math_23",
    "question": "Mara built the square by using 4 of the following 5 shapes. Which shape was not used?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_24": {
    "pid": "Math_24",
    "question": "Anna cuts the picture of a mushroom in two halves.\n<image_1>\nShe then arranges the two pieces together to form a new picture. What could this new picture look like?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_25": {
    "pid": "Math_25",
    "question": "A monkey has torn off a piece of Captain Jack's map.\n<image_1>\nWhat does the piece the monkey has torn off look like?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_26": {
    "pid": "Math_26",
    "question": "These five animals are made up from different shapes. There is one shape which is only used on one animal. On which animal is this shape used?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_27": {
    "pid": "Math_27",
    "question": "Mr Beaver re-arranges the parts to build a kangaroo.\n<image_1>\nWhich part is missing?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_28": {
    "pid": "Math_28",
    "question": "Max wants to complete the jigsaw shown. He has different pieces.\n<image_1>\nWhich pieces does he have to use?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_29": {
    "pid": "Math_29",
    "question": "A square piece of paper has been cut in three pieces. Two of them are in the picture on the right. What is the third one?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_30": {
    "pid": "Math_30",
    "question": "A strip of paper is folded three times as shown. Determine $\\beta$ if $\\alpha=70^{\\circ}$.\n<image_1>",
    "options": [
      "$140^{\\circ}$",
      "$130^{\\circ}$",
      "$120^{\\circ}$",
      "$110^{\\circ}$",
      "$100^{\\circ}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_31": {
    "pid": "Math_31",
    "question": "An equilateral triangle is being rolled around a unit square as shown. How long is the path that the point shown covers, if the point and the triangle are both back at the start for the first time?\n<image_1>",
    "options": [
      "$4 \\pi$",
      "$\\frac{28}{3} \\pi$",
      "$8 \\pi$",
      "$\\frac{14}{3} \\pi$",
      "$\\frac{21}{2} \\pi$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_33": {
    "pid": "Math_33",
    "question": "A regular pentagon is cut out of a page of lined paper. Step by step this pentagon is then rotated $21^{\\circ}$ counter clockwise about its midpoint. The result after step one is shown in the diagram. Which of the diagrams shows the situation when the pentagon fills the hole entirely again for the first time?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_34": {
    "pid": "Math_34",
    "question": "Two rectangles form the angles $40^{\\circ}$ and $30^{\\circ}$ respectively, with a straight line (see diagram). How big is angle $\\alpha$?\n<image_1>",
    "options": [
      "$105^{\\circ}$",
      "$120^{\\circ}$",
      "$130^{\\circ}$",
      "$135^{\\circ}$",
      "another value"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_35": {
    "pid": "Math_35",
    "question": "A rectangle is coloured in five different ways as shown. In which picture is the grey area biggest?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_36": {
    "pid": "Math_36",
    "question": "Vilma took a sheet of paper measuring $10 \\mathrm{~cm} \\times 20 \\mathrm{~cm}$ and made two folds, taking the two smaller sides of the sheet to a diagonal of it. She gets a parallelogram, as shown in the picture. What is the area of this quadrilateral, in $\\mathrm{cm}^{2}$?\n<image_1>",
    "options": [
      "$\\frac{100 \\sqrt{5}}{3}$",
      "$50 \\sqrt{5}$",
      "$100(\\sqrt{5}-1)$",
      "$50(5-\\sqrt{5})$",
      "$50(5+\\sqrt{5})$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_38": {
    "pid": "Math_38",
    "question": "A square is placed in a co-ordinate system as shown. Each point $(x \\mid y)$ of the square is deleted and replaced by the point $\\left(\\frac{1}{x} \\mid \\frac{1}{y}\\right)$. Which diagram shows the resulting shape?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_39": {
    "pid": "Math_39",
    "question": "Which of the rectangles $\\mathbf{A}$ to $\\mathbf{E}$ can be covered by the pattern on the right-hand side in such a way that the result is a totally black rectangle?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_40": {
    "pid": "Math_40",
    "question": "At noon the minute hand of a clock is in the position shown on the left and after the quarter of an hour -- in the position shown on the right. Which position the minute hand will take after seventeen quarters from the noon?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_41": {
    "pid": "Math_41",
    "question": "A square piece of paper has been cut in three pieces. Two of them are in the picture on the right. What is the third one?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_42": {
    "pid": "Math_42",
    "question": "Betty keeps drawing three different figures in the same order. Which figure should be the next?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_43": {
    "pid": "Math_43",
    "question": "Between two points four routes are drawn. Which route is the shortest?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_45": {
    "pid": "Math_45",
    "question": "What is the piece that fits completely to the given one to form a rectangle?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_47": {
    "pid": "Math_47",
    "question": "A page is folded along the thick line as shown. Which letter will not be covered by a grey square?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_48": {
    "pid": "Math_48",
    "question": "Andrea made the pattern in the picture out of several identical tiles. None of the tiles overlap each other. Which of the following tiles could she definitely not have used?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_49": {
    "pid": "Math_49",
    "question": "In which of the five pictures is the white area bigger than the grey area?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_51": {
    "pid": "Math_51",
    "question": "Grandma's watch has an hour, minute and second hand. We don't know which hand does which job, but we know that the watch tells the correct time. At 12:55:30 hours the watch looked as pictured. How will the watch look at 8:11:00 hours?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_52": {
    "pid": "Math_52",
    "question": "For which houses, were exactly the same building blocks used?\n<image_1>",
    "options": [
      "House 1 and 4",
      "House 3 and 4",
      "House 1, 4 and 5",
      "House 3, 4 and 5",
      "House 1, 2, 4 and 5"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_53": {
    "pid": "Math_53",
    "question": "Mr Hofer has drawn a picture of flowers on the inside of a display window (large picture). What do these flowers look like when you look at the picture from the outside?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_54": {
    "pid": "Math_54",
    "question": "With which square do you have to swap the question mark, so that the white area and the black area are the same size?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_55": {
    "pid": "Math_55",
    "question": "Erwin has got the following paper pieces:\n<image_1>\nWith these four pieces he must exactly cover a special shape. In which drawing will he manage this, if the piece <image2> is placed as shown?",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_56": {
    "pid": "Math_56",
    "question": "The word Kangaroo is written on the top of my umbrella. Which of the 5 pictures shows my umbrella\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_57": {
    "pid": "Math_57",
    "question": "The shape in the picture is to be split into three identical pieces. What does one of these pieces look like?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_58": {
    "pid": "Math_58",
    "question": "Which of the following sentences fits to the picture?\n<image_1>",
    "options": [
      "There are equally many circles as squares.",
      "There are fewer circles than triangles.",
      "There are twice as many circles as triangles.",
      "There are more squares than triangles.",
      "There are two more triangles than circles."
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_60": {
    "pid": "Math_60",
    "question": "A card has a diagram printed on one side and the other side is plain white. The card is first flipped over to the left and then upwards (see diagram). Which picture do you get this way?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_61": {
    "pid": "Math_61",
    "question": "The picture above rotated. The picture below shows the new position after the rotation. Which footprints are missing after the rotation?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_62": {
    "pid": "Math_62",
    "question": "The following picture shows a necklace with six pearls:\n<image_1>\nWhich of the following diagrams shows the same necklace?",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_63": {
    "pid": "Math_63",
    "question": "Bob folds a piece of paper, then punches a hole into the paper and unfolds it again. The unfolded paper then looks like this:\n<image_1>\nAlong which dotted line has Bob folded the paper beforehand?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_64": {
    "pid": "Math_64",
    "question": "On the right you can see a picture of ladybird Sophie. Sophie turns. Which of the pictures below is not Sophie?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_65": {
    "pid": "Math_65",
    "question": "Karina cuts out a piece of this form <image_1> from the diagram on the right. Which one of the following pieces can she cut out?",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_66": {
    "pid": "Math_66",
    "question": "Which of the following pictures can you NOT do with all the pieces beside?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_70": {
    "pid": "Math_70",
    "question": "The $4 \\times 4$ grid without a little square, shown beside, was divided into three equal pieces. Which of the following figures represents one of these pieces?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_71": {
    "pid": "Math_71",
    "question": "Nora plays with 3 cups on the kitchen table. She takes the left-hand cup, flips it over, and puts it to the right of the other cups. The picture shows the first\nmove. What do the cups look like after 10 moves?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_72": {
    "pid": "Math_72",
    "question": "In the diagram below two neighbouring squares are never allowed to have the same number. Which puzzle piece has to be placed in the gap so that this rule is followed?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_73": {
    "pid": "Math_73",
    "question": "The little caterpillar <image_1> rolls up to go to sleep. What could it look like then?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_74": {
    "pid": "Math_74",
    "question": "A black disc with two holes is placed on top of a dial of a watch.\nThe black disc is turned.\nWhich two numbers can be seen at the same time?\n<image_1>",
    "options": [
      "4 and 9",
      "5 and 10",
      "5 and 9",
      "6 and 9",
      "7 and 12"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_75": {
    "pid": "Math_75",
    "question": "Alice has these four jigsaw pieces:\n<image_1>\nWhich two can she put together to form this square?",
    "options": [
      "1 and 2",
      "1 and 3",
      "2 and 3",
      "2 and 4",
      "1 and 4"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_76": {
    "pid": "Math_76",
    "question": "Christoph folds a see-through piece of foil along the dashed line. What can he then see?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_77": {
    "pid": "Math_77",
    "question": "Daniel sticks these two pieces of paper <image_1> on this black circle: <image2> The two pieces of paper are not allowed to overlap. Which picture does he get?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_78": {
    "pid": "Math_78",
    "question": "Rebecca folds a square piece of paper twice. Then she cuts off one corner as you can see in the diagram.\n<image_1>\nThen she unfolds the paper. What could the paper look like now?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_79": {
    "pid": "Math_79",
    "question": "Else has two machines R and S. If she puts a square piece of paper into machine $R$ it is rotated: <image_1>\nIf she puts the piece of paper in machine $S$ it is printed on: <image2>\nShe wants to produce the following picture: <image3>\nIn which order does Else use the two machines so that she gets this picture?",
    "options": [
      "SRR",
      "RSR",
      "RSS",
      "RRS",
      "SRS"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_80": {
    "pid": "Math_80",
    "question": "The square was cut out from a page in a squared exercise book. Then two figures in the picture were cut out from the square. Which ones?\n<image_1>",
    "options": [
      "1 and 3",
      "2 and 4",
      "2 and 3",
      "1 and 4",
      "Impossible to cut out"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_81": {
    "pid": "Math_81",
    "question": "You have two identical pieces that you can turn around but not upside down. Which picture can you not make with these two pieces?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_84": {
    "pid": "Math_84",
    "question": "The carpenter's machine can perform two operations: $\\mathrm{P}$ and $\\mathrm{T}$. The operation $\\mathrm{P}$ is \"printing\" and $\\mathrm{T}$ is \"turning\" (see the figure). What is the right sequence of operations to obtain <image_1> starting from <image2>?",
    "options": [
      "TTP",
      "PTT",
      "TPT",
      "TPP",
      "TPTTT"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_85": {
    "pid": "Math_85",
    "question": "The squares are formed by intersecting the segment $A B$ of $24 \\mathrm{~cm}$ by the broken line $A A_{1} A_{2} \\ldots A_{12} B$ (see the figure). Find the length of $A A_{1} A_{2} \\ldots A_{12} B$.\n<image_1>",
    "options": [
      "$48 \\mathrm{~cm}$",
      "$72 \\mathrm{~cm}$",
      "$96 \\mathrm{~cm}$",
      "$56 \\mathrm{~cm}$",
      "$106 \\mathrm{~cm}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_86": {
    "pid": "Math_86",
    "question": "The number 4 is reflected twice in the picture. What apears in the field with the question mark if we do the same with the number 5 ?\n<image_1>",
    "options": [
      "A)",
      "B)",
      "C)",
      "D)",
      "E)"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_88": {
    "pid": "Math_88",
    "question": "The figure should be rotated $180^{\\circ}$ around point $\\mathrm{F}$. What is the result?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_90": {
    "pid": "Math_90",
    "question": "Lina has already laid two shapes on a square playing board. Which of the 5 shapes can she add to the board so that none of the remaining four shapes will have space to fit.\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_91": {
    "pid": "Math_91",
    "question": "Which three puzzle pieces do you need to complete the large puzzle?\n<image_1>",
    "options": [
      "1, 3, 4",
      "1, 3, 6",
      "2, 3, 5",
      "2, 3, 6",
      "2, 5, 6"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_92": {
    "pid": "Math_92",
    "question": "Both the figures on the right were made out of the same 5 pieces. The rectangle has dimensions $5 \\mathrm{~cm} \\times 10 \\mathrm{~cm}$. The other pieces are quarter circles with 2 different sized radii. What is the difference between the perimeters of the two figures?\n<image_1>",
    "options": [
      "$2.5 \\mathrm{~cm}$",
      "$5 \\mathrm{~cm}$",
      "$10 \\mathrm{~cm}$",
      "$15 \\mathrm{~cm}$",
      "$20 \\mathrm{~cm}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_93": {
    "pid": "Math_93",
    "question": "Which of the figures below will cover the most dots when laid on the square shown on the right.\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_96": {
    "pid": "Math_96",
    "question": "Which square has to replace the question mark so that the white area and the black area are equally big?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_97": {
    "pid": "Math_97",
    "question": "A square can be made out of four of the given pieces. Which piece will not be used?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_98": {
    "pid": "Math_98",
    "question": "Peter looks at the picture hanging on the wall in more detail through a magnifying glass. Which section can he not see?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_99": {
    "pid": "Math_99",
    "question": "Bart sits at the hairdressers. In the mirror he sees a clock as shown in the diagram: What was the mirror image of the clock 10 minutes earlier?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_101": {
    "pid": "Math_101",
    "question": "A square floor is made up of triangular and square tiles in grey and white. What is the smallest number of grey tiles that have to be swapped with white tiles, so that the floor looks the same from all four given viewing directions?\n<image_1>",
    "options": [
      "three triangles, one square",
      "one triangle, three squares",
      "one triangle, one square",
      "three triangles, three squares",
      "three triangles, two squares"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_102": {
    "pid": "Math_102",
    "question": "Four equally big squares are partially coloured in black. In which of the four squares is the total area of the black parts biggest?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "The total area of the black parts is always equally big."
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_103": {
    "pid": "Math_103",
    "question": "The figure shown on the right consists of one square part and eight rectangular parts. Each part is $8 \\mathrm{~cm}$ wide. Peter assembles all parts to form one long, $8 \\mathrm{~cm}$ wide rectangle. How long is this rectangle?\n<image_1>",
    "options": [
      "$150 \\mathrm{~cm}$",
      "$168 \\mathrm{~cm}$",
      "$196 \\mathrm{~cm}$",
      "$200 \\mathrm{~cm}$",
      "$232 \\mathrm{~cm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_104": {
    "pid": "Math_104",
    "question": "The board beside is formed by little white and dark squares. After a ninety-degree turn, how can this board appear?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_105": {
    "pid": "Math_105",
    "question": "When the bat Elisa left its cave at night, the digital clock showed <image_1>. When she came back in the morning and hung herself upside down, she looked at her watch and saw <image_1>. How long did she stay out of the cave?",
    "options": [
      "2h 48m",
      "2h 59m",
      "3h 39m",
      "3h 41m",
      "3h 49m"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_106": {
    "pid": "Math_106",
    "question": "Which of the following indeformable pieces of wire, when duplicated, allows to make a closed piece without crosses, with the two pieces joined by their ends?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_107": {
    "pid": "Math_107",
    "question": "Vania has a sheet of paper divided into nine equal squares. She wants to fold the sheet as shown in the picture, initially with horizontal folds and then with vertical folds, until she leaves the colored square on top of the layers. Vania wants to write the numbers from 1 to 9 , one in each square, so that these numbers are in ascending order, starting with the number 1 at the top, after the folds are made above. On the open sheet, indicated at the side, which numbers should she write in place of $a, b$ and $c$?\n<image_1>",
    "options": [
      "$a=9, b=5, c=3$",
      "$a=4, b=6, c=8$",
      "$a=7, b=5, c=3$",
      "$a=3, b=5, c=7$",
      "$a=6, b=4, c=7$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_109": {
    "pid": "Math_109",
    "question": "Mary had a piece of paper. She folded it exactly in half. Then she folded it exactly in half again. She got this shape <image_1>. Which of the shapes P, Q or R could have been the shape of her original piece of paper?",
    "options": [
      "only P",
      "only Q",
      "only R",
      "only P or Q",
      "any of P, Q or R"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_111": {
    "pid": "Math_111",
    "question": "There are rectangular cards divided into 4 equal cells with different shapes <image_1> drawn in each cell. Cards can be placed side by side only if the same shapes appear in adjacent cells on their common side. 9 cards are used to form a rectangle as shown in the figure. Which of the following cards was definitely NOT used to form this rectangle?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_112": {
    "pid": "Math_112",
    "question": "Six points are placed and numbered as shown on the right. Two triangles are drawn: one by connecting the even numbered points, and one by connecting the odd numbered points. Which of the following shapes is the result?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_114": {
    "pid": "Math_114",
    "question": "How much does this Ferris wheel need to turn so that a white gondola is on top for\nthe first time?\n<image_1>",
    "options": [
      "$\\frac{1}{2}$ turn",
      "$\\frac{1}{3}$ turn",
      "$\\frac{1}{6}$ turn",
      "$\\frac{1}{12}$ turn",
      "$\\frac{5}{6}$ turn"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_115": {
    "pid": "Math_115",
    "question": "Some art work can be seen on a square-shaped transparent piece of foil. The foil is folded over twice as shown in the diagram. What does the foil look like after it has been folded over twice?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_116": {
    "pid": "Math_116",
    "question": "Which of the shapes cannot be split into two triangles using a single straight line?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_117": {
    "pid": "Math_117",
    "question": "Alice has four jigsaw pieces. <image_1> Which two can be fitted together to form a hexagon?",
    "options": [
      "1 and 2",
      "1 and 3",
      "2 and 3",
      "2 and 4",
      "1 and 4"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_118": {
    "pid": "Math_118",
    "question": "A dark disc with three holes is placed on top of a dial of a watch (see diagram). Then the disc is rotated around its centre. Which numbers can be seen at the same time? <image_1>",
    "options": [
      "4, 6 and 12",
      "1, 5 and 10",
      "2, 4 and 9",
      "3, 6 and 9",
      "5, 7 and 12"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_119": {
    "pid": "Math_119",
    "question": "Jan sticks these three pieces of paper <image_1> Which picture can he not obtain?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_120": {
    "pid": "Math_120",
    "question": "The picture of a digital watch can be seen in a mirror:\n<image_1> Which picture of the watch can be seen in the mirror 30 minutes later?",
    "options": [
      "$12:22$",
      "$12:55$",
      "$15:15$",
      "$15:55$",
      "$21:21$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_121": {
    "pid": "Math_121",
    "question": "Anna has two machines $R$ and $S$. If she places a square piece of paper in machine $R$ it is rotated $90^{\\circ}$ in a clockwise direction. <image_1> (Hint: Note the marking in the corner!) If she places the piece of paper in machine $S$, it gets printed on. <image2> In which order does Anna use the two machines so that this picture is made? <image3>",
    "options": [
      "SRRR",
      "RSRR",
      "SRSR",
      "RRRS",
      "SRRS"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_123": {
    "pid": "Math_123",
    "question": "An equilateral triangle $A C D$ is rotated counterclockwise around point $A$. At what angle has it been rotated unen it covers equilateral triangle $A B C$ for the first time?\n<image_1>",
    "options": [
      "$60^{\\circ}$",
      "$120^{\\circ}$",
      "$180^{\\circ}$",
      "$240^{\\circ}$",
      "$300^{\\circ}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_124": {
    "pid": "Math_124",
    "question": "The first row shows 11 cards, each with two letters. The second row shows rearangement of the cards. Which of the following could appear on the bottom line of the second row?\n<image_1>",
    "options": [
      "ANJAMKILIOR",
      "RLIIMKOJNAA",
      "JANAMKILIRO",
      "RAONJMILIKA",
      "ANMAIKOLIRJ"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_126": {
    "pid": "Math_126",
    "question": "In the picture there is a square tile with two fourths of a circle. The radius of every fourth is half the side of the tile and its length equals $5 \\mathrm{dm}$. We form a large square from 16 such tiles and try to get the longest unbroken curve consisting of the fourths. How long can this continuous curve be at most?\n<image_1>",
    "options": [
      "$75 \\mathrm{dm}$",
      "$100 \\mathrm{dm}$",
      "$105 \\mathrm{dm}$",
      "$110 \\mathrm{dm}$",
      "$80 \\mathrm{dm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_129": {
    "pid": "Math_129",
    "question": "Martina draws the six cornerpoints of a regular hexagon and then connects some of them to obtain a geometric figure. Which of the following figures cannot be generated?\n<image_1>",
    "options": [
      "trapezium",
      "right angled triangle",
      "square",
      "kite",
      "obtuse triangle"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_132": {
    "pid": "Math_132",
    "question": "A piece of string is folded as shown in the diagram by folding it in the middle, then folding it in the middle again und finally folding it in the middle once more. Then this folded piece of string is cut so that several pieces emerge. Amongst the resulting pieces there are some with length $4 \\mathrm{~m}$ and some with length $9 \\mathrm{~m}$. Which of the following lengths cannot be the total length of the original piece of string?\n<image_1>",
    "options": [
      "$52 \\mathrm{~m}$",
      "$68 \\mathrm{~m}$",
      "$72 \\mathrm{~m}$",
      "$88 \\mathrm{~m}$",
      "All answers are possible."
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_135": {
    "pid": "Math_135",
    "question": "The word KANGAROO is written on the top of my umbrella. Which of the following pictures shows my umbrella?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_136": {
    "pid": "Math_136",
    "question": "A square with area 30 is split into two by its diagonal and then Split into triangles as shown in the diagram. Some of the areas of the triangles are given in the diagram. Which of the line segments $a, b, c, d, e$ of the diagonal is the longest?\n<image_1>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_137": {
    "pid": "Math_137",
    "question": "A card has a diagram printed on one side and the other side is plain white. The card is first flipped over downwards and then to the right (see diagram). Which picture is obtained?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_138": {
    "pid": "Math_138",
    "question": "The black and the dashed line together form seven equilateral triangles. The dashed line is $20 \\mathrm{~cm}$ long. How long is the black line?\n<image_1>",
    "options": [
      "$25 \\mathrm{~cm}$",
      "$30 \\mathrm{~cm}$",
      "$35 \\mathrm{~cm}$",
      "$40 \\mathrm{~cm}$",
      "$45 \\mathrm{~cm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_139": {
    "pid": "Math_139",
    "question": "If the letters of the Word MAMA are written underneath each other then the word has a vertical axis of symmetry. For which of these words does that also hold true?\n<image_1>",
    "options": [
      "ADAM",
      "BAUM",
      "BOOT",
      "LOGO",
      "TOTO"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_140": {
    "pid": "Math_140",
    "question": "Lisas aviation club designs a flag with a flying \"dove\" on a $4 \\times 6$-grid. The area of the \"dove\" is $192 \\mathrm{~cm}^{2}$. The perimeter of the \"dove\" is made up of straight lines and circular arcs. What measurements does the flag have?\n<image_1>",
    "options": [
      "$6 \\mathrm{~cm} \\times 4 \\mathrm{~cm}$",
      "$12 \\mathrm{~cm} \\times 8 \\mathrm{~cm}$",
      "$20 \\mathrm{~cm} \\times 12 \\mathrm{~cm}$",
      "$24 \\mathrm{~cm} \\times 16 \\mathrm{~cm}$",
      "$30 \\mathrm{~cm} \\times 20 \\mathrm{~cm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_141": {
    "pid": "Math_141",
    "question": "A $4 \\times 4$ square is made up of the two pieces shown. Which of the following $4 \\times 4$ squares cannot be made this way?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_142": {
    "pid": "Math_142",
    "question": "Zilda took a square sheet of paper of side 1 and made two folds taking two consecutive sides of the sheet to a diagonal of it, as shown in the picture, obtaining a quadrilateral (highlighted outline). What is the area of this quadrilateral?\n<image_1>",
    "options": [
      "$\\frac{7}{10}$",
      "$2-\\sqrt{2}$",
      "$\\frac{3}{5}$",
      "$\\sqrt{2}-1$",
      "$\\frac{\\sqrt{2}}{2}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_143": {
    "pid": "Math_143",
    "question": "Which of the following symbols for signs of the Zodiac has an axis of symmetry?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_146": {
    "pid": "Math_146",
    "question": "Gardener Toni plants tulips <image_1> and sunflowers <image2> in a square flowerbed with side length $12 \\mathrm{~m}$, as shown in the diagram. How big is the entire area where sunflowers are planted?",
    "options": [
      "$36 \\mathrm{~m}^{2}$",
      "$40 \\mathrm{~m}^{2}$",
      "$44 \\mathrm{~m}^{2}$",
      "$46 \\mathrm{~m}^{2}$",
      "$48 \\mathrm{~m}^{2}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_147": {
    "pid": "Math_147",
    "question": "The diagram shows a grid made of vertical and horizontal lines. Which part was cut from the grid? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_148": {
    "pid": "Math_148",
    "question": "A dark disc with two holes is placed on top of a dial of a watch as shown. The dark disc is now rotated so that the number 8 can be seen through one of the holes. Which of the numbers could one see through the other hole now? <image_1>",
    "options": [
      "4 and 12",
      "1 and 5",
      "1 and 4",
      "7 and 11",
      "5 and 12"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_149": {
    "pid": "Math_149",
    "question": "Kristina has a piece of see-through foil on which some points and lines are drawn. She folds the foil along the dotted line. <image_1> What can she see now?",
    "options": [
      "$2\\vdots6\\vdots9$",
      "$2\\vdots6\\vdots6$",
      "$5\\vdots6\\vdots6$",
      "$2\\vdots8\\vdots6$",
      "$5\\vdots8\\vdots9$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_150": {
    "pid": "Math_150",
    "question": "A $4\\times 6$ grid should be cut along the black lines into several identical shapes. No piece is to be left over. Into which of the following shapes is it not possible to cut this grid in this way? <image_1> <image2>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_151": {
    "pid": "Math_151",
    "question": "In the picture, three strips of the same horizontal width $a$ are marked 1,2,3. These strips connect the two parallel lines. Which strip has the biggest area?\n<image_1>",
    "options": [
      "All three strips have the same area",
      "Strip 1",
      "Strip 2",
      "Strip 3",
      "Impossible to answer without knowing $a$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_153": {
    "pid": "Math_153",
    "question": "A square with sides of length 10 is rolled without slipping along a line. The rolling stops when $P$ first returns to the line. What is the length of the curve that $P$ has travelled?\n<image_1>",
    "options": [
      "$10 \\pi$",
      "$5 \\pi+5 \\pi \\sqrt{2}$",
      "$10 \\pi+5 \\pi \\sqrt{2}$",
      "$5 \\pi+10 \\pi \\sqrt{2}$",
      "$10 \\pi+10 \\pi \\sqrt{2}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_154": {
    "pid": "Math_154",
    "question": "A coin with diameter $1 \\mathrm{~cm}$ rolls around the contour outside of a regular hexagon with sides $1 \\mathrm{~cm}$ long, as shown. How long is the path traced by the centre of the coin (in $\\mathrm{cm}$ )?\n<image_1>",
    "options": [
      "$6+\\frac{\\pi}{2}$",
      "$6+\\pi$",
      "$12+\\pi$",
      "$6+2 \\pi$",
      "$12+2 \\pi$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_155": {
    "pid": "Math_155",
    "question": "Six points are marked on a square grid as pictured. Which geometric figure cannot be drawn if only the marked points are allowed to be used as cornerpoints of the figure?\n<image_1>",
    "options": [
      "square",
      "parallelogram with different long sides",
      "acute triangle",
      "obtuse triangle",
      "all figures are possible"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_156": {
    "pid": "Math_156",
    "question": "The two bold lines on the right are rotations of each other. Which of the given points could be the centre of this rotation?\n<image_1>",
    "options": [
      "only $X$",
      "$X$ and $Z$",
      "$X$ and $T$",
      "only $T$",
      "$X, Y, Z$ and $T$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_157": {
    "pid": "Math_157",
    "question": "Three big boxes $P, Q$ and $R$ are stored in a warehouse. The upper picture on the right shows their placements from above. The boxes are so heavy that they can only be rotated $90^{\\circ}$ around a vertical edge as indicated in the pictures below. Now the boxes should be rotated to stand against the wall in a certain order. Which arrangement is possible?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "All four arrangements are possible."
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_158": {
    "pid": "Math_158",
    "question": "Which of the shapes to the right has the largest area?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "All shapes have the same area."
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_159": {
    "pid": "Math_159",
    "question": "A rectangle $A B C D$ with dimensions $16 \\mathrm{~cm}$ by $4 \\mathrm{~cm}$ was folded along the line MN so that corner C meets corner A. What is the area of the Pentagon ABNMD'?\n<image_1>",
    "options": [
      "$17 \\mathrm{~cm}^{2}$",
      "$27 \\mathrm{~cm}^{2}$",
      "$37 \\mathrm{~cm}^{2}$",
      "$47 \\mathrm{~cm}^{2}$",
      "$57 \\mathrm{~cm}^{2}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_160": {
    "pid": "Math_160",
    "question": "In a drawing we can see a three quarter circle with centre M and an indicated orientation arrow. This three-quarter circle is first turned $90^{\\circ}$ anti-clockwise about M and then reflected in the x - axis. Which is the resulting picture?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_161": {
    "pid": "Math_161",
    "question": "$a, b$ and $c$ show the lengths of the different of pieces of wire pictured. Which of the following inequalities is correct?\n<image_1>",
    "options": [
      "$a<b<c$",
      "$a<c<b$",
      "$b<a<c$",
      "$b<c<a$",
      "$c<b<a$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_162": {
    "pid": "Math_162",
    "question": "Mr. Hide wants to find a treasure that he buried years before. He can only remember that he buried the treasure at least $5 \\mathrm{~m}$ away from the hedge and no more than $5 \\mathrm{~m}$ away from the old pear tree. Which picture shows best the area where Mr. Hide has to look for the treasure?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_163": {
    "pid": "Math_163",
    "question": "Peter writes the word KANGAROO on a see-through piece of glass, as seen on the right. What can he see when he first flips over the glass onto its back along the right-hand side edge and then turns it about $180^{\\circ}$ while it is lying on the table?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_164": {
    "pid": "Math_164",
    "question": "A wheel rolls along a zigzag curve as can be seen below. Which of the following pictures shows the curve that is described by the centre of the wheel?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_165": {
    "pid": "Math_165",
    "question": "A circle with radius 1 rolls along a straight line from point $K$ to point $L$, as shown, with $K L=11 \\pi$. In which position is the circle when it has arrived in $L$?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_166": {
    "pid": "Math_166",
    "question": "In the three regular hexagons shown, $X, Y$ and $Z$ describe in this order the areas of the grey shaded parts. Which of the following statements is true?\n<image_1>",
    "options": [
      "$X=Y=Z$",
      "$Y=Z \\neq X$",
      "$Z=X \\neq Y$",
      "$X=Y \\neq Z$",
      "Each of the areas has a different value."
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_167": {
    "pid": "Math_167",
    "question": "Five identical measuring jugs are filled with water. Four of them contain exactly the same amount of water. Which measuring jug contains a different amount?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_169": {
    "pid": "Math_169",
    "question": "There are several figures that can be formed by nine squares of $1 \\mathrm{~cm}$ side by side (see an example beside) and one of them has the biggest perimeter. What is this perimeter?\n<image_1>",
    "options": [
      "$12 \\mathrm{~cm}$",
      "$14 \\mathrm{~cm}$",
      "$16 \\mathrm{~cm}$",
      "$18 \\mathrm{~cm}$",
      "$20 \\mathrm{~cm}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_170": {
    "pid": "Math_170",
    "question": "A park is shaped like an equilateral triangle. A cat wants to walk along one of the three indicated paths (thicker lines) from the upper corner to the lower right corner. The lengths of the paths are $P, Q$ and $R$, as shown. Which of the following statements about the lengths of the paths is true?\n<image_1>",
    "options": [
      "$P<Q<R$",
      "$P<R<Q$",
      "$P<Q=R$",
      "$P=R<Q$",
      "$P=Q=R$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_171": {
    "pid": "Math_171",
    "question": "Ally drew 3 triangles on a grid. Exactly 2 of them have the same area, exactly 2 of them are isosceles, and exactly 2 are right-angled triangles. 2 of the triangles are shown. Which could be the third one?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_173": {
    "pid": "Math_173",
    "question": "A dark disc with two holes is placed on the dial of a watch as shown in the diagram. The dark disc is now rotated so that the number 10 can be seen through one of the two holes. Which of the numbers could one see through the other hole now? <image_1>",
    "options": [
      "2 and 6",
      "3 and 7",
      "3 and 6",
      "1 and 9",
      "2 and 7"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_174": {
    "pid": "Math_174",
    "question": "This piece of paper was folded in half twice, and then had two equilateral triangles cut out of it. Which diagram shows how the paper will look when it is unfolded again? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": "The diagram shows how the cut-out triangles form rhombic holes when the paper is unfolded. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-009.jpg?height=212&width=209&top_left_y=508&top_left_x=1529)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_175": {
    "pid": "Math_175",
    "question": "A transparent square sheet of film lies on a table. The letter $\\mathbf{Y}$ is drawn (like this) on the sheet. We turn the sheet clockwise through $90^{\\circ}$, then turn it over what is now the left edge of the sheet, and then turn it through $180^{\\circ}$. Which figure can we now see?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": "After turning clockwise through $90^{\\circ}$, the letter will appear as <. Turning it over the left edge of the sheet gives $>$. Then a turn through $180^{\\circ}$ gives $<$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_176": {
    "pid": "Math_176",
    "question": "Consecutive numbers have been entered diagonally criss-crossing the square on the right. Which of the following numbers could $x$ not be? <image_1>",
    "options": [
      "128",
      "256",
      "81",
      "121",
      "400"
    ],
    "answer": "A",
    "solution": "Since $x$ is the largest number entered, it is a square number and 128 is the only option which is not.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_177": {
    "pid": "Math_177",
    "question": "The diagram shows a length of string wound over and under $n$ equal circles. The sum of the diameters of the circles is $d \\mathrm{~cm}$. What is the length of the string in $\\mathrm{cm}$ ?\n<image_1>",
    "options": [
      "$\\frac{1}{2} \\pi d$",
      "$\\pi d n$",
      "$2 \\pi d n$",
      "$\\pi d$",
      "$d n$"
    ],
    "answer": "A",
    "solution": "Because the diameter of each circle is $\\frac{d}{n} \\mathrm{~cm}$, the length of each semicircular arc is $\\frac{1}{2} \\pi \\frac{d}{n} \\mathrm{~cm}$. For $n$ semicircles, this gives a total length of $\\frac{1}{2} \\pi \\frac{d}{n} \\times n \\mathrm{~cm}=\\frac{\\pi}{2} d \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_178": {
    "pid": "Math_178",
    "question": "<image_1>\nIn the diagram above there are 11 cards, each printed with two letters. The diagram below shows a rearangement of the cards, but only the top letters are shown.\nWhich one of the following sequences of letters could appear on the bottom row of the second diagram?",
    "options": [
      "ANJAMKILIOR",
      "RLIIMKOJNAA",
      "JANAMKILIRO",
      "RAONJMILIKA",
      "ANMAIKOLIRJ"
    ],
    "answer": "E",
    "solution": "The table below shows all the possible letters from KILIMANJARO underneath the rearranged letters of MISSISSIPPI: ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-053.jpg?height=210&width=1452&top_left_y=1919&top_left_x=380)  In options A, B, C and D the underlined letters are not possibl ANJAMKILIOR RLIMKOJNAA JANAMKILIRO RAONJMULIKA whereas option E, ANMAIKOLIRJ, is a possible rearrangement.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_180": {
    "pid": "Math_180",
    "question": "Marta wants to use 16 square tiles like the one shown to form a $4 \\times 4$ square design. The tiles may be turned. Each arc bisects the sides it meets and has length $p \\mathrm{~cm}$. She is trying to make the arcs connect to make a long path. What is the length, in centimetres, of the longest possible path? <image_1>",
    "options": [
      "$15 p$",
      "$20 p$",
      "$21 p$",
      "$22 p$",
      "$25 p$"
    ],
    "answer": "D",
    "solution": "The diagram on the right shows one way to join 22 arcs for a total length of $22 p \\mathrm{~cm}$. This is the maximal length as, in order to use as many as possible of the 32 arcs, one cannot use 4 of the corners or more than 2 of the arcs in touching the outside of the square.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-068.jpg?height=228&width=223&top_left_y=540&top_left_x=1565)  [Alternatively: Each edge tile has at least 1 arc meeting the edge. Thus there are at least 12 such arcs. Of these no more than 2 can belong to a path, because each is an end of that path. Thus $22 p$ is the maximum feasible length: and such a path is shown above.]",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_183": {
    "pid": "Math_183",
    "question": "The diagram shows three squares. The medium square is formed by joining the midpoints of the sides of the large square. The small square is formed by joining the midpoints of the sides of the medium square. The area of the small square is $6 \\mathrm{~cm}^{2}$. What is the difference between the area of the medium square and the area of the large square? <image_1>",
    "options": [
      "$3 \\mathrm{~cm}^{2}$",
      "$6 \\mathrm{~cm}^{2}$",
      "$9 \\mathrm{~cm}^{2}$",
      "$12 \\mathrm{~cm}^{2}$",
      "$15 \\mathrm{~cm}^{2}$"
    ],
    "answer": "D",
    "solution": "The diagram on the right shows how the shape can be dissected into sixteen congruent triangles. The small square has been dissected into four triangles, each of area $6 \\div 4=1.5 \\mathrm{~cm}^{2}$. The difference in area between the medium and the large square is eight of these triangles, that is $8 \\times 1.5=12 \\mathrm{~cm}^{2}$.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-129.jpg?height=248&width=260&top_left_y=1629&top_left_x=1566)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_184": {
    "pid": "Math_184",
    "question": "Lina has placed two shapes on a $5 \\times 5$ board, as shown in the picture on the right. Which of the following five shapes should she place on the empty part of the board so that none of the remaining four shapes will fit in the empty space that is left? (The shapes may be rotated or turned over, but can only be placed so that they cover complete squares.)\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "By inspection, it is possible to spot the answer is shape $\\mathrm{D}$. We can justify this as follows: When Lina places any of the other shapes on the empty part of the board, the shape must cover at least one square on the bottom row so that Lina cannot place shape $\\mathrm{C}$ on the board.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-130.jpg?height=190&width=195&top_left_y=2552&top_left_x=1633)  There are five ways that Lina can place shape A on the board, covering at least one square on the bottom row, as shown below. In the first diagram, she can then place shape $\\mathrm{E}$ on the board. In the second and third diagrams, she can then place shape $\\mathrm{D}$ on the board. In the final two diagrams, she can then place shapes D or E on the board. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-131.jpg?height=186&width=980&top_left_y=414&top_left_x=652)  There is only one way that Lina can place shape B on the board, covering at least one square on the bottom row, as shown alongside. Lina can then place shapes D or E on the board.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-131.jpg?height=180&width=191&top_left_y=618&top_left_x=1635)  There are four ways that Lina can place shape D on the board, covering at least one square on the bottom row, as shown below. In the first diagram, Lina can then place shape A on the board. In the second diagram, she can then place shape E on the board. In the third diagram, she can then place shape A on the board. In the fourth diagram, Lina cannot place any of the remaining shapes on the board. This is the shape she should choose. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-131.jpg?height=182&width=774&top_left_y=1096&top_left_x=754)  Checking shape $\\mathrm{E}$ shows that there are five ways it can be placed on the board, covering at least one square on the bottom row, as shown below. In the first two diagrams, Lina can then place shape A or D on the board. In the last three diagrams, she can then place shape $\\mathrm{D}$ on the board. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-131.jpg?height=183&width=980&top_left_y=1492&top_left_x=652)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_185": {
    "pid": "Math_185",
    "question": "The diagram on the right shows a square with side $3 \\mathrm{~cm}$ inside a square with side $7 \\mathrm{~cm}$ and another square with side $5 \\mathrm{~cm}$ which intersects the first two squares. What is the difference between the area of the black region and the total area of the grey regions? <image_1>",
    "options": [
      "$0 \\mathrm{~cm}^{2}$",
      "$10 \\mathrm{~cm}^{2}$",
      "$11 \\mathrm{~cm}^{2}$",
      "$15 \\mathrm{~cm}^{2}$",
      "more information needed"
    ],
    "answer": "D",
    "solution": "Let the area of the white hexagon be $x \\mathrm{~cm}^{2}$, as indicated in the diagram.  Then the black area is $49-(9+x)=(40-x) \\mathrm{cm}^{2}$.  The total of the grey areas is $(25-x) \\mathrm{cm}^{2}$.  Thus the difference between the areas of the black and grey  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-132.jpg?height=240&width=289&top_left_y=280&top_left_x=1523) regions is $(40-x)-(25-x)=15 \\mathrm{~cm}^{2}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_190": {
    "pid": "Math_190",
    "question": "A $3 \\mathrm{~cm}$ wide strip is grey on one side and white on the other. Maria folds the strip, so that it fits inside a rectangle of length $27 \\mathrm{~cm}$, as shown. The grey trapeziums are identical. What is the length of the original strip?\n<image_1>",
    "options": [
      "$36 \\mathrm{~cm}$",
      "$48 \\mathrm{~cm}$",
      "$54 \\mathrm{~cm}$",
      "$57 \\mathrm{~cm}$",
      "$81 \\mathrm{~cm}$"
    ],
    "answer": "D",
    "solution": "Let the length of the shorter of the two parallel sides of the grey trapeziums be $x$ $\\mathrm{cm}$. Since the folded shape is $27 \\mathrm{~cm}$ long and the strip is $3 \\mathrm{~cm}$ wide, we have $3+x+3+x+3+x+3+x+3=27$ which has solution $x=3$. Hence the length of the longer of the two parallel sides of the grey trapezium is $(3+x+3) \\mathrm{cm}=9 \\mathrm{~cm}$. Also, since the height of each trapezium is equal to the width of the strip, the height is $3 \\mathrm{~cm}$ and hence the height of each of the small rectangles is $(6-3) \\mathrm{cm}$. Therefore the total length of the strip (along the edge marked in the diagram) is  $$ (6+9+3+3+3+3+3+9+3+3+3+3+6) \\mathrm{cm}=57 \\mathrm{~cm} . $$  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-212.jpg?height=240&width=649&top_left_y=971&top_left_x=772)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_192": {
    "pid": "Math_192",
    "question": "Which of the following $4 \\times 4$ tiles cannot be formed by combining the two given pieces?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": "When the two given pieces are joined together, any resulting square must have on its outside one row and one column, each of which have alternating black and white squares. Therefore tile E cannot be made. The diagrams below show how the tiles in options A, B, C and D can be made by combining the given pieces, confirming $\\mathrm{E}$ as the only tile which cannot be made. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-260.jpg?height=226&width=1128&top_left_y=584&top_left_x=544)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_194": {
    "pid": "Math_194",
    "question": "Aisha has a strip of paper with the numbers $1,2,3,4$ and 5 written in five cells as shown. She folds the strip so that the cells overlap, forming 5 layers. Which of the following configurations, from top layer to bottom layer, is it not possible to obtain? <image_1>",
    "options": [
      "$3,5,4,2,1$",
      "$3,4,5,1,2$",
      "$3,2,1,4,5$",
      "$3,1,2,4,5$",
      "$3,4,2,1,5$"
    ],
    "answer": "E",
    "solution": "The four figures (A) to (D) give a side-view of how the strip could be folded to give the arrangements of numbers in options A to D. Figure (E) shows that it is not possible to get option E since number 5 would end up between number 4 and number 2 (as indicated by the dashed line labelled 5) rather than below number 1 as is required.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-280.jpg?height=300&width=1666&top_left_y=720&top_left_x=200) ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-280.jpg?height=300&width=376&top_left_y=1048&top_left_x=1500)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_195": {
    "pid": "Math_195",
    "question": "Bella took a square piece of paper and folded two of its sides to lie along the diagonal, as shown, to obtain a quadrilateral. What is the largest size of an angle in that quadrilateral? <image_1>",
    "options": [
      "$112.5^{\\circ}$",
      "$120^{\\circ}$",
      "$125^{\\circ}$",
      "$135^{\\circ}$",
      "$150^{\\circ}$"
    ],
    "answer": "A",
    "solution": "Since the quadrilateral is formed by folding the $45^{\\circ}$ angles above and below the diagonal of the square in half, the size of the small angle of the quadrilateral is $2 \\times\\left(\\frac{1}{2} \\times 45^{\\circ}\\right)=45^{\\circ}$. One angle of the quadrilateral is $90^{\\circ}$ and the other two are equal from the construction. Therefore, since the sum of the angles in a quadrilateral is $360^{\\circ}$, the size of the equal angles is $(360-90-45)^{\\circ} \\div 2=225^{\\circ} \\div 2=112.5^{\\circ}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_198": {
    "pid": "Math_198",
    "question": "Kristina has a piece of transparent paper with some lines marked on it. She folds it along the central dashed line, as indicated. What can she now see? <image_1>",
    "options": [
      "$2: 6: 9$",
      "$2: 6: 6$",
      "$5: 6: 9$",
      "$2: 8: 6$",
      "$5: 8: 9$"
    ],
    "answer": "C",
    "solution": "Each digit in the completed number contains three horizontal line segments. Since the markings above the fold will appear the other way up when folded, the first digit in the completed number contains a vertical line top left and a vertical line bottom right in addition to the three horizontal lines and so is a 5. The second digit in the completed number contains a double length vertical line on the left and a vertical line bottom right in addition to the three horizontal lines and so is a 6. Similarly, the third digit in the completed number contains a double length vertical line on the right and a vertical line top left in addition to the three horizontal lines and so is a 9 . Therefore the number that will be seen is 569 .",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_199": {
    "pid": "Math_199",
    "question": "Henna has four hair ribbons of width $10 \\mathrm{~cm}$. When she measures them, she finds that each ribbon is $25 \\mathrm{~cm}$ longer than the next smallest ribbon. She then arranges the ribbons to form two different shapes as shown in the diagram. How much longer is the perimeter of the second shape than the perimeter of the first shape? <image_1>",
    "options": [
      "$75 \\mathrm{~cm}$",
      "$50 \\mathrm{~cm}$",
      "$25 \\mathrm{~cm}$",
      "$20 \\mathrm{~cm}$",
      "$0 \\mathrm{~cm}$"
    ],
    "answer": "B",
    "solution": "Let the length of the shortest ribbon be $x \\mathrm{~cm}$. Therefore the lengths of the other ribbons are $(x+25) \\mathrm{cm},(x+50) \\mathrm{cm}$ and $(x+75) \\mathrm{cm}$. The perimeter of the first shape (starting from the lower left corner and working clockwise) is $(x+10+25+10+25+10+25+10+x+75+40) \\mathrm{cm}=(2 x+230) \\mathrm{cm}$ while the perimeter of the second shape (again starting from the lower left corner) is $(x+50+10+25+10+50+10+75+10+x+40) \\mathrm{cm}=(2 x+280) \\mathrm{cm}$. Hence the difference between the two perimeters is $(2 x+280) \\mathrm{cm}-(2 x+230) \\mathrm{cm}=50 \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_200": {
    "pid": "Math_200",
    "question": "Three congruent isosceles trapeziums are assembled to form an equilateral triangle with a hole in the middle, as shown in the diagram.\n<image_1>\nWhat is the perimeter of the hole?",
    "options": [
      "$3 a+6 b$",
      "$3 b-6 a$",
      "$6 b-3 a$",
      "$6 a+3 b$",
      "$6 a-3 b$"
    ],
    "answer": "E",
    "solution": "Since the triangle formed when the trapeziums are put together is equilateral, the smaller angles in the isosceles trapeziums are both $60^{\\circ}$. Consider one trapezium split into a parallelogram and a triangle as shown.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f598bb42a47f3275d94g-4.jpg?height=177&width=508&top_left_y=343&top_left_x=914)  Since the original trapezium contains two base angles of $60^{\\circ}$, the triangle also contains two base angles of $60^{\\circ}$. Hence the triangle is equilateral and has side length $(b-a)$. Now consider the large equilateral triangle with the hole. The perimeter of the hole is $3(a-x)$ where $x$ is the length of the shortest sides of the trapezium. Therefore the perimeter of the hole is $3(a-(b-a))=3(2 a-b)=6 a-3 b$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_203": {
    "pid": "Math_203",
    "question": "A square piece of paper of area $64 \\mathrm{~cm}^{2}$ is folded twice, as shown in the diagram. What is the sum of the areas of the two shaded rectangles?\n<image_1>",
    "options": [
      "$10 \\mathrm{~cm}^{2}$",
      "$14 \\mathrm{~cm}^{2}$",
      "$15 \\mathrm{~cm}^{2}$",
      "$16 \\mathrm{~cm}^{2}$",
      "$24 \\mathrm{~cm}^{2}$"
    ],
    "answer": "D",
    "solution": "Consider the square divided up into 16 congruent smaller squares, as shown. Since the original square has area $64 \\mathrm{~cm}^{2}$, each of the smaller squares has area $4 \\mathrm{~cm}^{2}$. When the square is folded twice in the manner shown, it can be seen that each of the shaded rectangles is made up of two small squares. ![](https://cdn.mathpix.com/cropped/2023_12_27_23f752c0584f83753c92g-12.jpg?height=276&width=712&top_left_y=718&top_left_x=1161) Therefore the sum of the areas of the two shaded rectangles is $2 \\times 2 \\times 4 \\mathrm{~cm}^{2}=16 \\mathrm{~cm}^{2}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_205": {
    "pid": "Math_205",
    "question": "In the picture, the three strips labelled 1,2,3 have the same horizontal width $a$. These three strips connect two parallel lines. Which of these statements is true? <image_1>",
    "options": [
      "All three strips have the same area.",
      "Strip 1 has the largest area.",
      "Strip 2 has the largest area.",
      "Strip 3 has the largest area.",
      "It is impossible to say which has the largest area without knowing $a$."
    ],
    "answer": "A",
    "solution": "Strip 1 is a rectangle with area $a b$, where $b$ is the distance between the two parallel lines. Strip 2 is a parallelogram with area $a b$. Cutting strip 3 as shown creates two parallelograms. The area of each is $a \\times$ its vertical height. Since the two heights add to give $b$, strip 3 also has area $a b$. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-016.jpg?height=240&width=210&top_left_y=544&top_left_x=1049)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_206": {
    "pid": "Math_206",
    "question": "A rectangular sheet of paper which measures $6 \\mathrm{~cm} \\times 12 \\mathrm{~cm}$ is folded along its diagonal (Diagram A). The shaded areas in Diagram B are then cut off and the paper is unfolded leaving the rhombus shown in Diagram C. What is the length of the side of the rhombus? <image_1>",
    "options": [
      "$\\frac{7}{2} \\sqrt{5} \\mathrm{~cm}$",
      "$7.35 \\mathrm{~cm}$",
      "$7.5 \\mathrm{~cm}$",
      "$7.85 \\mathrm{~cm}$",
      "$8.1 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": "Consider Diagram $B$ from the question, as shown, and let the rhombus have side $x \\mathrm{~cm}$. Thus $A C=C D=x, B C=12-x$ and $A B=6$. Applying Pythagoras' Theorem to $\\triangle A B C$ gives $x^{2}=6^{2}+(12-x)^{2} \\Rightarrow x^{2}=36+144-24 x+x^{2} \\Rightarrow$ $24 x=180$ so the side of the rhombus is $7.5 \\mathrm{~cm}$.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-018.jpg?height=226&width=276&top_left_y=664&top_left_x=968)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_207": {
    "pid": "Math_207",
    "question": "A square $P Q R S$ with sides of length 10 is rolled without slipping along a line. Initially $P$ and $Q$ are on the line and the first roll is around point $Q$ as shown in the diagram. The rolling stops when $P$ first returns to the line. What is the length of the curve that $P$ has travelled?\n<image_1>",
    "options": [
      "$10 \\pi$",
      "$5 \\pi+5 \\pi \\sqrt{2}$",
      "$10 \\pi+5 \\pi \\sqrt{2}$",
      "$5 \\pi+10 \\pi \\sqrt{2}$",
      "$10 \\pi+10 \\pi \\sqrt{2}$"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_208": {
    "pid": "Math_208",
    "question": "A coin with diameter $1 \\mathrm{~cm}$ rolls around the outside of a regular hexagon with edges of length $1 \\mathrm{~cm}$ until it returns to its original position. In centimetres, what is the length of the path traced out by the centre of the coin? <image_1>",
    "options": [
      "$6+\\pi / 2$",
      "$12+\\pi$",
      "$6+\\pi$",
      "$12+2 \\pi$",
      "$6+2 \\pi$"
    ],
    "answer": "C",
    "solution": "Along the six edges the centre moves $1 \\mathrm{~cm}$ (parallel to the edges). Around the six vertices it traces out an arc of radius $\\frac{1}{2} \\mathrm{~cm}$ and angle $60^{\\circ}$, which has length  $$ \\frac{60}{360} \\times 2 \\pi \\times \\frac{1}{2}=\\frac{\\pi}{6} $$  The total distance $=6 \\times\\left(1+\\frac{\\pi}{6}\\right)=6+\\pi$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_209": {
    "pid": "Math_209",
    "question": "Six points are marked on a sheet of squared paper as shown. Which of the following shapes cannot be made by connecting some of these points using straight lines? <image_1>",
    "options": [
      "parallelogram",
      "trapezium",
      "right-angled triangle",
      "obtuse-angled triangle",
      "all the shapes $\\mathrm{A}-\\mathrm{D}$ can be made"
    ],
    "answer": "E",
    "solution": "The shape $R S U V$ is a parallelogram; $R S T U$ is a trapezium; $R S U$ is a right-angled triangle; $R S V$ is an obstuse-angled triangle.  Therefore all the shapes can be made.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-121.jpg?height=328&width=357&top_left_y=1315&top_left_x=1478)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_210": {
    "pid": "Math_210",
    "question": "A circle of radius $4 \\mathrm{~cm}$ is divided into four congruent parts by arcs of radius $2 \\mathrm{~cm}$ as shown. What is the length of the perimeter of one of the parts, in $\\mathrm{cm}$ ? <image_1>",
    "options": [
      "$2 \\pi$",
      "$4 \\pi$",
      "$6 \\pi$",
      "$8 \\pi$",
      "$12 \\pi$"
    ],
    "answer": "C",
    "solution": "Each of the four congruent parts has three arcs on its perimeter: Two semicircles of radius $2 \\mathrm{~cm}$ (which have total length $2 \\times \\pi \\times 2=4 \\pi \\mathrm{cm}$ ) and a quarter-arc of radius $4 \\mathrm{~cm}$ (length $\\frac{1}{4} \\times 2 \\times \\pi \\times 4=2 \\pi \\mathrm{cm}$ ). Therefore the perimeter has length $6 \\pi \\mathrm{cm}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_212": {
    "pid": "Math_212",
    "question": "One of the line segments shown on the grid is the image produced by a rotation of the other line segment. Which of the points $T, U, V$, $W$ could be the centre of such a rotation? <image_1>",
    "options": [
      "only $T$",
      "only $U$",
      "either of $U$ and $W$",
      "any of $U, V$ and $W$",
      "any of $T, U, V$ and $W$"
    ],
    "answer": "C",
    "solution": "Label the horizontal line segment $P Q$, and the vertical line segment $R S$. A rotation of $90^{\\circ}$ anticlockwise about $U$, or $90^{\\circ}$ clockwise about $W$ would map $P Q$ onto $R S$.  When a rotation is performed, the distance of any point from the centre of rotation is preserved. Hence $T$ cannot be a centre because it is a distance of 1 unit from R, but more than 1 unit from $P$ and $Q$. Similarly $V$ is less than 2 units from $R$ and $S$, but more than 2 units  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-137.jpg?height=377&width=451&top_left_y=1830&top_left_x=1348) from $Q$. So only $U$ and $W$ can be centres.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_213": {
    "pid": "Math_213",
    "question": "The trapezium shown in the diagram is rotated anti-clockwise by $90^{\\circ}$ around the origin $O$, and then reflected in the $x$-axis. Which of the following shows the end result of these transformations? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": "After rotation $90^{\\circ}$ anticlockwise, we obtain shape E. When reflected in the $x$-axis this gives shape A.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_214": {
    "pid": "Math_214",
    "question": "If $r, s$, and $t$ denote the lengths of the 'lines' in the picture, then which of the following inequalities is correct? <image_1>",
    "options": [
      "$r<s<t$",
      "$r<t<s$",
      "$s<r<t$",
      "$s<t<r$",
      "$t<s<r$"
    ],
    "answer": "E",
    "solution": "If each square has side-length one unit, then the length $r$ is 16 units. The length $s$ consists of 8 straight unit lengths and two semicircles with radius 1 unit, so $s=8+2 \\pi$. The length $t$ consists of 8 straight unit lengths and two diagonals (that together make the hypotenuse of a right-angled triangle with short sides both of length 4 units), so $t=8+2 \\sqrt{8}$. Since $\\sqrt{8}<3<\\pi<4$, we have $t<s<r$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_215": {
    "pid": "Math_215",
    "question": "Which of the following diagrams shows the locus of the midpoint of the wheel when the wheel rolls along the zig-zag curve shown?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": "As the wheel goes over the top it pivots around the peak so the midpoint travels through a circular arc. At the troughs the wheel changes directions in an instant from down-right to up-right, so the midpoint travels through a sharp change of direction. This gives the locus in diagram $\\mathrm{E}$.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_216": {
    "pid": "Math_216",
    "question": "A circle of radius 1 rolls along a straight line from the point $K$ to the point $L$, where $K L=11 \\pi$. Which of the following pictures shows the correct appearance of the circle when it reaches $L$ ?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "The circumference is $2 \\pi$, so every time the circle rolls $2 \\pi$ it has turned $360^{\\circ}$ and looks the same as it did at $K$. After $11 \\pi$, it has turned $5 \\frac{1}{2}$ turns, which is picture D.",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_217": {
    "pid": "Math_217",
    "question": "The diagram shows three congruent regular hexagons. Some diagonals have been drawn, and some regions then shaded. The total shaded areas of the hexagons are $X, Y, Z$ as shown. Which of the following statements is true? <image_1>",
    "options": [
      "$X, Y$ and $Z$ are all the same",
      "$\\quad Y$ and $Z$ are equal, but $X$ is different",
      "$X$ and $Z$ are equal, but $Y$ is different",
      "$X$ and $Y$ are equal, but $Z$ is different",
      "$X, Y, Z$ are all different"
    ],
    "answer": "A",
    "solution": "By joining the vertices of the inner triangle to the centre of the hexagon in both the first and third diagrams, it can be seen that each hexagon has been dissected into six equal parts, three of which are shaded. Therefore, $X, Y$ and $Z$ are each half of the hexagon and hence they are all the same. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-251.jpg?height=212&width=750&top_left_y=1820&top_left_x=1096)",
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_223": {
    "pid": "Math_223",
    "question": "A white cylindrical silo has a diameter of 30 feet and a height of 80 feet. A red stripe with a horizontal width of 3 feet is painted on the silo, as shown, making two complete revolutions around it. What is the area of the stripe in square feet?\n\n<image_1>",
    "options": [
      "$120$",
      "$180$",
      "$240$",
      "$360$",
      "$480$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_224": {
    "pid": "Math_224",
    "question": "The letter F shown below is rotated $90^\\circ$ clockwise around the origin, then reflected in the $y$-axis, and then rotated a half turn around the origin. What is the final image?\n<image_1><image2>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_226": {
    "pid": "Math_226",
    "question": "A paper triangle with sides of lengths 3, 4, and 5 inches, as shown, is folded so that point $A$ falls on point $B$. What is the length in inches of the crease?\n<image_1>",
    "options": [
      "$1+\\frac{1}{2} \\sqrt{2}$",
      "$\\sqrt{3}$",
      "$\\frac{7}{4}$",
      "$\\frac{15}{8}$",
      "$2$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_228": {
    "pid": "Math_228",
    "question": "Let $OABC$ be a unit square in the $xy$-plane with $O(0,0),A(1,0),B(1,1)$ and $C(0,1)$.  Let $u=x^2-y^2$ and $v=2xy$ be a transformation of the $xy$-plane into the $uv$-plane.  The transform (or image) of the square is:\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_229": {
    "pid": "Math_229",
    "question": "<image_1>\n\nEquilateral triangle $ABP$ (see figure) with side $AB$ of length $2$ inches is placed inside square $AXYZ$ with side of length $4$ inches so that $B$ is on side $AX$. The triangle is rotated clockwise about $B$, then $P$, and so on along the sides of the square until $P$ returns to its original position. The length of the path in inches traversed by vertex $P$ is equal to",
    "options": [
      "$20\\pi/3$",
      "$32\\pi/3$",
      "$12\\pi$",
      "$40\\pi/3$",
      "$15\\pi$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_230": {
    "pid": "Math_230",
    "question": "A circle with a circumscribed and an inscribed square centered at the origin $ O$ of a rectangular coordinate system with positive $ x$ and $ y$ axes $ OX$ and $ OY$ is shown in each figure $ I$ to $ IV$ below.\n<image_1>\n\nThe inequalities\n\\[ |x| + |y| \\leq \\sqrt{2(x^2 + y^2)} \\leq 2\\mbox{Max}(|x|, |y|)\\]\nare represented geometrically* by the figure numbered",
    "options": [
      "$I$",
      "$II$",
      "$III$",
      "$IV$",
      "$\\mbox{none of these}*An inequality of the form  f(x, y) \\leq g(x, y), for all  x and  y is represented geometrically by a figure showing the containment \\{\\mbox{The set of points }(x, y)\\mbox{ such that }g(x, y) \\leq a\\} \\subset\\ \\{\\mbox{The set of points }(x, y)\\mbox{ such that }f(x, y) \\leq a\\}for a typical real number  a$."
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_231": {
    "pid": "Math_231",
    "question": "<image_1>\n\nPoints $A , B, C$, and $D$ are distinct and lie, in the given order, on a straight line. Line segments $AB, AC$, and $AD$ have lengths $x, y$, and $z$ , respectively. If line segments $AB$ and $CD$ may be rotated about points $B$ and $C$, respectively, so that points $A$ and $D$ coincide, to form a triangle with positive area, then which of the following three inequalities must be satisfied?\n\n$\\textbf{I. }x<\\frac{z}{2}\\qquad\\textbf{II. }y<x+\\frac{z}{2}\\qquad\\textbf{III. }y<\\frac{z}{2}$",
    "options": [
      "$\\textbf{I. }\\text{only}$",
      "$\\textbf{II. }\\text{only}$",
      "$\\textbf{I. }\\text{and }\\textbf{II. }\\text{only}$",
      "$\\textbf{II. }\\text{and }\\textbf{III. }\\text{only}$",
      "$\\textbf{I. },\\textbf{II. },\\text{and }\\textbf{III. }$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_232": {
    "pid": "Math_232",
    "question": "In one of the adjoining figures a square of side $2$ is dissected into four pieces so that $E$ and $F$ are the midpoints of opposite sides and $AG$ is perpendicular to $BF$.  These four pieces can then be reassembled into a rectangle as shown in the second figure.  The ratio of height to base, $XY$ / $YZ$, in this rectangle is\n\n<image_1>",
    "options": [
      "$4$",
      "$1+2\\sqrt{3}$",
      "$2\\sqrt{5}$",
      "$\\frac{8+4\\sqrt{3}}{3}$",
      "$5$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_234": {
    "pid": "Math_234",
    "question": "<image_1>\nEach of the sides of the five congruent rectangles is labeled with an integer, as shown above. These five rectangles are placed, without rotating or reflecting, in positions $I$ through $V$ so that the labels on coincident sides are equal.\nWhich of the rectangles is in position $I$?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_237": {
    "pid": "Math_237",
    "question": "Usain is walking for exercise by zigzagging across a $100$-meter by $30$-meter rectangular field, beginning at point $A$ and ending on the segment $\\overline{BC}$. He wants to increase the distance walked by zigzagging as shown in the figure below $(APQRS)$. What angle $\\theta=\\angle PAB=\\angle QPC=\\angle RQB=\\cdots$ will produce in a length that is $120$ meters? (Do not assume the zigzag path has exactly four segments as shown; there could be more or fewer.)\n\n<image_1>",
    "options": [
      "$\\arccos\\frac{5}{6}$",
      "$\\arccos\\frac{4}{5}$",
      "$\\arccos\\frac{3}{10}$",
      "$\\arcsin\\frac{4}{5}$",
      "$\\arcsin\\frac{5}{6}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_238": {
    "pid": "Math_238",
    "question": "<image_1>\n\nThe square in the first diagram \"rolls\" clockwise around the fixed regular hexagon until it reaches the bottom. In which position will the solid triangle be in diagram $4$?\n",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_239": {
    "pid": "Math_239",
    "question": "Suppose a square piece of paper is folded in half vertically.  The folded paper is then cut in half along the dashed line.  Three rectangles are formed-a large one and two small ones.  What is the ratio of the perimeter of one of the small rectangles to the perimeter of the large rectangle?\n<image_1>",
    "options": [
      "$\\frac{1}{2}$",
      "$\\frac{2}{3}$",
      "$\\frac{3}{4}$",
      "$\\frac{4}{5}$",
      "$\\frac{5}{6}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_242": {
    "pid": "Math_242",
    "question": "Eight $1\\times 1$ square tiles are arranged as shown so their outside edges form a polygon with a perimeter of $14$ units.  Two additional tiles of the same size are added to the figure so that at least one side of each tile is shared with a side of one of the squares in the original figure.  Which of the following could be the perimeter of the new figure?\n\n<image_1>",
    "options": [
      "15",
      "17",
      "18",
      "19",
      "20"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_243": {
    "pid": "Math_243",
    "question": "Each of the three large squares shown below is the same size.  Segments that intersect the sides of the squares intersect at the midpoints of the sides.  How do the shaded areas of these squares compare?\n\n<image_1>",
    "options": [
      "$\\text{The shaded areas in all three are equal.}$",
      "$\\text{Only the shaded areas of }I\\text{ and }II\\text{ are equal.}$",
      "$\\text{Only the shaded areas of }I\\text{ and }III\\text{ are equal.}$",
      "$\\text{Only the shaded areas of }II\\text{ and }III\\text{ are equal.}$",
      "$\\text{The shaded areas of }I, II\\text{ and }III\\text{ are all different.}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_244": {
    "pid": "Math_244",
    "question": "As indicated by the diagram below, a rectangular piece of paper is folded bottom to top, then left to right, and finally, a hole is punched at X.\nWhat does the paper look like when unfolded?\n<image_1>\n",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_249": {
    "pid": "Math_249",
    "question": "Initially, a spinner points west. Chenille moves it clockwise $ 2 \\frac{1}{4}$ revolutions and then counterclockwise $ 3 \\frac{3}{4}$ revolutions. In what direction does the spinner point after the two moves?\n\n<image_1>",
    "options": [
      "$\\text{north}$",
      "$\\text{east}$",
      "$\\text{south}$",
      "$\\text{west}$",
      "$\\text{northwest}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_250": {
    "pid": "Math_250",
    "question": "Tiles I, II, III and IV are translated so one tile coincides with each of the rectangles $A, B, C$ and $D$. In the final arrangement, the two numbers on any side common to two adjacent tiles must be the same. Which of the tiles is translated to Rectangle $C$?\n\n<image_1>",
    "options": [
      "$I$",
      "$II$",
      "$III$",
      "$IV$",
      "$\\text{ cannot be determined}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_251": {
    "pid": "Math_251",
    "question": "What is the area of the shaded pinwheel shown in the $5\\times 5$ grid?\n\n<image_1>",
    "options": [
      "$4$",
      "$6$",
      "$8$",
      "$10$",
      "$12$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_252": {
    "pid": "Math_252",
    "question": "The five pieces shown below can be arranged to form four of the five figures shown in the choices. Which figure cannot be formed?\n<image_1>\n",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_254": {
    "pid": "Math_254",
    "question": "Each of the following four large congruent squares is subdivided into combinations of congruent triangles or rectangles and is partially bolded. What percent of the total area is partially bolded?\n\n\n<image_1>",
    "options": [
      "$12\\frac{1}{2}$",
      "$20$",
      "$25$",
      "$33 \\frac{1}{3}$",
      "$37\\frac{1}{2}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_255": {
    "pid": "Math_255",
    "question": "A circle of radius 2 is cut into four congruent arcs. The four arcs are joined to form the star figure shown. What is the ratio of the area of the star figure to the area of the original circle?\n\n<image_1>",
    "options": [
      "$\\frac{4-\\pi}\\pi$",
      "$\\frac{1}{\\pi}$",
      "$\\frac{\\sqrt{2}}{\\pi}$",
      "$\\frac{\\pi-1}\\pi$",
      "$\\frac{3}{\\pi}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_256": {
    "pid": "Math_256",
    "question": "A ball with diameter 4 inches starts at point A to roll along the track shown. The track is comprised of 3 semicircular arcs whose radii are $R_1 = 100$ inches, $R_2 = 60$ inches, and $R_3 = 80$ inches, respectively. The ball always remains in contact with the track and does not slip. What is the distance the center of the ball travels over the course from A to B?\n<image_1>",
    "options": [
      "$238\\pi$",
      "$240\\pi$",
      "$260\\pi$",
      "$280\\pi$",
      "$500\\pi$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_257": {
    "pid": "Math_257",
    "question": "There are 81 grid points (uniformly spaced) in the square shown in the diagram below, including the points on the edges. Point $P$ is the center of the square. Given that point $Q$ is randomly chosen from among the other 80 points, what is the probability that line $PQ$ is a line of symmetry for the square?\n<image_1>",
    "options": [
      "$\\frac{1}{5}$",
      "$\\frac{1}{4}$",
      "$\\frac{2}{5}$",
      "$\\frac{9}{20}$",
      "$\\frac{1}{2}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_258": {
    "pid": "Math_258",
    "question": "The letter M in the figure below is first reflected over the line $q$ and then reflected over the line $p$. What is the resulting image?\n<image_1>\n",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_259": {
    "pid": "Math_259",
    "question": "A square piece of paper is folded twice into four equal quarters, as shown below, then cut along the dashed line. When unfolded, the paper will match which of the following figures?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "2D Transformation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_269": {
    "pid": "Math_269",
    "question": "Ingrid has 4 red, 3 blue, 2 green and 1 yellow cube. She uses them to build the following object:\n<image_1>\nCubes with the same colour don't touch each other. Which colour is the cube with the question mark?",
    "options": [
      "red",
      "blue",
      "green",
      "Yellow",
      "This cannot be worked out for certain."
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_272": {
    "pid": "Math_272",
    "question": "Five equally big square pieces of card are placed on a table on top of each other. The picture on the side is created this way. The cards are collected up from top to bottom. In which order are they collected?\n<image_1>",
    "options": [
      "5-4-3-2-1",
      "5-2-3-4-1",
      "5-4-2-3-1",
      "5-3-2-1-4",
      "5-2-3-1-4"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_274": {
    "pid": "Math_274",
    "question": "Six figures were drawn, one on each side of a cube, as shown beside, in different positions. On the side that does not appear beside is this drawing:\n<image_1>\nWhat is the figure on the face opposite to it?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_276": {
    "pid": "Math_276",
    "question": "Four identical pieces of paper are placed as shown. Michael wants to punch a hole that goes through all four pieces. At which point should Michael punch the hole?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_278": {
    "pid": "Math_278",
    "question": "A $3 \\times 3 \\times 3$ cube weighs 810 grams. If we drill three holes through it as shown, each of which is a $1 \\times 1 \\times 3$ rectangular parallelepiped, the weight of the remaining solid is:\n<image_1>",
    "options": [
      "$540 \\mathrm{~g}$",
      "$570 \\mathrm{~g}$",
      "$600 \\mathrm{~g}$",
      "$630 \\mathrm{~g}$",
      "$660 \\mathrm{~g}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_281": {
    "pid": "Math_281",
    "question": "A rectangular piece of paper is wrapped around a cylinder. Then an angled straight cut is made through the points $\\mathrm{X}$ and $\\mathrm{Y}$ of the cylinder as shown on the left. The lower part of the piece of paper is then unrolled. Which of the following pictures could show the result?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_282": {
    "pid": "Math_282",
    "question": "A rectangular piece of paper $A B C D$ with the measurements $4 \\mathrm{~cm} \\times 16 \\mathrm{~cm}$ is folded along the line $\\mathrm{MN}$ so that point $C$ coincides with point $A$ as shown. How big is the area of the quadrilateral ANMD'?\n<image_1>",
    "options": [
      "$28 \\mathrm{~cm}^{2}$",
      "$30 \\mathrm{~cm}^{2}$",
      "$32 \\mathrm{~cm}^{2}$",
      "$48 \\mathrm{~cm}^{2}$",
      "$56 \\mathrm{~cm}^{2}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_283": {
    "pid": "Math_283",
    "question": "Let $a>b$. If the ellipse shown rotates about the $x$-axis an ellipsoid $E_{x}$ with volume $\\operatorname{Vol}\\left(E_{x}\\right)$ is obtained. If it rotates about the $y$-axis an ellipsoid $E_{y}$ with volume $\\operatorname{Vol}\\left(E_{y}\\right)$ is obtained. Which of the following statements is true?\n<image_1>",
    "options": [
      "$\\mathrm{E}_{\\mathrm{x}}=\\mathrm{E}_{\\mathrm{y}}$ and $\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{x}}\\right)=\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{y}}\\right)$",
      "$\\mathrm{E}_{\\mathrm{x}}=\\mathrm{E}_{\\mathrm{y}}$ but $\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{x}}\\right) \\neq \\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{y}}\\right)$",
      "$\\mathrm{E}_{\\mathrm{x}} \\neq \\mathrm{E}_{\\mathrm{y}}$ and $\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{x}}\\right)>\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{y}}\\right)$",
      "$\\mathrm{E}_{\\mathrm{x}} \\neq \\mathrm{E}_{\\mathrm{y}}$ and $\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{x}}\\right)<\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{y}}\\right)$",
      "$\\mathrm{E}_{\\mathrm{x}} \\neq \\mathrm{E}_{\\mathrm{y}}$ but $\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{x}}\\right)=\\operatorname{Vol}\\left(\\mathrm{E}_{\\mathrm{y}}\\right)$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_285": {
    "pid": "Math_285",
    "question": "The curved surfaces of two identical cylinders are cut open along the vertical dotted line, as shown and then stuck together to create the curved surface of one big cylinder. What can be said about the volume of the resulting cylinder compared to the volume of one of the small cylinders?\n<image_1>",
    "options": [
      "It is 2-times as big.",
      "It is 3-times as big.",
      "It is $\\pi$-times as big.",
      "It is 4-times as big.",
      "It is 8-times as big."
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_287": {
    "pid": "Math_287",
    "question": "In the diagram a closed polygon can be seen whose vertices are the midpoints of the edges of the die. The interior angles are as usual defined as the angle that two sides of the polygon describe in a common vertex. How big is the sum of all interior angles of the polygon?\n<image_1>",
    "options": [
      "$720^{\\circ}$",
      "$1080^{\\circ}$",
      "$1200^{\\circ}$",
      "$1440^{\\circ}$",
      "$1800^{\\circ}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_288": {
    "pid": "Math_288",
    "question": "On a standard die the sum of the numbers on opposite faces is always 7. Two identical standard dice are shown in the figure. How many dots could there be on the non-visible right-hand face (marked with \"?\")?\n<image_1>",
    "options": [
      "only 5",
      "only 2",
      "either 2 or 5",
      "either 1, 2, 3 or 5",
      "either 2,3 or 5"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_289": {
    "pid": "Math_289",
    "question": "A rectangular piece of paper $A B C D$ is $5 \\mathrm{~cm}$ wide and $50 \\mathrm{~cm}$ long. The paper is white on one side and grey on the other. Christina folds the strip as shown so that the vertex $B$ coincides with $M$ the midpoint of the edge $C D$. Then she folds it so that the vertex $D$ coincides with $N$ the midpoint of the edge $A B$. How big is the area of the visible white part in the diagram?\n<image_1>",
    "options": [
      "$50 \\mathrm{~cm}^{2}$",
      "$60 \\mathrm{~cm}^{2}$",
      "$62.5 \\mathrm{~cm}^{2}$",
      "$100 \\mathrm{~cm}^{2}$",
      "$125 \\mathrm{~cm}^{2}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_290": {
    "pid": "Math_290",
    "question": "A $4 \\times 1 \\times 1$ cuboid is made up of 2 white and 2 grey cubes as shown. Which of the following cuboids can be build entirely out of such $4 \\times 1 \\times 1$ cuboids?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_292": {
    "pid": "Math_292",
    "question": "The faces of the brick have the areas A, B and C as shown. How big is the volume of the brick?\n<image_1>",
    "options": [
      "$A B C$",
      "$\\sqrt{A B C}$",
      "$\\sqrt{A B+B C+C A}$",
      "$\\sqrt[3]{A B C}$",
      "$2(A+B+C)$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_293": {
    "pid": "Math_293",
    "question": "Two dice with volumes $V$ and $W$ intersect each other as shown. $90 \\%$ of the volume of the die with volume $V$ does not belong to both dice. $85 \\%$ of the volume of the die with volume $W$ does not belong to both dice. What is the relationship between the volumes of the two dice?\n<image_1>",
    "options": [
      "$V=\\frac{2}{3} W$",
      "$V=\\frac{3}{2} W$",
      "$V=\\frac{85}{90} \\mathrm{~W}$",
      "$V=\\frac{90}{85} W$",
      "$V=W$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_294": {
    "pid": "Math_294",
    "question": "The five vases shown are filled with water. The filling rate is constant. For which of the five vases does the graph shown describe the height of the water $h$ as a function of the time t?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_295": {
    "pid": "Math_295",
    "question": "An octahedron is inscribed into a die with side length 1. The vertices of the octahedron are the midpoints of the faces of the die. How big is the volume of the octahedron?\n<image_1>",
    "options": [
      "$\\frac{1}{3}$",
      "$\\frac{1}{4}$",
      "$\\frac{1}{5}$",
      "$\\frac{1}{6}$",
      "$\\frac{1}{8}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_297": {
    "pid": "Math_297",
    "question": "A cuboid-shaped container that is not filled completely contains $120 \\mathrm{~m}^{3}$ of water. The depth of the water is either $2 \\mathrm{~m}$ or $3 \\mathrm{~m}$ or $5 \\mathrm{~m}$, depending on which side the container is actually standing on (drawings not to scale). How big is the volume of the container?\n<image_1>",
    "options": [
      "$160 \\mathrm{~m}^{3}$",
      "$180 \\mathrm{~m}^{3}$",
      "$200 \\mathrm{~m}^{3}$",
      "$220 \\mathrm{~m}^{3}$",
      "$240 \\mathrm{~m}^{3}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_299": {
    "pid": "Math_299",
    "question": "An ant walked $6 \\mathrm{~m}$ every day to go from point $A$ to point $B$ in a straight line. One day Johnny put a straight cylinder of one meter high in that way. Now the ant walks on the same straight line or above it, having to go up and down the cylinder, as shown in the picture. How much does she have to walk now to go from $A$ to $B$?\n<image_1>",
    "options": [
      "$8 \\mathrm{~m}$",
      "$9 \\mathrm{~m}$",
      "$6+\\pi \\mathrm{~m}$",
      "$12-\\pi \\mathrm{~m}$",
      "$10 \\mathrm{~m}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_301": {
    "pid": "Math_301",
    "question": "A piece of string is lying on the table. It is partially covered by three coins as seen in the figure. Under each coin the string is equally likely to pass over itself like this: <image_1>\nor like this: <image2>. What is the probability that the string is knotted after its ends are pulled?",
    "options": [
      "$\\frac{1}{2}$",
      "$\\frac{1}{4}$",
      "$\\frac{1}{8}$",
      "$\\frac{3}{4}$",
      "$\\frac{3}{8}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_303": {
    "pid": "Math_303",
    "question": "A cuboid with surface area $X$ is cut up along six planes parallel to the sides (see diagram). What is the total surface area of all 27 thus created solids?\n<image_1>",
    "options": [
      "$X$",
      "$2 X$",
      "$3 X$",
      "$4 X$",
      "It depends on the position of the planes."
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_304": {
    "pid": "Math_304",
    "question": "Which two building blocks can be joined together so that the object shown is created?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_305": {
    "pid": "Math_305",
    "question": "A cylindrical tin is $15 \\mathrm{~cm}$ high. The circumference of the base circle is $30 \\mathrm{~cm}$. An ant walks from point $A$ at the base to point $B$ at the top. Its path is partly vertically upwards and partly along horizontal circular arcs. Its path is drawn in bold on the diagram (with a solid line on the front and a dashed line at the back). How long is the total distance covered by the ant? <image_1>",
    "options": [
      "$45 \\mathrm{~cm}$",
      "$55 \\mathrm{~cm}$",
      "$60 \\mathrm{~cm}$",
      "$65 \\mathrm{~cm}$",
      "$75 \\mathrm{~cm}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_306": {
    "pid": "Math_306",
    "question": "Leon has drawn a closed path on the surface of a cuboid. Which net can represent his path?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_307": {
    "pid": "Math_307",
    "question": "A game marker in the shape of a regular tetrahedron has one marked area. That side is placed on the triangle marked START. The marker is then moved within the diagram always to the next adjacent triangle by rolling it around an edge. On which triangle is the marker when it is on the marked side again for the first time? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_308": {
    "pid": "Math_308",
    "question": "Two identical cylindrical glasses contain the same amount of water. The left glass is upright, while the right one rests against the other one at a slant. The water level in both glasses is at the same height. The water level in the leaning glass touches its bottom in exactly one point (see diagram). The bases of both glasses have an area of $3 \\pi \\mathrm{cm}^{2}$. How much water is in each glass? <image_1>",
    "options": [
      "$9 \\pi \\mathrm{cm}^{3}$",
      "$6 \\pi \\mathrm{cm}^{3}$",
      "$3 \\sqrt{3} \\pi \\mathrm{cm}^{3}$",
      "$\\frac{3 \\pi}{4} \\mathrm{~cm}^{3}$",
      "It cannot be uniquely determined from this information."
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_310": {
    "pid": "Math_310",
    "question": "The picture on the right has been drawn on paper and cut out to make a house. Which of the houses does it make?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_314": {
    "pid": "Math_314",
    "question": "Anna made the figure on the right out of five cubes. Which of the following figures (when seen from any direction) cannot she get from the figure on the right side if she is allowed to move exactly one cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_315": {
    "pid": "Math_315",
    "question": "One of the cube faces is cut along its diagonals (see the fig.). Which two of the following nets are impossible?\n<image_1>",
    "options": [
      "1 and 3",
      "1 and 5",
      "3 and 4",
      "3 and 5",
      "2 and 4"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_318": {
    "pid": "Math_318",
    "question": "Four identical dice were put together to make a tower as shown. The sum of the numbers on opposite faces of each dice is always 7. What would the tower look like from behind?\n<image_1>",
    "options": [
      "A)",
      "B)",
      "C)",
      "D)",
      "E)"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_320": {
    "pid": "Math_320",
    "question": "You need 3 pieces to build this shape. Each piece is made out of 4 , equally sized cubes of the same colour. What is the shape of the white piece?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_322": {
    "pid": "Math_322",
    "question": "This picture shows you Anna's house from the front: At the back it has three windows but no door. Which picture shows Anna's house from the back?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_325": {
    "pid": "Math_325",
    "question": "There are two holes in the cover of a book. The book lies on the table opened up (see diagram).\n<image_1>\nAfter closing up the book which vehicles can Olaf see?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_326": {
    "pid": "Math_326",
    "question": "Six paper strips are used to weave a pattern (see diagram). What do you see when you look at the pattern from behind?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_327": {
    "pid": "Math_327",
    "question": "Jana\u00edna made the construction on a grid, using some lighted colored cubes and others darker. Looking from above the construction, what can she see?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_328": {
    "pid": "Math_328",
    "question": "Julia drew the picture on the side of a cardboard sheet, cut, folded and glued to form a cube. Which of the cubes below can be the one she did?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_332": {
    "pid": "Math_332",
    "question": "Johanna folds a piece of paper with the numbers 1 to 36 in half twice (see diagrams).\n<image_1>\nThen she stabs a hole through all four layers at the same time (see diagram on the right). Which four numbers does she pierce in doing so?",
    "options": [
      "$8,11,26,29$",
      "$14,16,21,23$",
      "$14,17,20,23$",
      "$15,16,21,22$",
      "$15,17,20,22$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_333": {
    "pid": "Math_333",
    "question": "A pyramid is built from cubes (see diagram)\nAll cubes have side length $10 \\mathrm{~cm}$.\nAn ant crawls along the line drawn across the pyramid (see diagram).\nHow long is the path taken by the ant?\n<image_1>",
    "options": [
      "$30 \\mathrm{~cm}$",
      "$60 \\mathrm{~cm}$",
      "$70 \\mathrm{~cm}$",
      "$80 \\mathrm{~cm}$",
      "$90 \\mathrm{~cm}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_335": {
    "pid": "Math_335",
    "question": "The diagram shows a cube with sides of length $12 \\mathrm{~cm}$. An ant moves on the cube surface from point $M$ to point $N$ following the route shown. Find the length of ant's path.\n<image_1>",
    "options": [
      "40 cm",
      "48 cm",
      "50 cm",
      "60 cm",
      "It is impossible to determine"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_337": {
    "pid": "Math_337",
    "question": "A paper in the shape of a regular hexagon, as the one shown, is folded in such a way that the three marked corners touch each other at the centre of the hexagon. What is the obtained figure?\n<image_1>",
    "options": [
      "Six corner star",
      "Dodecagon",
      "Hexagon",
      "Square",
      "Triangle"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_338": {
    "pid": "Math_338",
    "question": "On the faces of a cube are written letters. First figure represents one possibility of its net. What letter should be written instead of the question mark in the other version of its net?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "E",
      "Impossible to determine"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_339": {
    "pid": "Math_339",
    "question": "Diagonals are drawn in three adjacent faces of a cube as shown in the picture. Which of the following nets is that of the given cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_340": {
    "pid": "Math_340",
    "question": "A rectangular section was cut out of a rectangular block as shown in the diagram. Find the decrease percentage of the surface area.\n<image_1>",
    "options": [
      "Less than $12.5 \\%$",
      "$12.5 \\%$",
      "More than $12.5 \\%$, but less than $25 \\%$",
      "$25 \\%$",
      "More than $25 \\%$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_343": {
    "pid": "Math_343",
    "question": "Which of the \"buildings\" A-E, each consisting of 5 cubes, cannot be obtained from the building on the right, if you are allowed to move only one cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_344": {
    "pid": "Math_344",
    "question": "Which of the following is made using more than one piece of string?\n<image_1>",
    "options": [
      "I, III, IV and V",
      "III, IV and V",
      "I, III and V",
      "all",
      "None of these answers"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_345": {
    "pid": "Math_345",
    "question": "lines are drawn on a piece of paper and some of the lines are given numbers. The paper is cut along some of these lines and then folded as shown in the picture. Along which lines were the cuts made?\n<image_1>",
    "options": [
      "$1,3,5,7$",
      "$2,4,6,8$",
      "$2,3,5,6$",
      "$3,4,6,7$",
      "$1,4,5,8$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_347": {
    "pid": "Math_347",
    "question": "Lisa built a large cube out of 8 smaller ones. The small cubes have the same letter on each of their faces (A,B,C or D). Two cubes with a common face always have a different letter on them. Which letter is on the cube that cannot be seen in the picture?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "The picture is not possible."
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_348": {
    "pid": "Math_348",
    "question": "A regular octagon is folded three times down the middle as shown, until a triangle is formed. Then the rightmost corner is cut away. Which of the following shapes is formed when the paper is unfolded?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_351": {
    "pid": "Math_351",
    "question": "A white and a grey ring are interlinked with one another. Peter sees the two rings from the front as they are seen in the diagram on the right. Paul sees the rings from the back. What does he see?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_353": {
    "pid": "Math_353",
    "question": "Nina wants to make a cube from the paper net. You can see there are 7 squares Instead of 6. Which square(s) can she remove from the net, so that the other 6 squares remain connected and from the newly formed net a cube can be made?\n<image_1>",
    "options": [
      "only 4",
      "only 7",
      "only 3 or 4",
      "only 3 or 7",
      "only 3,4 or 7"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_354": {
    "pid": "Math_354",
    "question": "The given net is folded along the dotted lines to form an open box. The box is placed on the table so that the opening is on the top. Which side is facing the table?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_355": {
    "pid": "Math_355",
    "question": "A big cube is made up of 9 identical building blocks. Each building block looks like this: <image_1> Which\u00a0big\u00a0cube\u00a0is\u00a0possible?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_356": {
    "pid": "Math_356",
    "question": "The faces of a die are either white, grey or black. Opposite faces are always a different colour. Which of the following nets does not belong to such a die?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_357": {
    "pid": "Math_357",
    "question": "The sum of the dots on opposite sides of an ordinary die is 7. Which of the following dice could be an ordinary die?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_358": {
    "pid": "Math_358",
    "question": "Pia has a folding yardstick consisting of 10 equally long pieces. Which of the following figures can she not make?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_359": {
    "pid": "Math_359",
    "question": "Maxi builds towers made up of little $1 \\mathrm{~cm} \\times 1 \\mathrm{~cm} \\times 2 \\mathrm{~cm}$ building blocks as can be seen in the picture.\n<image_1>\nHe continues to build his towers in the same way. Finally he uses 28 building blocks for one tower. What is the height of this tower?",
    "options": [
      "$9 \\mathrm{~cm}$",
      "$10 \\mathrm{~cm}$",
      "$11 \\mathrm{~cm}$",
      "$12 \\mathrm{~cm}$",
      "$14 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_361": {
    "pid": "Math_361",
    "question": "Each of the nets of a cube has a line drawn on. For which net does the line form a closed loop when the net is folded up to make a cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_362": {
    "pid": "Math_362",
    "question": "The cardboard is folded up into a $2 \\times 1 \\times 1$ box. Which of the pictures does not show the box?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_363": {
    "pid": "Math_363",
    "question": "Maria has exactly 9 white cubes, 9 light gray cubes and 9 dark gray cubes, all the same size. She glues all these cubes together to form a larger cube. Which of the cubes below is the one she made?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_364": {
    "pid": "Math_364",
    "question": "Amelia glues these six stickers on the faces of a cube: <image_1>. The figure shows this cube in two different positions. Which adhesive is on the opposite side of the duck?",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_365": {
    "pid": "Math_365",
    "question": "Maria puts 4 liters of water in vase I, 3 liters of water in vase II and 4 liters of water in vase III, represented on the side. Seen from the front, these three vases seem to have the same size. Which of the following images can represent the three vases, when seen from above?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)",
      "(E)"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_367": {
    "pid": "Math_367",
    "question": "Which of the following solid shapes can be made with these 6 bricks?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_369": {
    "pid": "Math_369",
    "question": "A triangular pyramid is built with 10 identical balls, like this <image_1>. Each ball has one of the letters A, $B, C, D$ and $E$ on it. There are 2 balls marked with each letter. The picture shows 3 side views of the pyramid. What is the letter on the ball with the question mark?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_371": {
    "pid": "Math_371",
    "question": "Anna has glued together several cubes of the same size to form a solid (see picture). Which of the following pictures shows a different view of this solid?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_374": {
    "pid": "Math_374",
    "question": "Four ribbons $\\mathrm{M}, \\mathrm{N}, \\mathrm{P}$ and $\\mathrm{Q}$ are wrapped around a box. <image_1> In which order were they wrapped around the box?",
    "options": [
      "M, N, Q, P",
      "N, M, P, Q",
      "N, Q, M, P",
      "N, M, Q, P",
      "$Q, N, M, P$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_375": {
    "pid": "Math_375",
    "question": "A tower is made up of bricks that are labelled with the numbers from 1 to 50 from bottom to top. Bob uses these bricks to build a new tower. Each time he takes the two topmost bricks off the old tower and places them down on top of the new tower without changing their order (see diagram). Which two bricks lie on top of each other when he is finished with the re-arrangement? <image_1>",
    "options": [
      "29 and 28",
      "34 and 35",
      "29 and 26",
      "31 and 33",
      "27 and 30"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_376": {
    "pid": "Math_376",
    "question": "A rectangular parallelepiped was composed of 3 pieces, each consisting of 4 little cubes. Then one piece was removed (see picture). Which one?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_377": {
    "pid": "Math_377",
    "question": "The section of a cube by a plane generates a plane figure. I have plotted this section in the development of the cube (see the picture). Can you find out what figure it is?\n<image_1>",
    "options": [
      "An equilateral triangle",
      "A rectangle, but not a square",
      "A right triangle",
      "A square",
      "A hexagon"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_378": {
    "pid": "Math_378",
    "question": "Which of the following nets has a cube in the right picture?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_379": {
    "pid": "Math_379",
    "question": "The solid in the picture is created from two cubes. The small cube with edges $1 \\mathrm{~cm}$ long is placed on the top of a bigger cube with edges $3 \\mathrm{~cm}$ long. What is the surface area of this solid?\n<image_1>",
    "options": [
      "$56 \\mathrm{~cm}^{2}$",
      "$58 \\mathrm{~cm}^{2}$",
      "$59 \\mathrm{~cm}^{2}$",
      "$60 \\mathrm{~cm}^{2}$",
      "$64 \\mathrm{~cm}^{2}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_381": {
    "pid": "Math_381",
    "question": "Which of the following objects can be obtained by rotating in space the grey object?\n<image_1>",
    "options": [
      "W and Y",
      "X and Z",
      "Only Y",
      "None of these",
      "W, X ir Y"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_383": {
    "pid": "Math_383",
    "question": "Which of the following is made using more than one piece of string?\n<image_1>",
    "options": [
      "I, III, IV and V",
      "I, III and V",
      "III, IV and V",
      "all",
      "None of these answers"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_385": {
    "pid": "Math_385",
    "question": "A paperstrip is folded three times in the middle. It is then opened again and looked at from the side so that one can see all 7 folds from the side at the same time. Which of the following views is not a possible result?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_386": {
    "pid": "Math_386",
    "question": "The dark line halves the surface area of the dice shown on the right. Which drawing could represent the net of the die?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_387": {
    "pid": "Math_387",
    "question": "Werner folds a piece of paper as shown in the diagram. With a pair of scissors he makes two straight cuts into the paper. Then is unfolds it again. Which on the following shapes are not possible for the piece of paper to show afterwards?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_388": {
    "pid": "Math_388",
    "question": "A cuboid consists of three building blocks. Each building block has a different colour and is made up of 4 cubes. What does the white building block look like?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_389": {
    "pid": "Math_389",
    "question": "The diagram shows the 7 positions $1,2,3,4,5,6,7$ of the bottom side of a die which is rolled around its edge in this order. Which two of these positions were taken up by the same face of the die?\n<image_1>",
    "options": [
      "1 and 7",
      "1 and 6",
      "1 and 5",
      "2 and 7",
      "2 and 6"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_390": {
    "pid": "Math_390",
    "question": "The diagram shows the net of a cube whose faces are numbered. Sascha adds the numbers that are on opposite faces of the cube. Which three results does he get?\n<image_1>",
    "options": [
      "$4,6,11$",
      "$4,5,12$",
      "$5,6,10$",
      "$5,7,9$",
      "$5,8,8$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_391": {
    "pid": "Math_391",
    "question": "The diagram shows the net of a three-sided prism. Which line of the diagram forms an edge of the prism together with line UV when the net is folded up?\n<image_1>",
    "options": [
      "WV",
      "XW",
      "XY",
      "QR",
      "RS"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_393": {
    "pid": "Math_393",
    "question": "Anne has glued together some cubes and has obtained the solid shown on the right. She turns it around to check it out from different sides. Which view can she not obtain?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_394": {
    "pid": "Math_394",
    "question": "A $3 \\mathrm{~cm}$ wide strip of paper is dark on one side and light on the other. The folded strip of paper lies exactly within a rectangle with length $27 \\mathrm{~cm}$ and width $9 \\mathrm{~cm}$ (see diagram). How long is the strip of paper?\n<image_1>",
    "options": [
      "$36 \\mathrm{~cm}$",
      "$48 \\mathrm{~cm}$",
      "$54 \\mathrm{~cm}$",
      "$57 \\mathrm{~cm}$",
      "$81 \\mathrm{~cm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_398": {
    "pid": "Math_398",
    "question": "A cube of side length 3 consists of 15 black and 12 white unit cubes. In the diagram five of the six faces of the big cube can be seen. Which of the regions shown below is the 6th face of the big cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_400": {
    "pid": "Math_400",
    "question": "The diagram shows the net of a box consisting only of rectangles. How big is the volume of the box?\n<image_1>",
    "options": [
      "$43 \\mathrm{~cm}^{3}$",
      "$70 \\mathrm{~cm}^{3}$",
      "$80 \\mathrm{~cm}^{3}$",
      "$100 \\mathrm{~cm}^{3}$",
      "$1820 \\mathrm{~cm}^{3}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_401": {
    "pid": "Math_401",
    "question": "Three rings are connected to each other as shown. Which of the following pictures also shows three rings connected in the same way?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_405": {
    "pid": "Math_405",
    "question": "Amelia has a paper strip with five equal cells containing different drawings, according to the figure. She folds the strip in such a way that the cells overlap in five layers. Which of the sequences of layers, from top to bottom, is not possible to obtain?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_407": {
    "pid": "Math_407",
    "question": "A cube $3 \\times 3 \\times 3$ is made from $1 \\times 1 \\times 1$ white, grey and black cubes, as shown in the first diagram. The other two diagrams show the white part and the black part of the cube. Which of the following diagrams shows the grey part?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_408": {
    "pid": "Math_408",
    "question": "Sonja builds the cube shown, out of equally sized bricks. The shortest side of one brick is $4 \\mathrm{~cm}$ long. What dimensions in $\\mathrm{cm}$ does one brick have?\n<image_1>",
    "options": [
      "$4 \\times 6 \\times 12$",
      "$4 \\times 6 \\times 16$",
      "$4 \\times 8 \\times 12$",
      "$4 \\times 8 \\times 16$",
      "$4 \\times 12 \\times 16$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_411": {
    "pid": "Math_411",
    "question": "A rectangular parallelepiped was composed of 4 pieces, each consisting of 4 little cubes. Then one piece was removed (see picture) Which one?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_412": {
    "pid": "Math_412",
    "question": "In tank I, whose base has an area of $2 \\mathrm{dm}^{2}$ and whose height is $10 \\mathrm{~cm}$, the water is $5 \\mathrm{~cm}$ high. An empty tank II with a base of area $1 \\mathrm{dm}^{2}$ and a height of $7 \\mathrm{~cm}$ is placed in tank I. The water of tank I rises, of course, and spills over into tank II. What level does the water reach in tank II?\n<image_1>",
    "options": [
      "$1 \\mathrm{~cm}$",
      "$2 \\mathrm{~cm}$",
      "$3 \\mathrm{~cm}$",
      "$4 \\mathrm{~cm}$",
      "$5 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_414": {
    "pid": "Math_414",
    "question": "A 3-pyramid is a stack of the following 3 layers of balls. In the same way we have a 4-pyramid, a 5-pyramid, etc. All the outside balls of an 8-pyramid are removed. What kind of figure form the rest balls?\n<image_1>",
    "options": [
      "3-pyramid",
      "4-pyramid",
      "5-pyramid",
      "6-pyramid",
      "7-pyramid"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_416": {
    "pid": "Math_416",
    "question": "The \"Borromaic Rings\" have an extraordinary property. Although no two are interlocked, they are strongly connected within each other. If one ring is cut through, the other two fall apart. Which of the following diagrams shows the picture of \"Borromaic Rings\"?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_418": {
    "pid": "Math_418",
    "question": "The object pictured is made up of four equally sized cubes. Each cube has a surface area of $24 \\mathrm{~cm}^{2}$. What is the surface area of the object pictured?\n<image_1>",
    "options": [
      "$80 \\mathrm{~cm}^{2}$",
      "$64 \\mathrm{~cm}^{2}$",
      "$40 \\mathrm{~cm}^{2}$",
      "$32 \\mathrm{~cm}^{2}$",
      "$24 \\mathrm{~cm}^{2}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_424": {
    "pid": "Math_424",
    "question": "Jack wants to keep six tubes each of diameter $2 \\mathrm{~cm}$ together using a rubber band. He chooses between the two possible variations shown. How are the lengths of the rubber bands related to each other?\n<image_1>",
    "options": [
      "In the left picture the band is $\\pi \\mathrm{cm}$ shorter.",
      "In the left picture the band is $4 \\mathrm{~cm}$ shorter.",
      "In the right picture the band is $\\pi \\mathrm{cm}$ shorter.",
      "In the right picture the band is $4 \\mathrm{~cm}$ shorter.",
      "Both bands are equally long."
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_425": {
    "pid": "Math_425",
    "question": "In the diagram we see a cube and four marked angles. How big is the sum of those angles?\n<image_1>",
    "options": [
      "$315^{\\circ}$",
      "$330^{\\circ}$",
      "$345^{\\circ}$",
      "$360^{\\circ}$",
      "$375^{\\circ}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_426": {
    "pid": "Math_426",
    "question": "A creeping plant twists exactly 5 times around a post with circumference $15 \\mathrm{~cm}$ (as shown in the diagram) and thus reaches a height of $1 \\mathrm{~m}$. While the plant grows the height of the plant also grows with constant speed. How long is the creeping plant?\n<image_1>",
    "options": [
      "$0.75 \\mathrm{~m}$",
      "$1.0 \\mathrm{~m}$",
      "$1.25 \\mathrm{~m}$",
      "$1.5 \\mathrm{~m}$",
      "$1.75 \\mathrm{~m}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_428": {
    "pid": "Math_428",
    "question": "Seven little dice were removed from a $3 \\times 3 \\times 3$ die, as can be seen in the diagram. The remaining (completely symmetrical) figure is cut along a plane through the centre and perpendicular to one of the four space diagonals. What does the cross-section look like?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_430": {
    "pid": "Math_430",
    "question": "A hemispheric hole is carved into each face of a wooden cube with sides of length 2. All holes are equally sized, and their midpoints are in the centre of the faces of the cube. The holes are as big as possible so that each hemisphere touches each adjacent hemisphere in exactly one point. How big is the diameter of the holes?\n<image_1>",
    "options": [
      "1",
      "2",
      "$\\sqrt{2}$",
      "$\\frac{3}{2}$",
      "$\\sqrt{\\frac{3}{2}}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_431": {
    "pid": "Math_431",
    "question": "Leon has drawn a closed loop on the surface of a cuboid.\nWhich net cannot show his loop? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_432": {
    "pid": "Math_432",
    "question": "The net on the right can be cut out and folded to make a cube. Which face will then be opposite the face marked $\\mathbf{x}$ ? <image_1>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "E",
    "solution": "A moment's thought will reveal that the faces marked $a, b, c$ and $d$ will all be adjacent to the face marked $\\mathbf{x}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_433": {
    "pid": "Math_433",
    "question": "The diagram shows a net of a cube, with three dotted lines added. If you folded the net into a cube and then cut along the dotted lines you would have a hole in the cube. What would be the shape of the hole? <image_1>",
    "options": [
      "an equilateral triangle",
      "a rectangle, but not a square",
      "a right-angled triangle",
      "a square",
      "a hexagon"
    ],
    "answer": "A",
    "solution": "The three dotted lines are equal in length, so the hole has three equal sides. The diagram shows the assembled cube with the hole removed.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-023.jpg?height=286&width=257&top_left_y=1028&top_left_x=1571)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_434": {
    "pid": "Math_434",
    "question": "The diagram shows a cube with edges of length $12 \\mathrm{~cm}$. An ant crawls from the point $P$ to the point $Q$ along the route shown. What is the length of the ant's path? <image_1>",
    "options": [
      "$40 \\mathrm{~cm}$",
      "$48 \\mathrm{~cm}$",
      "$50 \\mathrm{~cm}$",
      "$60 \\mathrm{~cm}$",
      "more information is needed"
    ],
    "answer": "D",
    "solution": "On the bottom edge, wherever the ant turns upward, altogether she still travels the equivalent of five lengths of $12 \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_435": {
    "pid": "Math_435",
    "question": "The solid shown on the right is made from two cubes. The small cube with edges $1 \\mathrm{~cm}$ long sits on top of a bigger cube with edges $3 \\mathrm{~cm}$ long. What is the surface area of the whole solid? <image_1>",
    "options": [
      "$56 \\mathrm{~cm}^{2}$",
      "$58 \\mathrm{~cm}^{2}$",
      "$60 \\mathrm{~cm}^{2}$",
      "$62 \\mathrm{~cm}^{2}$",
      "$64 \\mathrm{~cm}^{2}$"
    ],
    "answer": "B",
    "solution": "The surface areas of the separate cubes are $6 \\mathrm{~cm}^{2}$ and $54 \\mathrm{~cm}^{2}$. When the smaller one sits on top of the larger, an area of $1 \\mathrm{~cm}^{2}$ is lost from each of the two cubes; thus the surface area of the whole solid is $6+54-2=58 \\mathrm{~cm}^{2}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_436": {
    "pid": "Math_436",
    "question": "Each object shown is made up of 7 cubes. Which of $\\mathrm{P}, \\mathrm{Q}, \\mathrm{R}$ and $\\mathrm{S}$ can be obtained by rotating $\\mathrm{T}$ ?\n<image_1>",
    "options": [
      "P and R",
      "Q and S",
      "only R",
      "none of them",
      "P, Q and R"
    ],
    "answer": "A",
    "solution": "Stand each object on a table with the central cube uppermost. Then the plan view, from directly above, of $P$, $\\mathrm{R}$ and $\\mathrm{T}$ is shown in the left diagram, and that of $\\mathrm{Q}$ and $\\mathrm{S}$ is on the right. In each case the central cube is shown shaded. Mathematicians and scientists say that they have different chirality, that is, they can be considered as left-right-handed versions of the same object.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-066.jpg?height=270&width=440&top_left_y=662&top_left_x=1395)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_438": {
    "pid": "Math_438",
    "question": "Which of the following knots consist of more than one loop of rope?\n<image_1>",
    "options": [
      "$P, R$ and $T$",
      "$R, S$ and $T$",
      "$P, R, S$ and $T$",
      "$$ all of $P, Q, R, S$ and $T$",
      "$$ none of $\\mathrm{A}, \\mathrm{B}, \\mathrm{C}$ or $\\mathrm{D}$"
    ],
    "answer": "A",
    "solution": "The diagrams below show that only $\\mathrm{P}, \\mathrm{R}$ and $\\mathrm{T}$ are made from more than one loop.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-097.jpg?height=330&width=1460&top_left_y=1005&top_left_x=400)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_440": {
    "pid": "Math_440",
    "question": "Werner folds a sheet of paper as shown in the diagram and makes two straight cuts with a pair of scissors. He then opens up the paper again. Which of the following shapes cannot be the result? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "The shapes given in options $\\mathrm{A}, \\mathrm{B}, \\mathrm{C}$ and $\\mathrm{E}$ can be obtained by cutting the paper as shown.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-146.jpg?height=175&width=163&top_left_y=1350&top_left_x=524)  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-146.jpg?height=175&width=160&top_left_y=1350&top_left_x=888)  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-146.jpg?height=175&width=144&top_left_y=1350&top_left_x=1251)  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-146.jpg?height=175&width=158&top_left_y=1350&top_left_x=1600)  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-146.jpg?height=175&width=157&top_left_y=1556&top_left_x=1532)  The only one unobtainable in two cuts is $\\mathrm{D}$, which requires four cuts as shown.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_441": {
    "pid": "Math_441",
    "question": "A cube is being rolled on a plane so it turns around its edges. Its bottom face passes through the positions $1,2,3,4,5,6$ and 7 in that order, as shown. Which of these two positions were occupied by the same face of the cube? <image_1>",
    "options": [
      "1 and 7",
      "1 and 6",
      "1 and 5",
      "2 and 7",
      "2 and 6"
    ],
    "answer": "B",
    "solution": "Imagine the grid is sticky so that when the cube rolls over it, each cell of the grid fastens to the face of the cube touching it. The result would be equivalent to taking the arrangement of cells as shown, cutting it out and folding it into a cube. The latter is possible (for example) with 5 on  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-147.jpg?height=214&width=362&top_left_y=1606&top_left_x=1418) the bottom, 6 at the back, 7 on the right, 4 on the left, 3 at the front, 2 on the top and 1 folding over the 6 at the back. Hence 1 and 6 are occupied by the same face of the cube.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_445": {
    "pid": "Math_445",
    "question": "A $3 \\times 3 \\times 3$ cube is built from 15 black cubes and 12 white cubes. Five faces of the larger cube are shown.\n<image_1>\nWhich of the following is the sixth face of the larger cube?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": "Note first that a small cube in the centre of a face of the large cube will only appear on one face while a cube appearing on the edge of a face of the large cube will appear on two faces and a cube appearing at a corner of the face of the large cube will appear on three faces. Hence, the total number of white faces on the edge of the large cube is an even number and the total number of white faces on the corners of the large cube is a multiple of 3 . The five faces shown contain 1 centre white face from 1 small white cube, 12 edge white faces and 5 corner white faces. Therefore, since the total number of white faces on the corners is a multiple of 3 , the missing face contains 1 or 4 white faces at its corners. None of the options contains 4 white corners so the missing face contains one white corner as in options A and E, making 6 in total. These 6 faces come from $6 \\div 3=2$ small white cubes. Both options $\\mathrm{A}$ and $\\mathrm{E}$ have two white faces on their edges, making 14 in total over the six faces from $14 \\div 2=7$ white cubes. Hence the number of white cubes whose positions we know is $1+7+2=10$. The large cube is made with 12 small white cubes so there are still two more to be placed. One can be at the centre of the large cube and the only place the remaining cube can be is at the centre of the missing face. Therefore, the missing face contains one centre white face, two edge white faces and one corner white face. Hence, the missing face is A. (This proof shows that the only possible missing face for such a cube is face A. It is left to the reader to check that the five given faces and face A can indeed be fitted together consistently to form the faces of a cube.)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_447": {
    "pid": "Math_447",
    "question": "The faces of a cube are painted black, white or grey. Each face is only painted one colour and opposite faces are painted the same colour. Which of the following is a possible net for the cube?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": "Each of the nets shown has two faces of each colour. The question tells us that the two faces are opposite each other, so they cannot have an edge in common. This eliminates all the nets except net $\\mathrm{B}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_453": {
    "pid": "Math_453",
    "question": "The diagram on the right shows a cube of side $18 \\mathrm{~cm}$. A giant ant walks across the cube's surface from $\\mathrm{X}$ to $\\mathrm{Y}$ along the route shown. How far does it walk? <image_1>",
    "options": [
      "$54 \\mathrm{~cm}$",
      "$72 \\mathrm{~cm}$",
      "$80 \\mathrm{~cm}$",
      "$88 \\mathrm{~cm}$",
      "$90 \\mathrm{~cm}$"
    ],
    "answer": "E",
    "solution": "From the diagram, the ant walks the equivalent of five edges. Therefore the ant walks $5 \\times 18 \\mathrm{~cm}=90 \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_455": {
    "pid": "Math_455",
    "question": "It takes 9 litres of paint to cover the surface of the cube on the left.\n<image_1>\nHow much paint would it take to cover the surface of the shape on the right?",
    "options": [
      "9 litres",
      "8 litres",
      "6 litres",
      "4 litres",
      "2 litres"
    ],
    "answer": "A",
    "solution": "The surface areas of the two solids are the same. Hence the same amount of paint is required to cover them. Therefore it would take 9 litres of paint to cover the surface of the second solid.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_456": {
    "pid": "Math_456",
    "question": "Which of the following nets can be used to build the partial cube shown in the diagram?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": "Nets A and D would produce cubes with holes on two edges of the same face. Net E would produce a cube with a hole in the centre of two opposite faces while net B would produce a cube with one hole on an edge and two small holes. The given partial cube has holes on two opposite edges and therefore its net will have a hole on the edge of four different faces.  Hence only net C can be used to build the required shape.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_457": {
    "pid": "Math_457",
    "question": "A piece of paper in the shape of a regular hexagon, as shown, is folded so that the three marked vertices meet at the centre $O$ of the hexagon. What is the shape of the figure that is formed? <image_1>",
    "options": [
      "Six-pointed star",
      "Dodecagon",
      "Hexagon",
      "Square",
      "Equilateral Triangle"
    ],
    "answer": "E",
    "solution": "Label vertices $A, B, C, D, E, E$ and $F$ as shown. Since the hexagon is regular, it can be divided into six equilateral triangles as shown. Therefore quadrilateral $O A B C$ is a rhombus and hence its diagonal $A C$ is a line of symmetry. Therefore, if vertex $B$ is folded onto $O$, the fold will be along $A C$. Similarly, if vertices $D$ and $F$ are folded onto $O$, the  ![](https://cdn.mathpix.com/cropped/2023_12_27_9b94075f4aebf6f0284ag-1.jpg?height=277&width=309&top_left_y=2077&top_left_x=1459) folds will be along $C E$ and $E A$ respectively. Hence the figure that is formed will be a triangle and, since all three of the rhombuses $O A B C, O C D E$ and $O E F A$ are made out of two congruent equilateral triangles, the lengths of their diagonals $A C, C E$ and $E A$ will be equal. Hence the shape $A C E$ that is formed is an equilateral triangle.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_458": {
    "pid": "Math_458",
    "question": "A cube has diagonals drawn on three adjacent faces as shown in the diagram. Which of the following nets could Usman use to make the cube shown?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "On each net, label the four vertices of the right-hand square 1,2,3 and 4 as shown. Also label any vertex on any of the other squares that will meet vertices 1,2,3 or 4 when the net of the cube is assembled into a cube with the corresponding value. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f598bb42a47f3275d94g-2.jpg?height=246&width=1530&top_left_y=536&top_left_x=407)  Since there are three vertices of the original cube at which two diagonals meet, to be a suitable net for the cube shown, any diagonal drawn meets another diagonal at a vertex with the same label. As can be seen, only in net $\\mathrm{D}$ are the ends of the diagonals at vertices with the same label. Therefore Usman could only use net $\\mathrm{D}$ to make the cube shown.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_460": {
    "pid": "Math_460",
    "question": "Claudette has eight dice, each with one of the letters $P, Q, R$ and $S$ written on all six faces. She builds the block shown in the diagram so that dice with faces which touch have different letters written on them.\nWhat letter is written on the faces of the one dice which is not shown on the picture? <image_1>",
    "options": [
      "P",
      "Q",
      "R",
      "S",
      "It is impossible to say"
    ],
    "answer": "B",
    "solution": "The dice above the hidden one has $\\mathrm{R}$ marked on it, while the dice on the bottom level that touch the hidden dice have $\\mathrm{P}$ and $\\mathrm{S}$ marked on them. Hence the missing dice can have none of these letters on it. Therefore the missing dice has $\\mathrm{Q}$ marked on its faces.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_461": {
    "pid": "Math_461",
    "question": "Christopher has made a building out of blocks. The grid on the right shows the number of blocks in each part of the building, when viewed from above. Which of the following gives the view you see when you look at Christopher's building from the front?\n\\begin{tabular}{|l|l|l|l|}\n\\hline 4 & 2 & 3 & 2 \\\\\n\\hline 3 & 3 & 1 & 2 \\\\\n\\hline 2 & 1 & 3 & 1 \\\\\n\\hline 1 & 2 & 1 & 2 \\\\\n\\hline \\multicolumn{4}{|c|}{ front }\n\\end{tabular}\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": "When you look at Christopher's building from the front, you will see towers of height 4, 3, 3 and 2 as these are the largest numbers of blocks indicated in each of the four columns of the grid. Hence the view that will be seen is E.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_464": {
    "pid": "Math_464",
    "question": "The cuboid shown has been built using four shapes, each made from four small cubes. Three of the shapes can be completely seen, but the dark one is only partly visible. Which of the following shapes could be the dark one? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": "There are three small cubes not visible in the diagram and all belonging to the dark shape. They form a straight line along the back of the base. We then need a shape which has three cubes in a straight line and an extra cube on the middle of those three cubes.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_465": {
    "pid": "Math_465",
    "question": "Sol is having fun playing with water in two tanks. Tank $X$ has a base of area of $200 \\mathrm{~cm}^{2}$.\nTank $Y$ has a base of area $100 \\mathrm{~cm}^{2}$ and height $7 \\mathrm{~cm}$. Sol has partly filled Tank X to a depth of $5 \\mathrm{~cm}$. He then places Tank Y, which is empty, on the bottom of Tank X. The water in Tank X rises, of course, and spills over into in Tank Y. What level does the water reach in Tank Y ? <image_1>",
    "options": [
      "$1 \\mathrm{~cm}$",
      "$2 \\mathrm{~cm}$",
      "$3 \\mathrm{~cm}$",
      "$4 \\mathrm{~cm}$",
      "$5 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": "The water has base of area $200 \\mathrm{~cm}^{2}$ and volume $1000 \\mathrm{~cm}^{3}$. The empty tank has base of area $100 \\mathrm{~cm}^{2}$ and volume $700 \\mathrm{~cm}^{3}$. The water displaced by putting the empty tank in Tank $X$ is then $700 \\mathrm{~cm}^{3}$. The water in the empty tank is $1000-700=300 \\mathrm{~cm}^{3}$ and as the base area is $100 \\mathrm{~cm}^{2}$ the water will have depth $3 \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_468": {
    "pid": "Math_468",
    "question": "A dog is tied to the outside corner of a house by a rope of length $10 \\mathrm{~m}$. The house is a rectangle with sides of length $6 \\mathrm{~m}$ and $4 \\mathrm{~m}$. What is the length (in metres) of the curved boundary of the area in which the dog can roam? <image_1>",
    "options": [
      "$20 \\pi$",
      "$22 \\pi$",
      "$40 \\pi$",
      "$88 \\pi$",
      "$100 \\pi$"
    ],
    "answer": "A",
    "solution": "The dog can trace out $\\frac{3}{4}$ of a circle with radius $10 \\mathrm{~m} ; \\frac{1}{4}$ of a circle with radius $6 \\mathrm{~m}$; and $\\frac{1}{4}$ of a circle with radius $4 \\mathrm{~m}$. The total perimeter is $\\frac{3}{4} \\times 2 \\pi \\times 10+\\frac{1}{4} \\times 2 \\pi \\times 6+\\frac{1}{4} \\times 2 \\pi \\times 4=20 \\pi$.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-074.jpg?height=257&width=254&top_left_y=197&top_left_x=1529)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_469": {
    "pid": "Math_469",
    "question": "One face of a cardboard cube is cut along its diagonals, as shown.\nWhich of the following are not nets for this cube?\n<image_1>",
    "options": [
      "1 and 3",
      "1 and 5",
      "2 and 4",
      "2 and 4",
      "3 and 5"
    ],
    "answer": "E",
    "solution": "In diagram 3 the triangles at the top and bottom will fold up in such a way as to overlap with one of the square faces as indicated. In diagram 5 the triangles at the bottom will fit together but the triangle at the top will overlap with one of the square faces. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-089.jpg?height=272&width=612&top_left_y=2296&top_left_x=1270)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_474": {
    "pid": "Math_474",
    "question": "A rectangular strip of paper is folded in half three times, with each fold line parallel to the short edges. It is then unfolded so that the seven folds up or down can all be seen. Which of the following strips, viewed from a long edge, could not be made in this way? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "Imagine refolding these strips once, as is shown in the diagram on the left. The peaks on one side of the fold must match with hollows on the other side (which they all do!). We obtain the half-size strips shown in the diagram on the right. Now imagine refolding these strips about their mid-points. We can see that, in D, there are troughs on both sides, so D is not possible; but all the others are possible. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-121.jpg?height=364&width=1382&top_left_y=900&top_left_x=428)",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_478": {
    "pid": "Math_478",
    "question": "The picture shows a cube with four marked angles, $\\angle W X Y$, $\\angle X Y Z, \\angle Y Z W$ and $\\angle Z W X$. What is the sum of these angles? <image_1>",
    "options": [
      "$315^{\\circ}$",
      "$330^{\\circ}$",
      "$345^{\\circ}$",
      "$360^{\\circ}$",
      "$375^{\\circ}$"
    ],
    "answer": "B",
    "solution": "The lengths of $W X, X Z$ and $Z W$ are all equal (each being the diagonal of a square face), hence triangle $W X Z$ is equilateral and angle $Z W X$ is $60^{\\circ}$.  The other angles are all $90^{\\circ}$, so the total of all four angles is $90^{\\circ}+90^{\\circ}+90^{\\circ}+60^{\\circ}=330^{\\circ}$.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-222.jpg?height=389&width=397&top_left_y=802&top_left_x=1343)  W",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_479": {
    "pid": "Math_479",
    "question": "Cuthbert is going to make a cube with each face divided into four squares. Each square must have one shape drawn on it; either a cross, a triangle or a circle. Squares that share an edge must have different shapes on them. One possible cube is shown in the diagram. Which of the following combinations of crosses and triangles is possible on such a cube (with the other shapes being circles)?\n<image_1>",
    "options": [
      "6 crosses, 8 triangles",
      "7 crosses, 8 triangles",
      "5 crosses, 8 triangles",
      "7 crosses, 7 triangles",
      "none of these are possible"
    ],
    "answer": "E",
    "solution": "Each vertex of the cube consists of three squares each sharing a common edge with the other two. Hence each vertex must have one of each shape drawn on its three squares. Since there are 8 vertices, there must be 8 of each shape. Hence none of the options listed is possible.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_480": {
    "pid": "Math_480",
    "question": "The cube shown has sides of length 2 units. Holes in the shape of a hemisphere are carved into each face of the cube. The six hemispheres are identical and their centres are at the centres of the faces of the cube. The holes are just large enough to touch the hole on each neighbouring face. What is the diameter of each hole? <image_1>",
    "options": [
      "1",
      "$\\sqrt{2}$",
      "$2-\\sqrt{2}$",
      "$3-\\sqrt{2}$",
      "$3-\\sqrt{3}$"
    ],
    "answer": "B",
    "solution": "Let $P$ and $Q$ be the centres of two adjacent hemispheres. The faces on which these hemispheres are carved meet at an edge. Let $M$ be the midpoint of that edge. Then $M P=M Q=1$. Also $M P Q$ is a right-angled triangle since the two faces are perpendicular. By Pythagoras, $M P^{2}+M Q^{2}=P Q^{2}$, so $P Q^{2}=1+1=2$. Hence $P Q=\\sqrt{2}$, and $P Q$ is equal to the sum of two radii, so is the same  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-366.jpg?height=319&width=420&top_left_y=820&top_left_x=1452) as the diameter of the hemispheres.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_481": {
    "pid": "Math_481",
    "question": "Lancelot has drawn a closed path on a cuboid and unfolded it into a net. Which of the nets shown could not be the net of Lancelot's cuboid? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": "The nets given can be folded into a solid in only one way. We can continue the path along the edges that would be joined. Connections shown by dashed lines show which pieces are glued together (i.e. belong to to the same path).  ![](https://cdn.mathpix.com/cropped/2023_12_27_6db5618fc6dc2044925bg-10.jpg?height=280&width=1800&top_left_y=2334&top_left_x=240)   Following the path one can see that only $\\mathrm{C}$ is not closed.",
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_492": {
    "pid": "Math_492",
    "question": "Which of the cones listed below can be formed from a $ 252^\\circ$ sector of a circle of radius $ 10$ by aligning the two straight sides?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_494": {
    "pid": "Math_494",
    "question": "Rolly wishes to secure his dog with an 8-foot rope to a square shed that is 16 feet on each side. His preliminary drawings are shown. Which of these arrangements gives the dog the greater area to roam, and by how many square feet?\n\n<image_1>",
    "options": [
      "$\\text{ I, by }8\\pi$",
      "$\\text{ I, by }6\\pi$",
      "$\\text{ II, by }4\\pi$",
      "$\\text{II, by }8\\pi$",
      "$\\text{ II, by }10\\pi$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_496": {
    "pid": "Math_496",
    "question": "A cube with side length $ 1$ is sliced by a plane that passes through two diagonally opposite vertices $ A$ and $ C$ and the midpoints $ B$ and $ D$ of two opposite edges not containing $ A$ and $ C$, ac shown. What is the area of quadrilateral $ ABCD$?\n<image_1>",
    "options": [
      "$\\frac{\\sqrt{6}}{2}$",
      "$\\frac{5}{4}$",
      "$\\sqrt{2}$",
      "$\\frac{3}{2}$",
      "$\\sqrt{3}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_497": {
    "pid": "Math_497",
    "question": "A round table has radius $ 4$. Six rectangular place mats are placed on the table. Each place mat has width $ 1$ and length $ x$ as shown. They are positioned so that each mat has two corners on the edge of the table, these two corners being end points of the same side of length $ x$. Further, the mats are positioned so that the inner corners each touch an inner corner of an adjacent mat. What is $ x$?\n<image_1>",
    "options": [
      "$2\\sqrt{5} - \\sqrt{3}$",
      "$3$",
      "$\\frac{3\\sqrt{7} - \\sqrt{3}}{2}$",
      "$2\\sqrt{3}$",
      "$\\frac{5 + 2\\sqrt{3}}{2}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_498": {
    "pid": "Math_498",
    "question": "A cubical cake with edge length $ 2$ inches is iced on the sides and the top. It is cut vertically into three pieces as shown in this top view, where $ M$ is the midpoint of a top edge. The piece whose top is triangle $ B$ contains $ c$ cubic inches of cake and $ s$ square inches of icing. What is $ c+s$?\n<image_1>",
    "options": [
      "$\\frac{24}{5}$",
      "$\\frac{32}{5}$",
      "$8+\\sqrt{5}$",
      "$5+\\frac{16\\sqrt{5}}{5}$",
      "$10+5\\sqrt{5}$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_499": {
    "pid": "Math_499",
    "question": "Four cubes with edge lengths $1$, $2$, $3$, and $4$ are stacked as shown. What is the length of the portion of $\\overline{XY}$ contained in the cube with edge length $3$?\n<image_1>",
    "options": [
      "$\\frac{3\\sqrt{33}}5$",
      "$2\\sqrt{3}$",
      "$\\frac{2\\sqrt{33}}3$",
      "$4$",
      "$3\\sqrt{2} $"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_500": {
    "pid": "Math_500",
    "question": "A rectangular piece of paper whose length is $\\sqrt{3}$ times the width has area $A$. The paper is divided into equal sections along the opposite lengths, and then a dotted line is drawn from the first divider to the second divider on the opposite side as shown. The paper is then folded flat along this dotted line to create a new shape with area $B$. What is the ratio $B:A$?\n\n<image_1>",
    "options": [
      "1:2",
      "3:5",
      "2:3",
      "3:4",
      "4:5"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_501": {
    "pid": "Math_501",
    "question": "A sphere is inscribed in a truncated right circular cone as shown. The volume of the truncated cone is twice that of the sphere. What is the ratio of the radius of the bottom base of the truncated cone to the radius of the top base of the truncated cone?\n\n\n<image_1>",
    "options": [
      "$\\frac{3}{2}$",
      "$\\frac{1+\\sqrt{5}}{2}$",
      "$\\sqrt{3}$",
      "$2$",
      "$\\frac{3+\\sqrt{5}}{2}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_502": {
    "pid": "Math_502",
    "question": "A closed box with a square base is to be wrapped with a square sheet of wrapping paper. The box is centered on the wrapping paper with the vertices of the base lying on the midlines of the square sheet of paper, as shown in the figure on the left. The four corners of the wrapping paper are to be folded up over the sides and brought together to meet at the center of the top of the box, point $A$ in the figure on the right. The box has base length $w$ and height $h$. What is the area of the sheet of wrapping paper?\n<image_1>",
    "options": [
      "$2(w+h)^2$",
      "$\\frac{(w+h)^2}2$",
      "$2w^2+4wh$",
      "$2w^2$",
      "$w^2h$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_504": {
    "pid": "Math_504",
    "question": "A bowl is formed by attaching four regular hexagons of side 1 to a square of side 1. The edges of adjacent hexagons coincide, as shown in the figure. What is the area of the octagon obtained by joining the top eight vertices of the four hexagons, situated on the rim of the bowl?\n\n<image_1>",
    "options": [
      "$6$",
      "$7$",
      "$5+2\\sqrt{2}$",
      "$8$",
      "$9$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_505": {
    "pid": "Math_505",
    "question": "The edges of a regular tetrahedron with vertices $A ,~ B,~ C$, and $D$ each have length one. Find the least possible distance between a pair of points $P$ and $Q$, where $P$ is on edge $AB$ and $Q$ is on edge $CD$.\n<image_1>",
    "options": [
      "$\\frac{1}{2}$",
      "$\\frac{3}{4}$",
      "$\\frac{\\sqrt{2}}{2}$",
      "$\\frac{\\sqrt{3}}{2}$",
      "$\\frac{\\sqrt{3}}{3}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_506": {
    "pid": "Math_506",
    "question": "In the adjoining figure of a rectangular solid, $\\angle DHG=45^\\circ$ and $\\angle FHB=60^\\circ$. Find the cosine of $\\angle BHD$.\n\n<image_1>",
    "options": [
      "$\\frac{\\sqrt{3}}{6}$",
      "$\\frac{\\sqrt{2}}{6}$",
      "$\\frac{\\sqrt{6}}{3}$",
      "$\\frac{\\sqrt{6}}{4}$",
      "$\\frac{\\sqrt{6}-\\sqrt{2}}{4}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_508": {
    "pid": "Math_508",
    "question": "The figure shown can be folded into the shape of a cube. In the resulting cube, which of the lettered faces is opposite the face marked $x$?\n\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_509": {
    "pid": "Math_509",
    "question": "In the figure, polygons $ A$, $ E$, and $ F$ are isosceles right triangles; $ B$, $ C$, and $ D$ are squares with sides of length $ 1$; and $ G$ is an equilateral triangle. The figure can be folded along its edges to form a polyhedron having the polygons as faces.\n<image_1>\nThe volume of this polyhedron is",
    "options": [
      "1/2",
      "2/3",
      "3/4",
      "5/6",
      "4/3"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_511": {
    "pid": "Math_511",
    "question": "A unit cube is cut twice to form three triangular prisms, two of which are congruent, as shown in Figure 1. The cube is then cut in the same manner along the dashed lines shown in Figure 2. This creates nine pieces. What is the volume of the piece that contains vertex $ W$?\n<image_1>",
    "options": [
      "$\\frac{1}{12}$",
      "$\\frac{1}{9}$",
      "$\\frac{1}{8}$",
      "$\\frac{1}{6}$",
      "$\\frac{1}{4}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_512": {
    "pid": "Math_512",
    "question": "There are 5 coins placed flat on a table according to the figure. What is the order of the coins from top to bottom?\n\n<image_1>",
    "options": [
      "$(C, A, E, D, B)$",
      "$(C, A, D, E, B)$",
      "$(C, D, E, A, B) \\ [1ex]$",
      "$(C, E, A, D, B)$",
      "$(C, E, D, A, B)$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_513": {
    "pid": "Math_513",
    "question": "A unit cube has vertices $P_1, P_2, P_3, P_4, P_1', P_2', P_3'$, and $P_4'$. Vertices $P_2, P_3$, and $P_4$ are adjacent to $P_1$, and for $1\\leq i\\leq 4$, vertices $P_i$ and $P_i'$ are opposite to each other. A regular octahedron has one vertex in each of the segments $P_1P_2, P_1P_3, P_1P_4, P_1'P_2', P_1'P_3'$, and $P_1'P_4'$. What is the octahedron's side length?\n<image_1>",
    "options": [
      "$\\frac{3\\sqrt{2}}{4}$",
      "$\\frac{7\\sqrt{6}}{16}$",
      "$\\frac{\\sqrt{5}}{2}$",
      "$\\frac{2\\sqrt{3}}{3}$",
      "$\\frac{\\sqrt{6}}{2}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_514": {
    "pid": "Math_514",
    "question": "<image_1>\n\nA piece of paper containing six joined squares labeled as shown in the diagram is folded along the edges of the squares to form a cube.  The label of the face opposite the face labeled $ \\text{X}$ is:",
    "options": [
      "$\\text{Z}$",
      "$\\text{U}$",
      "$\\text{V}$",
      "$\\text{W}$",
      "$\\text{Y}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_520": {
    "pid": "Math_520",
    "question": "All six sides of a rectangular solid were rectangles.  A one-foot cube was cut out of the rectangular solid as shown.  The total number of square feet in the surface of the new solid is how many more or less than that of the original solid?\n\n<image_1>",
    "options": [
      "$2\\text{ less}$",
      "$1\\text{ less}$",
      "$\\text{the same}$",
      "$1\\text{ more}$",
      "$2\\text{ more}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_521": {
    "pid": "Math_521",
    "question": "Which pattern of identical squares could NOT be folded along the lines shown to form a cube?\n\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_523": {
    "pid": "Math_523",
    "question": "Each corner cube is removed from this $3\\text{ cm}\\times 3\\text{ cm}\\times 3\\text{ cm}$ cube.  The surface area of the remaining figure is\n\n<image_1>",
    "options": [
      "$19\\text{ sq.cm}$",
      "$24\\text{ sq.cm}$",
      "$30\\text{ sq.cm}$",
      "$54\\text{ sq.cm}$",
      "$72\\text{ sq.cm}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_524": {
    "pid": "Math_524",
    "question": "Six squares are colored, front and back, (R = red, B = blue, O = orange, Y = yellow, G = green, and W = white). They are hinged together as shown, then folded to form a cube. The face opposite the white face is\n\n<image_1>",
    "options": [
      "$\\text{B}$",
      "$\\text{G}$",
      "$\\text{O}$",
      "$\\text{R}$",
      "$\\text{Y}$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_525": {
    "pid": "Math_525",
    "question": "Figure 1 is called a \"stack map.\" The numbers tell how many cubes are stacked in each position. Fig. 2 shows these cubes, and Fig. 3 shows the view of the stacked cubes as seen from the front.\n\nWhich of the following is the front view for the stack map in Fig. 4?\n<image_1>\n",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_529": {
    "pid": "Math_529",
    "question": "In the figure, the area of square WXYZ is $25 \\text{cm}^2$. The four smaller squares have sides 1 cm long, either parallel to or coinciding with the sides of the large square. In $\\Delta ABC$, $AB = AC$, and when $\\Delta ABC$ is folded over side BC, point A coincides with O, the center of square WXYZ. What is the area of $\\Delta ABC$, in square centimeters?\n\n<image_1>",
    "options": [
      "$\\frac{15}4$",
      "$\\frac{21}4$",
      "$\\frac{27}4$",
      "$\\frac{21}2$",
      "$\\frac{27}2$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_530": {
    "pid": "Math_530",
    "question": "Jerry cuts a wedge from a $6$-cm cylinder of bologna as shown by the dashed curve. Which answer choice is closest to the volume of his wedge in cubic centimeters?\n<image_1>",
    "options": [
      "48",
      "75",
      "151",
      "192",
      "603"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_531": {
    "pid": "Math_531",
    "question": "A one-cubic-foot cube is cut into four pieces by three cuts parallel to the top face of the cube. The first cub is $\\frac{1}{2}$ foot from the top face. The second cut is $\\frac{1}{3}$ foot below the first cut, and the third cut is $\\frac{1}{17}$ foot below the second cut. From the top to the bottom the pieces are labeled A, B, C, and D. The pieces are then glued together end to end as shown in the second diagram. What is the total surface area of this solid in square feet?\n<image_1>\n",
    "options": [
      "6$",
      "$7$",
      "$\\frac{419}{51}$",
      "$\\frac{158}{17}$",
      "$11$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_532": {
    "pid": "Math_532",
    "question": "The faces of a cube are painted in six different colors: red (R), white (W), green (G), brown (B), aqua (A), and purple (P). Three views of the cube are shown below. What is the color of the face opposite the aqua face?\n<image_1>",
    "options": [
      "$\\text{red}$",
      "$\\text{white}$",
      "$\\text{green}$",
      "$\\text{brown}$",
      "$\\text{purple}\n$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "3D Spatial Simulation",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_542": {
    "pid": "Math_542",
    "question": "A squirrel is following the paths of labyrinth and collecting food for winter. Which stuff it will not be able to take?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_543": {
    "pid": "Math_543",
    "question": "Theresa moves a pencil along the line. She starts at the arrow shown. In which order will she go past the shapes?\n<image_1>",
    "options": [
      "$\\Delta, \\square, \\bullet$",
      "$\\Delta, \\bullet, \\square$",
      "$\\bullet, \\Delta, \\square$",
      "$\\square, \\Delta, \\bullet$",
      "$\\square, \\bullet, \\Delta$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_544": {
    "pid": "Math_544",
    "question": "When the ant <image_1> walks from home <image2> along the arrows $\\rightarrow 3, \\uparrow 3, \\rightarrow 3, \\uparrow 1$, he gets to the ladybird <image3>.\nWhich animal does the ant <image_1> get to when he walks from home <image2> along the following arrows: $\\rightarrow 2, \\downarrow 2, \\rightarrow 3, \\uparrow 3, \\rightarrow 2, \\uparrow 2$?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_546": {
    "pid": "Math_546",
    "question": "Which point in the labyrinth can we get to, starting at point $O$?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_547": {
    "pid": "Math_547",
    "question": "Gerda walks along the road and writes down the letters she can see on her right hand side. Which word is formed while Gerda walks from point 1 to point 2?\n<image_1>",
    "options": [
      "KNAO",
      "KNGO",
      "KNR",
      "AGRO",
      "KAO"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_550": {
    "pid": "Math_550",
    "question": "In order to get to his bone, the dog has to follow the black line. In total he turns 3-times to the right and 2-times to the left.\nWhich path does he take?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_551": {
    "pid": "Math_551",
    "question": "The road from Anna's to Mary's house is $16 \\mathrm{~km}$ long. The road from Mary's to John's house is $20 \\mathrm{~km}$ long. The road from the crossing to Mary's house is $9 \\mathrm{~km}$ long. How long is the road from Anna's to John's house?\n<image_1>",
    "options": [
      "$7 \\mathrm{~km}$",
      "$9 \\mathrm{~km}$",
      "$11 \\mathrm{~km}$",
      "$16 \\mathrm{~km}$",
      "$18 \\mathrm{~km}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_552": {
    "pid": "Math_552",
    "question": "Marco's father took a picture of his son in front of the car shown beside. Which of the drawings below could represent this picture?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_555": {
    "pid": "Math_555",
    "question": "The picture shows the five houses of five friends and their school. The school is the largest building in the picture. To go to school, Doris and Ali walk past Leo's house. Eva walks past Chole's house. Which is Eva's house?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_556": {
    "pid": "Math_556",
    "question": "The kangaroo wants to visit the koala. On its way it is not allowed to jump through a square with water. Each arrow shows one jump on to a neighbouring field.\n<image_1>\nWhich path is the kangaroo allowed to take?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_558": {
    "pid": "Math_558",
    "question": "A (very small) ball is kicked off from point A on a square billiard table with side length $2 \\mathrm{~m}$. After moving along the shown path and touching the sides three times as indicated, the path ends in point $B$. How long is the path that the bal travels from A to B? (As indicated on the right: incident angle = emergent angle.)\n<image_1>",
    "options": [
      "7",
      "$2 \\sqrt{13}$",
      "8",
      "$4 \\sqrt{3}$",
      "$2 \\cdot(\\sqrt{2}+\\sqrt{3})$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_559": {
    "pid": "Math_559",
    "question": "Jan cannot draw very accurately but nevertheless he tried to produce a roadmap of his village. The relative position of the houses and the street crossings are all correct but three of the roads are actually straight and only Qurwik street is not. Who lives in Qurwik street?\n<image_1>",
    "options": [
      "Amy",
      "Ben",
      "Carol",
      "David",
      "It cannot be determined from the drawing."
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_560": {
    "pid": "Math_560",
    "question": "We consider a $5 \\times 5$ square that is split up into 25 fields. Initially all fields are white. In each move it is allowed to change the colour of three fields that are adjacent in a horizontal or vertical line (i.e. white fields turn black and black ones turn white). What is the smallest number of moves needed to obtain the chessboard colouring shown in the diagram?\n<image_1>",
    "options": [
      "less than 10",
      "10",
      "12",
      "more than 12",
      "This colouring cannot be obtained."
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_562": {
    "pid": "Math_562",
    "question": "On an idealised rectangular billiard table with side lengths $3 \\mathrm{~m}$ and $2 \\mathrm{m}$ a ball (point-shaped) is pushed away from point $M$ on the long side $A B$. It is reflected exactly once on each of the other sides as shown. at which distance from the vertex $A$ will the ball hit this side again if $B M=1.2 \\mathrm{~m}$ and $B N=$ $0.8 m$?\n<image_1>",
    "options": [
      "$2 \\mathrm{~m}$",
      "$1.5 \\mathrm{~m}$",
      "$1.2 \\mathrm{~m}$",
      "$2.8 \\mathrm{~m}$",
      "$1.8 \\mathrm{~m}$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_563": {
    "pid": "Math_563",
    "question": "Two plane mirrors $O P$ and $O Q$ are inclined at an acute angle (diagram is not to scale). A ray of light $X Y$ parallel to $O Q$ strikes mirror $O P$ at $Y$. The ray is reflected and hits mirror $O Q$, is reflected again and hits mirror $O P$ and is reflected for a third time and strikes mirror $O Q$ at right angles at $R$ as shown. If $O R=5 \\mathrm{~cm}$, what is the distance $d$ of the ray $X Y$ from the mirror $O Q$?\n<image_1>",
    "options": [
      "$4 \\mathrm{~cm}$",
      "$4.5 \\mathrm{~cm}$",
      "$5 \\mathrm{~cm}$",
      "$5.5 \\mathrm{~cm}$",
      "$6 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_564": {
    "pid": "Math_564",
    "question": "The diagram shows a spiral of consecutive numbers starting with 1. In which order will the numbers 625, 626 and 627 appear in the spiral? <image_1>",
    "options": [
      "$625 \\uparrow 626 \\uparrow 627$",
      "$625 \\uparrow 626 \\rightarrow$",
      "$625 \\rightarrow 626 \\rightarrow 627$",
      "$625 \\rightarrow 626 \\uparrow 627$",
      "$625 \\downarrow 626 \\downarrow 627$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_565": {
    "pid": "Math_565",
    "question": "A kangaroo enters a building. He only passes through triangular rooms. Where does he leave the building?\n<image_1>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_566": {
    "pid": "Math_566",
    "question": "Zita walks from left to right and puts the numbers into her basket. Which of the following numbers can be in her basket?\n<image_1>",
    "options": [
      "1, 2 and 4",
      "2, 3 and 4",
      "2, 3 and 5",
      "1, 5 and 6",
      "1, 2 and 5"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_568": {
    "pid": "Math_568",
    "question": "Peter rides his bike along a cycle path in a park. He starts at point $S$ and rides in the direction of the arrow. At the first crossing he turns right, then at the next left, and then again to the right and then again to left. Which crossing does he not reach?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_571": {
    "pid": "Math_571",
    "question": "The rooms in Kanga's house are numbered. Eva enters the house through the main entrance. Eva has to walk through the rooms in such a way that each room that she enters has a number higher than the previous one. Through which door does Eva leave the house?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_572": {
    "pid": "Math_572",
    "question": "Three people walked through the snow in their winter boots. In which order did they walk through the snow?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_574": {
    "pid": "Math_574",
    "question": "The bee wants to get to the flower. Each arrow indicates a move to one neighbouring square. Which path can the bee fly to get to the flower?\n<image_1>",
    "options": [
      "$\\downarrow \\rightarrow \\rightarrow \\downarrow \\downarrow \\downarrow$",
      "$\\downarrow \\downarrow \\rightarrow \\downarrow \\downarrow \\rightarrow$",
      "$\\rightarrow \\downarrow \\rightarrow \\downarrow \\rightarrow \\rightarrow$",
      "$\\rightarrow \\rightarrow \\downarrow \\downarrow \\downarrow \\downarrow$",
      "$\\rightarrow \\downarrow \\rightarrow \\downarrow \\downarrow \\rightarrow$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_575": {
    "pid": "Math_575",
    "question": "If a laser beam hits a mirror it changes its direction (see left diagram). Each mirror has mirrored sides on both sides. At which letter does the laser beam end?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_576": {
    "pid": "Math_576",
    "question": "Five cars are labelled with the numbers 1 to 5 . They drive in the direction of the arrow.\n<image_1>\nFirst the last car overtakes the two cars in front of it.\nThen the now second to last car overtakes the two in front of it.\nIn the end the car that is now in the middle overtakes the two in front of it.\nIn which order do the cars now drive?",
    "options": [
      "$1,2,3,4,5$",
      "$2,1,3,5,4$",
      "$2,1,5,3,4$",
      "$3,1,4,2,5$",
      "$4,1,2,5,3$"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_577": {
    "pid": "Math_577",
    "question": "A road leads away from each of the six houses (see diagram). A hexagon showing the roads in the middle is however, missing. Which hexagons fit in the middle so\n<image_1>that one can travel from $A$ to $B$ and to $E$, but not to $D$?",
    "options": [
      "1 and 2",
      "1 and 4",
      "1 and 5",
      "2 and 3",
      "4 and 5"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_578": {
    "pid": "Math_578",
    "question": "The diagram shows four cars 1, 2, 3 and 4. The arrows show where the cars move to in 5 seconds. Which cars will crash into each other?\n<image_1>",
    "options": [
      "1 and 2",
      "1 and 3",
      "1 and 4",
      "2 and 3",
      "3 and 4"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_581": {
    "pid": "Math_581",
    "question": "The robot starts walking over white cells of the table from the cell A2 in the direction of the arrow, as shown in the picture. It goes always forward. If it meets an obstacle (a black cell or the border of the table), it turns right. The robot stops in case, it cannot go forward after turning right (i.e., it stops in the cell where the obstacles appear in front of him and on the right). In which cell will it stop?\n<image_1>",
    "options": [
      "B2",
      "B1",
      "A1",
      "D1",
      "It never stops"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_582": {
    "pid": "Math_582",
    "question": "Suppose you make a trip over the squared board shown, and you visit every square exactly once. Where must you start, if you can move only horizontally or vertically, but not diagonally?\n<image_1>",
    "options": [
      "Only in the middle square",
      "Only at a corner square",
      "Only at an unshaded square",
      "Only at a shaded square",
      "At any square"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_586": {
    "pid": "Math_586",
    "question": "The kangaroos $A, B, C, D$ and $E$ sit in this order in a clockwise direction around a round table. After a bell sounds all but one kangaroo change seats with a neighbour. Afterwards they sit in the following order in a clockwise direction: A, E, B, D, C. Which kangaroo did not change places?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_590": {
    "pid": "Math_590",
    "question": "Four ladybirds each sit on a different cell of a $4 \\times 4$ grid. One is asleep and does not move. On a whistle the other three each move to an adjacent free cell. They can crawl up, down, to the right or to the left but are not allowed on any account to move back to the cell that they have just come from. Where could the ladybirds be after the fourth whistle?\nInitial position:\n<image_1>\nAfter the first whistle:\nAfter the second whistle:\nAfter the third whistle:",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_592": {
    "pid": "Math_592",
    "question": "The following figures show five paths, indicated by the thickest lines, between the $X$ and $Y$ points. Which of these paths is the longest?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_593": {
    "pid": "Math_593",
    "question": "The figure shows a map with some islands and how they are connected by bridges. A navigator wants to pass through each of the islands exactly once. He started at Cang Island and wants to finish at Uru Island. He has just arrived at the black island in the center of the map. In which direction must he go now to be able to complete his route?\n<image_1>",
    "options": [
      "North.",
      "East.",
      "South.",
      "West.",
      "There is more than one possible choice"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_595": {
    "pid": "Math_595",
    "question": "In the square you can see the digits from 1 to 9 <image_1>. A number is created by starting at the star, following the line and writing down the digits along the line while passing. For example, the line shown represents the number 42685 <image2>. Which of the following lines represents the largest number?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_596": {
    "pid": "Math_596",
    "question": "The 5 figures on the grid can only move in the directions indicated by the black arrows. Which figure can leave through gate G?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_597": {
    "pid": "Math_597",
    "question": "Rosa wants to start at the arrow, follow the line, and get out at the other arrow. Which piece is it NOT possible to put in the middle to obtain that?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_598": {
    "pid": "Math_598",
    "question": "In a railway line between the cities $X$ and $Y$, the trains can meet, traveling in opposite directions, only in one of its stretches, in which the line is double. The trains take 180 minutes to go from $X$ to $Y$ and 60 minutes to go from $Y$ to $X$, at constant speeds. On this line, a train can start from $X$ at the same instant that a train starts from $Y$, without them colliding during the trip. Which of the following figures represents the line?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_599": {
    "pid": "Math_599",
    "question": "The picture shows 3 gears with a black gear tooth on each. Which picture shows the correct position of the black teeth after the small gear has turned a full turn clockwise?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_600": {
    "pid": "Math_600",
    "question": "Eva paddles around five buoys with her boat (see diagram). Which of the buoys does she paddle around in an anti-clockwise direction?\n<image_1>",
    "options": [
      "1 and 4",
      "2, 3 and 5",
      "2 and 3",
      "1,4 and 5",
      "1 and 3"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_601": {
    "pid": "Math_601",
    "question": "The two-sided mirrors reflect the laser beams as shown in the\nsmall picture: <image_1> . At which letter does the laser beam leave the picture: <image2> ?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_603": {
    "pid": "Math_603",
    "question": "A terrace is covered with square tiles of different sizes. The smallest tile has a perimeter of $80 \\mathrm{~cm}$. A snake lay down along the edges of the tiles (see diagram). How long is the snake? <image_1>",
    "options": [
      "$380 \\mathrm{~cm}$",
      "$400 \\mathrm{~cm}$",
      "$420 \\mathrm{~cm}$",
      "$440 \\mathrm{~cm}$",
      "$1680 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_604": {
    "pid": "Math_604",
    "question": "A rabbit, a beaver and a kangaroo are having a competition. All three begin at the same time from the \"Start\" and hop in the same direction. The beaver always moves one position forwards with each jump. The rabbit always moves two positions forwards with one jump and the kangaroo always three positions. Whoever takes the least amount of jumps to land exactly in the position labelled \"Ziel\u201c is the winner. <image_1> Who wins the competition?",
    "options": [
      "Kangaroo and rabbit",
      "Rabbit",
      "Kangaroo",
      "Beaver",
      "Kangaroo and beaver"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "Math_605": {
    "pid": "Math_605",
    "question": "Monika wants to find a path through the labyrinth from 'Start' to 'Ziel'. She has to stick to the following rules: She is only allowed to move horizontally and vertically respectively. She has to enter every white circle exactly once but is not allowed to enter a black circle. In which direction does Monika have to move forwards when she reaches the circle marked with $x$ ? <image_1>",
    "options": [
      "$\\downarrow$",
      "$\\uparrow$",
      "$\\rightarrow$",
      "$\\leftarrow$",
      "there are several possibilities"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_606": {
    "pid": "Math_606",
    "question": "A particle moves through the first quadrant of the shown figure as follows. During the first minute it moves from the origin to $(1 ; 0)$. Thereafter it continues to follow the directions indicated in the figure, going back and forth between the positive part of the $x$ and $y$ axes, moving one unit of distance parallel to an axis in each minute. Which point will the particle reach after exactly 2 hours?\n<image_1>",
    "options": [
      "$(10 ; 0)$",
      "$(1 ; 11)$",
      "$(10 ; 11)$",
      "$(2 ; 10)$",
      "$(11 ; 11)$"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_610": {
    "pid": "Math_610",
    "question": "Each of the nine paths in a park are $100 \\mathrm{~m}$ long. Anna wants to walk from $A$ to $B$ without using the same path twice. How long the longest path she can choose?\n<image_1>",
    "options": [
      "$900 \\mathrm{~m}$",
      "$800 \\mathrm{~m}$",
      "$700 \\mathrm{~m}$",
      "$500 \\mathrm{~m}$",
      "$400 \\mathrm{~m}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_611": {
    "pid": "Math_611",
    "question": "When simon the squirrel comes down from his tree onto the floor, he never moves further than $5 \\mathrm{~m}$ away from the trunk of his tree. Furthermore, he stays at least $5 \\mathrm{~m}$ away from the dog kennel. Which picture shows most accurately the area in which Simon can be found?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_614": {
    "pid": "Math_614",
    "question": "Meike paddles around five buoys with her boat (see diagram). Which of the buoys does she paddle around in a clockwise direction?\n<image_1>",
    "options": [
      "2, 3 and 4",
      "1, 2 and 3",
      "1, 3 and 5",
      "2, 4 and 5",
      "2, 3 and 5"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_615": {
    "pid": "Math_615",
    "question": "There are 5 trees and 3 paths in a park as shown on the map. Another tree is planted so that there is an equal number of trees on both sides of each path. In\nwhich section of the park will the new tree be planted?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_616": {
    "pid": "Math_616",
    "question": "The diagram shows the starting position, the direction and the distance covered within 5 seconds by four bumper cars. Which two cars will first crash into each other? <image_1>",
    "options": [
      "A and B",
      "A and C",
      "A and D",
      "B and C",
      "C and D"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_618": {
    "pid": "Math_618",
    "question": "The area of the wooden square equals $a$. The area of each wooden circle equals $b$. Three circles are lined up as shown in the picture. If we tie together the three circles with a thread as short as possible, without moving them, what is the area inside the thread?\n<image_1>",
    "options": [
      "3b",
      "2a + b",
      "a + 2b",
      "3a",
      "a + b"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_619": {
    "pid": "Math_619",
    "question": "The diagram shows two tangential circles with radii in the ratio 1:2. The smaller circle rolls around the inside of the large circle. Which of the following is the path traced out by the point $P$ of the smaller circle?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_622": {
    "pid": "Math_622",
    "question": "The side lengths of each of the small squares in the diagram are 1. How long is the shortest path from \"Start\" to \"Ziel\", if you are only allowed to move along the sides and the diagonals of the squares?\n<image_1>",
    "options": [
      "$2 \\sqrt{5}$",
      "$\\sqrt{10}+\\sqrt{2}$",
      "$2+2 \\sqrt{2}$",
      "$4 \\sqrt{2}$",
      "6"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_626": {
    "pid": "Math_626",
    "question": "Gregor's computer is tracing out a path in the first quadrant as shown in the diagram. In the first second the computer draws the line from the origin to $(1,0)$ and after that it continues to follow the directions indicated in the diagram at a speed of 1 unit length per second.\nWhich point will the traced path reach after exactly 2 minutes? <image_1>",
    "options": [
      "$(10,0)$",
      "$(1,11)$",
      "$(10,11)$",
      "$(2,10)$",
      "$(11,11)$"
    ],
    "answer": "A",
    "solution": "The computer will draw its path over 2 minutes or 120 seconds. The number of unit lengths successively between the points $(1,0),(0,2),(3,0),(0,4),(5,0)$, and so on, increases by 2 each time. Starting at 1 and adding consecutive odd numbers leads to the sequence of square numbers, and so the path will reach $(n, 0)$, where $n$ is an odd number, after $n^{2}$ seconds. So after 121 seconds it would reach $(11,0)$ and after 2 minutes $(10,0)$. Alternatively, when the computer path reaches a grid point, shade grey the unit square immediately below and to the left of that point. For example, the diagram shows the area shaded grey when the path has reached $(2,0)$. Since each unit added to the path also adds one unit to the grey shaded area, the path length and the grey shaded area have the same numerical value. For convenience, shade black the unit square below and to the left of $(0,0)$. After 2 minutes, or 120 seconds, the path length is 120 , so the grey shaded area is 120 , and the total shaded area is 121 . But $121=11^{2}$, so that the total shaded area is a square of side 11 and the path has reached $(10,0)$. ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-038.jpg?height=385&width=412&top_left_y=2149&top_left_x=1413)",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_628": {
    "pid": "Math_628",
    "question": "The robot in the diagram has been programmed to move in a straight line and, if it meets a wall (shown by bold lines), to turn right by $90^{\\circ}$ and then to continue straight on. If it cannot go straight or turn right it will stop. What will happen to this robot? <image_1>",
    "options": [
      "It will stop at $\\mathrm{P} 2$.",
      "It will stop at P1.",
      "It will stop at $\\mathrm{T} 1$.",
      "It will stop at $S 1$.",
      "It will never stop."
    ],
    "answer": "E",
    "solution": "The robot eventually will go round and round the rectangle whose corners are at $\\mathrm{T} 4, \\mathrm{~T} 1, \\mathrm{~S} 1$ and $\\mathrm{S} 4$.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_629": {
    "pid": "Math_629",
    "question": "Each of the nine paths in a park is $100 \\mathrm{~m}$ long. Ann wants to go from $X$ to $Y$ without going along any path more than once. What is the length of the longest route she can choose? <image_1>",
    "options": [
      "$900 \\mathrm{~m}$",
      "$800 \\mathrm{~m}$",
      "$700 \\mathrm{~m}$",
      "$600 \\mathrm{~m}$",
      "$500 \\mathrm{~m}$"
    ],
    "answer": "C",
    "solution": "Altogether there are nine paths, making $900 \\mathrm{~m}$ of path in total. The route is to start at $\\mathrm{X}$ and not repeat any path. This means that only one of the paths from $\\mathrm{X}$ can be used in the route. [Otherwise the other path would be used to bring Ann back to $\\mathrm{X}$ and there would be no path remaining for her to leave $\\mathrm{X}$ again.] Similarly, Ann can only use one path into Y. Therefore, a maximum of seven paths could be used. It is easy to see that there are several routes which use seven paths (leaving out the two right-hand paths, for example). Hence the maximum length of the route is $7 \\times 100 \\mathrm{~m}=700 \\mathrm{~m}$.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_633": {
    "pid": "Math_633",
    "question": "There are five big trees and three paths in a park. It has been decided to plant a sixth tree so that there are the same number of trees on either side of each path. In which region of the park should the sixth tree be planted? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": "The path running from the top of the park to the bottom has two trees to the left of it and three trees to the right of it on the diagram. Hence the sixth tree should be planted to the left of this path. The path running from the top left of the park to the bottom right has two trees above it and three trees below it on the diagram. Hence the sixth tree should be planted above this path. When we combine these observations, we can see that the sixth tree should be planted in the region labelled B. Note: this would also mean that there were the same number of trees on either side of the third path.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_635": {
    "pid": "Math_635",
    "question": "The diagram shows a plan of a town with various bus stops. There are four bus routes in the town.\nRoute 1 goes $\\mathrm{C}-\\mathrm{D}-\\mathrm{E}-\\mathrm{F}-\\mathrm{G}-\\mathrm{H}-\\mathrm{C}$ and is $17 \\mathrm{~km}$ long.\nRoute 2 goes $\\mathrm{A}-\\mathrm{B}-\\mathrm{C}-\\mathrm{F}-\\mathrm{G}-\\mathrm{H}-\\mathrm{A}$ and is $12 \\mathrm{~km}$ long.\nRoute 3 goes $\\mathrm{A}-\\mathrm{B}-\\mathrm{C}-\\mathrm{D}-\\mathrm{E}-\\mathrm{F}-\\mathrm{G}-\\mathrm{H}-\\mathrm{A}$ and is $20 \\mathrm{~km}$ long.\nRoute 4 goes $\\mathrm{C}-\\mathrm{F}-\\mathrm{G}-\\mathrm{H}-\\mathrm{C}$.\n<image_1>\nHow long is route 4 ?",
    "options": [
      "$10 \\mathrm{~km}$",
      "$9 \\mathrm{~km}$",
      "$8 \\mathrm{~km}$",
      "$7 \\mathrm{~km}$",
      "$6 \\mathrm{~km}$"
    ],
    "answer": "B",
    "solution": "The roads covered in routes 1 and 2 combined are the same as the roads covered in routes 3 and 4 combined. Therefore the length of route 4 is $(17+12-20) \\mathrm{km}=9 \\mathrm{~km}$.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_636": {
    "pid": "Math_636",
    "question": "The diagram shows squares of three different sizes arranged into a rectangle. The length of each side of the smallest squares is $20 \\mathrm{~cm}$. Adam Ant walks along the path marked from $P$ to $Q$. How far does Adam walk? <image_1>",
    "options": [
      "$380 \\mathrm{~cm}$",
      "$400 \\mathrm{~cm}$",
      "$420 \\mathrm{~cm}$",
      "$440 \\mathrm{~cm}$",
      "$460 \\mathrm{~cm}$"
    ],
    "answer": "C",
    "solution": "From the diagram, it can be seen that the sides of the larger squares are $2 \\times 20 \\mathrm{~cm}=40 \\mathrm{~cm}$ and $3 \\times 20 \\mathrm{~cm}=60 \\mathrm{~cm}$. Therefore the distance Adam walks is $(5 \\times 20+5 \\times 40+2 \\times 60) \\mathrm{cm}=420 \\mathrm{~cm}$.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_637": {
    "pid": "Math_637",
    "question": "Andrew wants to write the letters of the word KANGAROO in the cells of a $2 \\times 4$ grid such that each cell contains exactly one letter. He can write the first letter in any cell he chooses but each subsequent letter can only be written in a cell with at least one common vertex with the cell in which the previous letter was written. Which of the following arrangements of letters could he not produce in this way?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "To produce the arrangement of diagram D, Andrew would first need to write the letters K, A, N and $\\mathrm{G}$ in the top four cells as shown. He would then need to write $\\mathrm{A}$ in a vacant cell next to the G. Therefore he could not write $\\mathrm{O}$ and $\\mathrm{O}$ in the third row. Hence arrangement D could not be produced in the way described.  (It is left as an exercise for readers to show that all the other arrangements can be produced in the way described.)",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_638": {
    "pid": "Math_638",
    "question": "During a rough sailing trip, Jacques tried to sketch a map of his village. He managed to draw the four streets, the seven places where they cross and the houses of his friends. The houses are marked on the correct streets, and the intersections are correct, however, in reality, Arrow Street, Nail Street and Ruler Street are all absolutely straight. The fourth street is Curvy Street. Who lives on Curvy Street?\n<image_1>",
    "options": [
      "Adeline",
      "Benjamin",
      "Carole",
      "David",
      "It is impossible to tell without a better map"
    ],
    "answer": "A",
    "solution": "A pair of straight lines intersects at most once, but Adeline's and Carole's roads intersect twice so one of them must be Curvy Street; similarly Adeline's and Benjamin's roads intersect twice so one of them must also be Curvy Street. Therefore Adeline lives on Curvy Street.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_640": {
    "pid": "Math_640",
    "question": "In the grid, each small square has side of length 1 . What is the minimum distance from 'Start' to 'Finish' travelling only on edges or diagonals of the squares? <image_1>",
    "options": [
      "$2 \\sqrt{2}$",
      "$\\sqrt{10}+\\sqrt{2}$",
      "$2+2 \\sqrt{2}$",
      "$4 \\sqrt{2}$",
      "$6$"
    ],
    "answer": "C",
    "solution": "The shortest routes consist of two diagonals (right and down) each of length $\\sqrt{2}$, and two sides of length 1 , giving a total length $2+2 \\sqrt{2}$.",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_641": {
    "pid": "Math_641",
    "question": "A network consists of 16 vertices and 24 edges that connect them, as shown. An ant begins at the vertex labelled Start. Every minute, it walks from one vertex to a neighbouring vertex, crawling along a connecting edge. At which of the vertices labelled $P, Q, R, S, T$ can the ant be after 2019 minutes? <image_1>",
    "options": [
      "only $P, R$ or $S$,",
      "not $Q$",
      "only $Q$",
      "only $T$",
      "all of the vertices are possible"
    ],
    "answer": "C",
    "solution": "Labelling vertices alternately $0 / 1$ leads to the labelling shown. After an odd number of steps, the ant is always on a vertex labelled 1 . The only such vertex labelled with a letter is $Q$.  ![](https://cdn.mathpix.com/cropped/2023_12_27_0f4ed2787981bb911326g-268.jpg?height=437&width=394&top_left_y=1141&top_left_x=1576)",
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_648": {
    "pid": "Math_648",
    "question": "The diagram below shows the circular face of a clock with radius $20$ cm and a circular disk with radius $10$ cm externally tangent to the clock face at $12$ o'clock. The disk has an arrow painted on it, initially pointing in the upward vertical direction. Let the disk roll clockwise around the clock face. At what point on the clock face will the disk be tangent when the arrow is next pointing in the upward vertical direction?\n\n<image_1>",
    "options": [
      "$\\text{2 o'clock}$",
      "$\\text{3 o'clock}$",
      "$\\text{4 o'clock}$",
      "$\\text{6 o'clock}$",
      "$\\text{8 o'clock}$"
    ],
    "answer": "C",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_649": {
    "pid": "Math_649",
    "question": "The adjacent map is part of a city: the small rectangles are rocks, and the paths in between are streets. Each morning, a student walks from intersection A to intersection B, always walking along streets shown, and always going east or south. For variety, at each intersection where he has a choice, he chooses with probability $\\frac{1}{2}$ whether to go east or south. Find the probability that through any given morning, he goes through $C$.\n\n<image_1>",
    "options": [
      "$\\frac{11}{32}$",
      "$\\frac{1}{2}$",
      "$\\frac{4}{7}$",
      "$\\frac{21}{32}$",
      "$\\frac{3}{4}$"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_650": {
    "pid": "Math_650",
    "question": "A particle moves through the first quadrant as follows. During the first minute it moves from the origin to $(1,0)$. Thereafter, it continues to follow the directions indicated in the figure, going back and forth between the positive $x$ and $y$ axes, moving one unit of distance parallel to an axis in each minute. At which point will the particle be after exactly $1989$ minutes?\n<image_1>",
    "options": [
      "(35,44)",
      "(36,45)",
      "(37,45)",
      "(44,35)",
      "(45,36)"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_651": {
    "pid": "Math_651",
    "question": "\ufeffA lampshade is made in the form of the lateral surface of the frustum of a right circular cone. The height of the frustum is $3\\sqrt{3}$ inches, its top diameter is 6 inches, and its bottom diameter is 12 inches. A bug is at the bottom of the lampshade and there is a glob of honey on the top edge of the lampshade at the spot farthest from the bug. The bug wants to crawl to the honey, but it must stay on the surface of the lampshade. What is the length in inches of its shortest path to the honey?\n\n<image_1>",
    "options": [
      "$6 + 3\\pi$",
      "$6 + 6\\pi$",
      "$6\\sqrt{3}$",
      "$6\\sqrt{5}$",
      "$6\\sqrt{3} + \\pi$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_653": {
    "pid": "Math_653",
    "question": "Jane can walk any distance in half the time it takes Hector to walk the same distance.  They set off in opposite directions around the outside of the 18-block area as shown.  When they meet for the first time, they will be closest to\n\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_654": {
    "pid": "Math_654",
    "question": "In the pattern below, the cat (denoted as a large circle in the figures below) moves clockwise through the four squares  and the mouse (denoted as a dot in the figures below) moves counterclockwise through the eight exterior segments of the four squares.\n<image_1>\n\nIf the pattern is continued, where would the cat and mouse be after the 247th move?",
    "options": [
      "<image2>",
      "<image3>",
      "<image4>",
      "<image5>",
      "<image6>"
    ],
    "answer": "A",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_655": {
    "pid": "Math_655",
    "question": "A ship travels from point A to point B along a semicircular path, centered at Island X. Then it travels along a straight path from B to C. Which of these graphs best shows the ship's distance from Island X as it moves along its course?\n\n<image_1>",
    "options": [
      "<image2>",
      "<image3>",
      "<image4>",
      "<image5>",
      "<image6>"
    ],
    "answer": "B",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_656": {
    "pid": "Math_656",
    "question": "Tess runs counterclockwise around rectangular block JKLM. She lives at corner J. Which graph could represent her straight-line distance from home?\n\n<image_1>",
    "options": [
      "<image2>",
      "<image3>",
      "<image4>",
      "<image5>",
      "<image6>"
    ],
    "answer": "D",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_657": {
    "pid": "Math_657",
    "question": "Two circles that share the same center have radii $10$ meters and $20$ meters. An aardvark runs along the path shown, starting at $A$ and ending at $K$. How many meters does the aardvark run?\n<image_1>",
    "options": [
      "$10\\pi+20$",
      "$10\\pi+30$",
      "$10\\pi+40$",
      "$20\\pi+20$",
      "$20\\pi+40$"
    ],
    "answer": "E",
    "solution": null,
    "subject": "Math",
    "task": "",
    "category": "Path Tracing",
    "source": "MathVision",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_670": {
    "pid": "Math_670",
    "question": "<image_1>\nIs the number of tiny gray bicycles that are on the left side of the brown metal sedan greater than the number of things that are to the left of the tiny green bicycle?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_672": {
    "pid": "Math_672",
    "question": "<image_1>\nAre there fewer metallic fighters than rubber objects?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_673": {
    "pid": "Math_673",
    "question": "<image_1>\nIs the number of tiny objects that are behind the small metal jet less than the number of tiny things left of the tiny sedan?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_674": {
    "pid": "Math_674",
    "question": "<image_1>\nAre there more big red rubber double buss in front of the large red double bus than big green things?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_677": {
    "pid": "Math_677",
    "question": "<image_1>\nIs the number of gray rubber objects in front of the small yellow aeroplane greater than the number of big cyan matte fighters?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_682": {
    "pid": "Math_682",
    "question": "<image_1>\nIs the number of shiny buss less than the number of matte things?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_684": {
    "pid": "Math_684",
    "question": "<image_1>\nIs the number of brown suvs less than the number of brown rubber school buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_688": {
    "pid": "Math_688",
    "question": "<image_1>\nIs the number of big cyan airliners less than the number of gray shiny utility bikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_689": {
    "pid": "Math_689",
    "question": "<image_1>\nAre there fewer yellow regular buss than small yellow metallic school buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_691": {
    "pid": "Math_691",
    "question": "<image_1>\nIs the number of buss that are in front of the big yellow aeroplane less than the number of matte bicycles that are on the right side of the tiny thing?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_693": {
    "pid": "Math_693",
    "question": "<image_1>\nIs the number of small rubber buss behind the big green road bike less than the number of suvs that are behind the large brown matte truck?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_694": {
    "pid": "Math_694",
    "question": "<image_1>\nAre there fewer tiny cyan suvs that are behind the aeroplane than cyan utility bikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_695": {
    "pid": "Math_695",
    "question": "<image_1>\nIs the number of brown tandem bikes that are to the left of the small blue matte car greater than the number of tiny blue biplanes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_701": {
    "pid": "Math_701",
    "question": "<image_1>\nIs the number of green matte choppers greater than the number of large yellow shiny motorbikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_704": {
    "pid": "Math_704",
    "question": "<image_1>\nIs the number of big objects that are in front of the metal fighter less than the number of things that are behind the big metallic bus?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_706": {
    "pid": "Math_706",
    "question": "<image_1>\nIs the number of green buss greater than the number of blue school buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_708": {
    "pid": "Math_708",
    "question": "<image_1>\nAre there fewer yellow metal tandem bikes in front of the small yellow metallic bicycle than metal bicycles on the left side of the large brown jet?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_711": {
    "pid": "Math_711",
    "question": "<image_1>\nIs the number of metal cars that are left of the tiny matte school bus greater than the number of tiny cyan double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_712": {
    "pid": "Math_712",
    "question": "<image_1>\nIs the number of green metallic double buss less than the number of big purple rubber cruisers?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_713": {
    "pid": "Math_713",
    "question": "<image_1>\nAre there fewer purple rubber objects that are to the left of the red object than tiny matte bicycles?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_714": {
    "pid": "Math_714",
    "question": "<image_1>\nAre there fewer big motorbikes than rubber choppers?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_718": {
    "pid": "Math_718",
    "question": "<image_1>\nIs the number of yellow matte school buss greater than the number of big yellow metal cars?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_721": {
    "pid": "Math_721",
    "question": "<image_1>\nAre there more tiny cyan matte articulated buss left of the big school bus than small yellow matte double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_722": {
    "pid": "Math_722",
    "question": "<image_1>\nAre there fewer jets that are left of the small brown suv than objects right of the big shiny car?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_723": {
    "pid": "Math_723",
    "question": "<image_1>\nIs the number of small yellow metallic choppers that are behind the large cyan thing less than the number of brown metal double buss that are behind the small yellow shiny thing?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_726": {
    "pid": "Math_726",
    "question": "<image_1>\nIs the number of tiny blue metal bicycles behind the small sedan less than the number of purple fighters?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_727": {
    "pid": "Math_727",
    "question": "<image_1>\nAre there fewer big cars behind the small brown shiny mountain bike than tiny objects on the right side of the bus?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_729": {
    "pid": "Math_729",
    "question": "<image_1>\nAre there fewer green things in front of the blue metallic car than choppers right of the chopper?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_731": {
    "pid": "Math_731",
    "question": "<image_1>\nAre there fewer tandem bikes that are behind the brown metal bicycle than matte trucks on the left side of the green object?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_732": {
    "pid": "Math_732",
    "question": "<image_1>\nIs the number of big shiny cars in front of the red airliner greater than the number of big purple road bikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_733": {
    "pid": "Math_733",
    "question": "<image_1>\nAre there fewer gray trucks that are in front of the large aeroplane than big yellow metal objects in front of the purple object?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_735": {
    "pid": "Math_735",
    "question": "<image_1>\nIs the number of red rubber bicycles less than the number of cyan metal school buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_736": {
    "pid": "Math_736",
    "question": "<image_1>\nAre there fewer small purple matte cars than brown matte things?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_737": {
    "pid": "Math_737",
    "question": "<image_1>\nAre there fewer cyan jets than big buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_738": {
    "pid": "Math_738",
    "question": "<image_1>\nAre there fewer large red metallic things that are on the left side of the cyan shiny scooter than things that are in front of the small jet?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_739": {
    "pid": "Math_739",
    "question": "<image_1>\nIs the number of gray rubber double buss right of the small red aeroplane the same as the number of small objects that are left of the tiny gray matte bicycle?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_748": {
    "pid": "Math_748",
    "question": "<image_1>\nIs the number of blue matte school buss greater than the number of large cyan metallic jets?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_750": {
    "pid": "Math_750",
    "question": "<image_1>\nAre there fewer yellow metallic motorbikes that are in front of the small brown metal dirtbike than big yellow dirtbikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_751": {
    "pid": "Math_751",
    "question": "<image_1>\nAre there fewer small fighters than yellow matte tandem bikes?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_753": {
    "pid": "Math_753",
    "question": "<image_1>\nIs the number of large green cars less than the number of brown rubber double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_754": {
    "pid": "Math_754",
    "question": "<image_1>\nIs the number of dirtbikes right of the large blue object less than the number of small green metallic cars in front of the tiny matte bicycle?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_755": {
    "pid": "Math_755",
    "question": "<image_1>\nIs the number of large brown rubber motorbikes in front of the big motorbike greater than the number of big green sedans?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_756": {
    "pid": "Math_756",
    "question": "<image_1>\nAre there fewer double buss that are behind the aeroplane than things on the left side of the yellow double bus?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_757": {
    "pid": "Math_757",
    "question": "<image_1>\nIs the number of big cyan things in front of the cyan rubber suv less than the number of big suvs that are behind the red bus?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_758": {
    "pid": "Math_758",
    "question": "<image_1>\nIs the number of tiny purple trucks behind the small matte motorbike less than the number of fighters that are behind the big metal utility bike?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_759": {
    "pid": "Math_759",
    "question": "<image_1>\nIs the number of yellow tandem bikes less than the number of big objects?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_761": {
    "pid": "Math_761",
    "question": "<image_1>\nAre there fewer tiny red trucks than small blue bicycles?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_762": {
    "pid": "Math_762",
    "question": "<image_1>\nIs the number of small yellow shiny motorbikes greater than the number of red rubber fighters?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_763": {
    "pid": "Math_763",
    "question": "<image_1>\nAre there fewer large matte utility bikes than small yellow bicycles?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_766": {
    "pid": "Math_766",
    "question": "<image_1>\nIs the number of metallic road bikes that are behind the large bus less than the number of small matte double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_767": {
    "pid": "Math_767",
    "question": "<image_1>\nAre there fewer tiny red motorbikes than big red choppers?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_768": {
    "pid": "Math_768",
    "question": "<image_1>\nIs the number of cars in front of the tiny metal thing less than the number of large matte things in front of the cyan rubber road bike?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_771": {
    "pid": "Math_771",
    "question": "<image_1>\nAre there more tiny motorbikes in front of the small cyan tandem bike than big cyan metal double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_775": {
    "pid": "Math_775",
    "question": "<image_1>\nIs the number of rubber cars less than the number of brown jets?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_777": {
    "pid": "Math_777",
    "question": "<image_1>\nIs the number of large red cars behind the metal car less than the number of blue matte tandem bikes that are behind the big blue rubber utility bike?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "Math_782": {
    "pid": "Math_782",
    "question": "<image_1>\nIs the number of big brown buss behind the gray matte aeroplane greater than the number of yellow shiny scooters?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_784": {
    "pid": "Math_784",
    "question": "<image_1>\nIs the number of yellow shiny utility bikes greater than the number of brown metallic cruisers?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_785": {
    "pid": "Math_785",
    "question": "<image_1>\nAre there the same number of big blue trucks and large purple metal double buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_787": {
    "pid": "Math_787",
    "question": "<image_1>\nIs the number of metal biplanes behind the purple shiny object less than the number of purple school buss behind the big red object?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_788": {
    "pid": "Math_788",
    "question": "<image_1>\nIs the number of gray cars less than the number of small metallic minivans?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_789": {
    "pid": "Math_789",
    "question": "<image_1>\nIs the number of purple metallic things that are behind the small green motorbike less than the number of blue metal articulated buss?",
    "options": [
      "Yes",
      "No"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Multi-hop Visual Object Counting",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_793": {
    "pid": "Math_793",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_794": {
    "pid": "Math_794",
    "question": "<image_1>\nChoose the answer for the missing picture.",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_795": {
    "pid": "Math_795",
    "question": "<image_1>\nComplete the matrix.",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_798": {
    "pid": "Math_798",
    "question": "<image_1>\nThe diagram represents successive rotations, starting from the top down. Which shape comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_800": {
    "pid": "Math_800",
    "question": "<image_1>\nWhich Shape is missing?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_801": {
    "pid": "Math_801",
    "question": "<image_1>\nWhich option is correct?",
    "options": [
      "A",
      "B",
      "C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_802": {
    "pid": "Math_802",
    "question": "<image_1>\nCalculate the missing value.",
    "options": [
      "1",
      "2",
      "3",
      "4"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_803": {
    "pid": "Math_803",
    "question": "<image_1>\nWhich cube is identical to the unfolded net?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_804": {
    "pid": "Math_804",
    "question": "<image_1>\nWhich of the cubes is the same as the unfolded cube?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_805": {
    "pid": "Math_805",
    "question": "<image_1>\nChoose the answer for the missing picture.",
    "options": [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_807": {
    "pid": "Math_807",
    "question": "<image_1>\nWhich of the cubes is not identical to the unfolded net?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_808": {
    "pid": "Math_808",
    "question": "<image_1>\nDo you see the figures inside these boxes? They form a pattern. Choose the figure in the answer row below that continues the pattern.",
    "options": [
      "1",
      "2",
      "3",
      "4",
      "5"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_809": {
    "pid": "Math_809",
    "question": "<image_1>\nChoose the answer.",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_810": {
    "pid": "Math_810",
    "question": "<image_1>\nWhat is the missing number in the picture?",
    "options": [
      "6",
      "8",
      "10",
      "11"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_811": {
    "pid": "Math_811",
    "question": "<image_1>\nFind the top view.",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_813": {
    "pid": "Math_813",
    "question": "<image_1>\nWhich two puzzle pieces form the larger square?",
    "options": [
      "1 & 2",
      "1 & 3",
      "1 & 4",
      "2 & 3",
      "2 & 4"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_814": {
    "pid": "Math_814",
    "question": "<image_1>\nFind the image of the dot (8,-2) under a clockwise rotation by 270\u00b0 about the origin.\"",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_816": {
    "pid": "Math_816",
    "question": "<image_1>\nCan you find the missing shape in this picture puzzle?",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_819": {
    "pid": "Math_819",
    "question": "<image_1>\nWhat is the missing pattern in the picture?",
    "options": [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_820": {
    "pid": "Math_820",
    "question": "<image_1>\nChoose the answer for the missing picture.",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_821": {
    "pid": "Math_821",
    "question": "<image_1>\nWhich matchstick needs to be moved in order to create a square?",
    "options": [
      "Top",
      "Bottom",
      "Left",
      "Right",
      "Not possible"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_823": {
    "pid": "Math_823",
    "question": "<image_1>\nDetermine the next shape.",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_828": {
    "pid": "Math_828",
    "question": "<image_1>\nChoose the missing letters from below to form a word, using all letters presented",
    "options": [
      "A, R, N",
      "R, D, N",
      "I, A, M",
      "H, O, W"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "MathVista",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_829": {
    "pid": "Math_829",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_830": {
    "pid": "Math_830",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_831": {
    "pid": "Math_831",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_832": {
    "pid": "Math_832",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_833": {
    "pid": "Math_833",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "H",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_834": {
    "pid": "Math_834",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_835": {
    "pid": "Math_835",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_836": {
    "pid": "Math_836",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_837": {
    "pid": "Math_837",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_838": {
    "pid": "Math_838",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_839": {
    "pid": "Math_839",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_840": {
    "pid": "Math_840",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_841": {
    "pid": "Math_841",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_842": {
    "pid": "Math_842",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_843": {
    "pid": "Math_843",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "H",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_844": {
    "pid": "Math_844",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_845": {
    "pid": "Math_845",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_846": {
    "pid": "Math_846",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "H",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_847": {
    "pid": "Math_847",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_848": {
    "pid": "Math_848",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_849": {
    "pid": "Math_849",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_850": {
    "pid": "Math_850",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_851": {
    "pid": "Math_851",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "Math_852": {
    "pid": "Math_852",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_853": {
    "pid": "Math_853",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_854": {
    "pid": "Math_854",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_855": {
    "pid": "Math_855",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "G",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_856": {
    "pid": "Math_856",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_857": {
    "pid": "Math_857",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_858": {
    "pid": "Math_858",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_859": {
    "pid": "Math_859",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_860": {
    "pid": "Math_860",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_861": {
    "pid": "Math_861",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_862": {
    "pid": "Math_862",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_863": {
    "pid": "Math_863",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_864": {
    "pid": "Math_864",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_865": {
    "pid": "Math_865",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_866": {
    "pid": "Math_866",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_867": {
    "pid": "Math_867",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "Math_868": {
    "pid": "Math_868",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "Math_869": {
    "pid": "Math_869",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "Math_870": {
    "pid": "Math_870",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "Math_871": {
    "pid": "Math_871",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "Math_872": {
    "pid": "Math_872",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_873": {
    "pid": "Math_873",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "Math_874": {
    "pid": "Math_874",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "G",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_875": {
    "pid": "Math_875",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "H",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_876": {
    "pid": "Math_876",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "Math_877": {
    "pid": "Math_877",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_878": {
    "pid": "Math_878",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "Math_879": {
    "pid": "Math_879",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_880": {
    "pid": "Math_880",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_881": {
    "pid": "Math_881",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "Math_882": {
    "pid": "Math_882",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_883": {
    "pid": "Math_883",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_884": {
    "pid": "Math_884",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_885": {
    "pid": "Math_885",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "Math_886": {
    "pid": "Math_886",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_887": {
    "pid": "Math_887",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_888": {
    "pid": "Math_888",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_889": {
    "pid": "Math_889",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "Math_890": {
    "pid": "Math_890",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "F",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "H",
    "extraction": "H",
    "true_false": false
  },
  "Math_891": {
    "pid": "Math_891",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "H",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "Math_892": {
    "pid": "Math_892",
    "question": "<image_1>\nWhich object comes next?",
    "options": [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H"
    ],
    "answer": "E",
    "solution": "",
    "subject": "Math",
    "task": "",
    "category": "Pattern Inference",
    "source": "RAVEN",
    "type": "Multiple Choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "phy_1": {
    "pid": "phy_1",
    "question": "A ray of light is incident on a spherical mirror after passing through its focus \\( F \\).\n\nWhich of the following diagrams shows the reflected ray correctly?\n\nNote: The smooth side is the reflecting part of the mirror, and the dotted side is the back.\n\n<image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_2": {
    "pid": "phy_2",
    "question": "A ray of light is incident on a spherical mirror parallel to its principal axis.\nWhich of the following diagrams shows the reflected ray correctly?\nNote: The smooth side is the reflecting part of the mirror, and the dotted side is the back.\n<image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_3": {
    "pid": "phy_3",
    "question": "A ray of light emerges in the direction away from the optical center, \n\\[\\text O\\], after refraction through a concave lens, as shown below.What is the path of the incident ray?\n\n<image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_4": {
    "pid": "phy_4",
    "question": "A ray of light is incident on a spherical mirror parallel to its principal axis.\nWhich of the following diagrams shows the reflected ray correctly?\nNote: The smooth side is the reflecting part of the mirror, and the dotted side is the back.\nChoose 1 answer:\n\n<image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_5": {
    "pid": "phy_5",
    "question": "The force on a certain charged particle is given by:\n\\[\n\\mathbf{F} = -(\\mathbf{v} \\times \\mathbf{B}),\n\\]\nwhere \\( \\mathbf{v} \\) and \\( \\mathbf{B} \\) are the velocity and magnetic field vectors.\n\nThe figure below shows the force on the particle at a point in its trajectory. Find the direction of the magnetic field \\( \\mathbf{B} \\).\n<image_1>",
    "options": [
      "Into the plane.",
      "Out of the plane."
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_6": {
    "pid": "phy_6",
    "question": "The following image shows a portion of hydrogen\u2019s emission spectrum. The Bohr models below show electron transitions that can occur in excited hydrogen atoms. Each of these transitions corresponds to one of the spectral lines shown above. Which transition produces the spectral line at \n\\[\\pu{434 nm}\\]?\n<image_2><image_3>",
    "options": [
      "transition A",
      "transition B",
      "transition C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_7": {
    "pid": "phy_7",
    "question": "The image below shows the Sun's absorption spectrum. One of the lines in the absorption spectrum is labeled with an arrow. The labeled line is a result of which element absorbing light in the Sun\u2019s atmosphere?\nAnalyze the elements' emission spectra to determine your answer.\n<image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_8": {
    "pid": "phy_8",
    "question": "A rod of length L = 4.0 m lays flat on a frictionless horizontal surface. Four forces act on the rod as shown in the figure below. The rod rotates about point P, where clockwise rotation is positive. Calculate the net torque on the rod about point P.\n<image_1>",
    "options": [
      "4.38 N-m",
      "-4.38 N-m",
      "-1.6 N-m",
      "1.6 N-m"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_9": {
    "pid": "phy_9",
    "question": "A uniform bar of mass $M$ and length $L$ has three notches along the bottom. The center notch is at the center of mass of the bar, and the other two notches are a distance of $\\frac{L}{12}$ on either side of the center notch. The bar is placed on a fulcrum as shown. A mass $M$, equal to the mass of the bar itself, is hung a distance $\\frac{L}{4}$ from the right edge of the bar. When an unknown mass $M'$ is hung a distance $\\frac{L}{4}$ from the left edge of the bar, the system remains in static equilibrium. Calculate the unknown mass \n\\[M'\\] in terms of \n\\[M\\].\n\n<image_1>",
    "options": [
      "M' = M",
      "M' = 1.5M",
      "M' = 2.M",
      "M' = 2.5M"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_10": {
    "pid": "phy_10",
    "question": "A double pulley is free to rotate about its axis through its center. The radii of the two pulleys are $R$ and $2R$. Two cords are wrapped in opposite directions on the pulleys and are attached to masses. As a result, the two tension forces acting on the pulley are equal and acting downwards as shown in the image below so that $F_1 = 2F_2$. When released from rest, what will be the direction of the angular acceleration?\n\n<image_1>",
    "options": [
      "clockwise",
      "counterclockwise",
      "There is no angular acceleration."
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_11": {
    "pid": "phy_11",
    "question": "A positive charge, $Q$, is located at the origin.  We can introduce a new positive charge, $q$ (where $q \\neq Q$), anywhere in the region. \nLet's consider the strength of the electric field, $|\\mathbf{E}|$, at $(2, 0)$. Choose the correct statement about $|\\mathbf{E}|$:\n<image_1>",
    "options": [
      "$|\\mathbf{E}|$ always increases. \\\\",
      "$|\\mathbf{E}|$ always decreases. \\\\",
      "$|\\mathbf{E}|$ may increase or decrease depending on the position of $q$. \\\\",
      "$|\\mathbf{E}|$ may first increase and then decrease depending on the position of $q$."
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_12": {
    "pid": "phy_12",
    "question": "A uniform magnetic field of magnitude, $0.50 \\, \\mathrm{T}$, lies on the $x$-$y$ plane making a $60^\\circ$ angle with the $x$-axis. When a $1.2 \\, \\mu\\mathrm{C}$ point charge moves in the $+y$ direction, it experiences a force of magnitude, $3.0 \\, \\mu\\mathrm{N}$. What is the speed of the charged particle?\n\n<image_1>",
    "options": [
      "\\( 10 \\, \\mathrm{m/s} \\) \\\\",
      "\\( 5.77 \\, \\mathrm{m/s} \\) \\\\",
      "\\( 15.3 \\, \\mathrm{m/s} \\) \\\\",
      "\\( 2.50 \\, \\mathrm{m/s} \\)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "khanacademy",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_13": {
    "pid": "phy_13",
    "question": "A quarantined physics student decides to perform an experiment to land a small box of mass $m=60 \\mathrm{~g}$ onto the center of a target a distance $\\Delta d$ away. The student puts the box on a top of a frictionless ramp with height $h_{2}=0.5 \\mathrm{~m}$ that is angled $\\theta=30^{\\circ}$ to the horizontal on a table that is $h_{1}=4 \\mathrm{~m}$ above the floor. If the student pushes the spring with spring constant $k=6.5 \\mathrm{~N} / \\mathrm{m}$ down by $\\Delta x=0.3 \\mathrm{~m}$ compared to its rest length and lands the box exactly on the target, what is $\\Delta d$ ? Answer in meters. You may assume friction is negligible.\n\n<image_1>",
    "options": [
      "2.63",
      "\\Delta d = 2.22 \\, \\text{m}",
      "2.47",
      "2.59 \\, \\text{m}"
    ],
    "answer": "C",
    "solution": "['By conservation of energy, we have that\\n$$\\n\\\\frac{1}{2} k x^{2}=m g x \\\\sin \\\\theta+\\\\frac{1}{2} m v^{2} \\\\Longrightarrow v=\\\\sqrt{\\\\frac{k}{m} x^{2}-2 g x \\\\sin \\\\theta}\\n$$\\n\\nBy kinematic formulae for motion with constant acceleration,\\n\\n$$\\n-4.5 \\\\mathrm{~m}=v \\\\sin \\\\theta t-\\\\frac{1}{2} g t^{2}\\n$$\\n\\nSolving for $t$ through the quadratic, $t=1.099 \\\\mathrm{~s}$ and the velocity is $v=2.60 \\\\mathrm{~m} / \\\\mathrm{s}$. Therefore, the distance, $\\\\Delta d=v \\\\cos \\\\theta t=2.47 \\\\mathrm{~m}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_14": {
    "pid": "phy_14",
    "question": "A wooden bus of mass $M=20,000 \\mathrm{~kg}$ ( $M$ represents the mass excluding the wheels) is on a ramp with angle $30^{\\circ}$. Each of the four wheels is composed of a ring of mass $\\frac{M}{2}$ and radius $R=1 \\mathrm{~m}$ and 6 evenly spaced spokes of mass $\\frac{M}{6}$ and length $R$. All components of the truck have a uniform density. Find the acceleration of the bus down the ramp assuming that it rolls without slipping.\n\nAnswer in $\\mathrm{m} / \\mathrm{s}^{2}$.\n\n<image_1>",
    "options": [
      "3.23",
      "3.32",
      "0.82 \\, \\text{m/s}",
      "1.13 \\, \\text{m/s}"
    ],
    "answer": "B",
    "solution": "[\"The moment of inertia of each wheel can be thought of as a superposition of the six spokes and a ring. Therefore, we get:\\n$$\\nI_{\\\\text {wheel }}=\\\\frac{M}{2} R^{2}+6\\\\left(\\\\frac{1}{3} \\\\frac{M}{6} R^{2}\\\\right)=\\\\frac{5}{6} M R^{2}\\n$$\\n\\nThe moment of inertia of four wheels is:\\n\\n$$\\nI_{\\\\mathrm{bus}}=4\\\\left(\\\\frac{5}{6} M R^{2}\\\\right)=\\\\frac{10}{3} M R^{2}\\n$$\\n\\nThe total mass of the bus is\\n\\n$$\\nm=M+4\\\\left(\\\\frac{M}{2}+6 \\\\cdot \\\\frac{M}{6}\\\\right)=7 M\\n$$\\n\\nUsing Newton's second law down the ramp,\\n\\n$$\\n7 M a=7 M g \\\\sin \\\\theta-4 f\\n$$\\n\\nif $f$ is the friction at each wheel, and the torque balance on each wheel is:\\n\\n$$\\n\\\\frac{5}{6} M R^{2} \\\\alpha=f R\\n$$\\n\\nLetting $a=\\\\alpha r$ for the no slip condition, we can solve for $f$ to be:\\n\\n$$\\nf=\\\\frac{5}{6} M a\\n$$\\n\\nso our force balance equation becomes:\\n\\n$$\\n7 M a=7 M g \\\\sin \\\\theta-\\\\frac{10}{3} M a \\\\Longrightarrow a=\\\\frac{21}{31} g \\\\sin \\\\theta=3.32 \\\\mathrm{~m} / \\\\mathrm{s}^{2}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_15": {
    "pid": "phy_15",
    "question": "A frictionless track contains a loop of radius $R=0.5 \\mathrm{~m}$. Situated on top of the track lies a small ball of mass $m=2 \\mathrm{~kg}$ at a height $h$. It is then dropped and collides with another ball (of negligible size) of mass $M=5 \\mathrm{~kg}$.\n\n<image_1>\n\nLet $h$ be the minimum height that $m$ was dropped such that $M$ would be able to move all the way around the loop. The coefficient of restitution for this collision is given as $e=\\frac{1}{2}$.\n\nNow consider a different scenario. Assume that the balls can now collide perfectly inelastically, which means that they stick to each other instantaneously after collision for the rest of the motion. If $m$ was dropped from a height $3 R$, find the minimum value of $\\frac{m}{M}$ such that the combined mass can fully move all the way around the loop. Let this minimum value be $k$. Compute $\\alpha=\\frac{k^{2}}{h^{2}}$. (Note that this question is only asking for $\\alpha$ but you need to find $h$ to find $\\alpha$ ). Assume the balls are point masses (neglect rotational effects).",
    "options": [
      "2.33",
      "2.83",
      "2.73",
      "2.37"
    ],
    "answer": "D",
    "solution": "['The velocity of $m$ when it gets to the bottom of the track will be given by\\n$$\\nv_{b}=\\\\sqrt{2 g h} .\\n$$\\n\\nClaim: The velocity of $M$ after collision will be given by $v_{M}=\\\\frac{(1+e) m}{m+M} \\\\sqrt{2 g h}$.\\n\\nProof: Conservation of momentum before and after the collision is expressed by:\\n\\n$$\\nm v_{b}=m v_{m}+M v_{M}\\n$$\\n\\nBy coefficient of restitution,\\n\\n$$\\nv_{M}-v_{m}=e v_{b}\\n$$\\n\\nThese equations may be solved directly to find $v_{m}, v_{M}$ to give\\n\\n$$\\nv_{M}=\\\\frac{(1+e) m}{m+M} v_{b}\\n$$\\n\\nNext, when the objects get to the top of the loop, conservation of energy gives the speed of $M$ when it gets to the top as\\n\\n$$\\n\\\\frac{1}{2} v_{M}^{2}=\\\\frac{1}{2} v_{t}^{2}+2 g R .\\n$$\\n\\nAt the top of the loop, $M$ must at least have an acceleration $g$ to maintain circular motion, and thus\\n\\n$$\\n\\\\frac{v_{t}^{2}}{R}=g \\\\Longrightarrow v_{t}=\\\\sqrt{g R}\\n$$\\n\\n\\n\\nSubstituting these results into our conservation equation gives us\\n\\n$$\\n\\\\begin{aligned}\\n\\\\frac{(1+e)^{2} m^{2}}{(m+M)^{2}}(\\\\sqrt{2 g h})^{2} & =g R+4 g R \\\\\\\\\\n\\\\frac{2(1+e)^{2} m^{2} g h}{(m+M)^{2}} & =5 g R \\\\\\\\\\nh & =\\\\frac{5(m+M)^{2} R}{2(1+e)^{2} m^{2}} \\\\\\\\\\n& =6.805 \\\\mathrm{~m}\\n\\\\end{aligned}\\n$$\\n\\nIn the second scenario, conservation of momentum before and after the collision gives:\\n\\n$$\\nm v_{b}=(M+m) v_{f} \\\\Longrightarrow v_{f}=\\\\frac{m v_{b}}{M+m}\\n$$\\n\\nThe same conservation of energy formula as in the first scenario yields\\n\\n$$\\n\\\\begin{aligned}\\n\\\\frac{m^{2}}{(M+m)^{2}}(\\\\sqrt{2 g h})^{2} & =5 g R \\\\\\\\\\n\\\\frac{2 m^{2} g h}{(M+m)^{2}} & =5 g R \\\\\\\\\\n\\\\frac{6 m^{2} g R}{(M+m)^{2}} & =5 g R \\\\\\\\\\n\\\\left(\\\\frac{k}{k+1}\\\\right)^{2} & =\\\\frac{5}{6} \\\\\\\\\\n\\\\frac{k}{k+1} & =\\\\sqrt{\\\\frac{5}{6}} \\\\\\\\\\nk & =\\\\frac{\\\\sqrt{5}}{\\\\sqrt{6}-\\\\sqrt{5}} \\\\\\\\\\n& =10.477\\n\\\\end{aligned}\\n$$\\n\\nThus,\\n\\n$$\\n\\\\alpha=\\\\frac{k^{2}}{h^{2}}=2.37 \\\\mathrm{~m}^{2}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_16": {
    "pid": "phy_16",
    "question": "The following diagram depicts a single wire that is bent into the shape below. The circuit is placed in a magnetic field pointing out of the page, uniformly increasing at the rate $\\frac{d B}{d t}=2.34 \\mathrm{~T} / \\mathrm{s}$. Calculate the magnitude of induced electromotive force in the wire, in terms of the following labelled areas $\\left(\\mathrm{m}^{2}\\right)$. Note that $B$ is non-inclusive of $C$ and that $A=4.23, B=2.74$, and $C=0.34$.\n\n<image_1>",
    "options": [
      "2.9",
      "1.9",
      "2.1",
      "16.31 \\, \\text{V}"
    ],
    "answer": "B",
    "solution": "['Without loss of generality, let the current around $A$ flow in the counterclockwise direction and let the flux through $A$ be positive. Note that the current will flow in the clockwise direction in $C$ and around $B$, the area enclosed by the loop is $B+C$. The flux will be negative here. Therefore, the total flux is then proportional to:\\n$$\\n\\\\Phi \\\\propto A-B-2 C=0.81\\n$$\\n\\nand the magnitude of the induced electromotive force is:\\n\\n$$\\n\\\\varepsilon=(A-B-2 C) \\\\frac{d B}{d t}=1.9 \\\\mathrm{Tm}^{2} \\\\mathrm{~s}^{-1} .\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_17": {
    "pid": "phy_17",
    "question": "For his art project, Weishaupt cut out $N=20$ wooden equilateral triangular blocks with a side length of $\\ell=10 \\mathrm{~cm}$ and a thickness of $t=2 \\mathrm{~cm}$, each with the same mass and uniform density. He wishes to stack one on top of the other overhanging the edge of his table. In centimeters, what is the maximum overhang? Round to the nearest centimeter. A side view is shown below. Assume that all triangles are parallel to each other.\n\nNote: This diagram is not to scale.\n\n<image_1>",
    "options": [
      "19",
      "525 \\text{ cm}",
      "21",
      "18"
    ],
    "answer": "C",
    "solution": "['Let us consider $N=1$ equilateral triangles. From inspection, we need to place the triangle such that the center of mass lies at the edge of the table. The maximum overhang in this case is $(1-f) h$ where $h=\\\\frac{\\\\ell \\\\sqrt{3}}{2}$ is the height of the triangle and $f h=\\\\frac{h}{3}$ is the location of the center of mass.\\nIf we wish to place a second triangle on top, we want to maximize the center of mass to be as far right as possible without the top block toppling. Placing the second block such that its center of mass is at the tip of the first triangle accomplishes this. However, the center of mass of the two triangles combined is now past the edge. Their center of mass is:\\n\\n$$\\nx_{\\\\mathrm{cm}}=\\\\frac{f h+h}{2}=\\\\frac{f+1}{2} h\\n$$\\n\\nThus the maximum overhang of the first block is now:\\n\\n$$\\nh-\\\\frac{f+1}{2} h=\\\\frac{1-f}{2} h\\n$$\\n\\nNow, we will place a third block such that it has the maximum overhang with respect to the top block and then shift the entire setup so that the center of mass of the system lies at the edge of the table. Following the same procedures, we find that the maximum overhang of the first block is:\\n\\n$$\\n\\\\frac{1-f}{3} h\\n$$\\n\\nThe overhang of the top two blocks are $(1-f) h$ and $\\\\frac{1-f}{2} h$, unchanged from earlier. You can show via induction that the maximum overhang of the $n^{\\\\text {th }}$ block (counting from the top downwards) is:\\n\\n$$\\n\\\\frac{1-f}{n} h\\n$$\\n\\nso if there are 20 such blocks, then the total overhang (summing over all the blocks) is:\\n\\n$$\\n\\\\sum_{k=0}^{20} \\\\frac{1-f}{k} h=(1-f) h H_{20}=\\\\frac{2}{3} \\\\frac{\\\\ell \\\\sqrt{3}}{2} H_{20}=\\\\frac{\\\\ell \\\\sqrt{3}}{3} H_{20}=20.77 \\\\mathrm{~cm} \\\\approx 21 \\\\mathrm{~cm}\\n$$\\n\\nwhere $H_{N}$ is the $N^{\\\\text {th }}$ harmonic number.']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_18": {
    "pid": "phy_18",
    "question": "The graph provided plots the $y$-component of the velocity against the $x$-component of the velocity of a kiddie roller coaster at an amusement park for a certain duration of time. The ride takes place entirely in a two dimensional plane.\n\nSome students made a remark that at one time, the acceleration was perpendicular to the velocity. Using this graph, what is the minimum x-velocity the ride could be travelling at for this to be true? Round to the nearest integer and answer in meters per second. The diagram is drawn to scale, and you may print this page out and make measurements.\n\n<image_1>",
    "options": [
      "1",
      "4 \\text{ m/s}",
      "6",
      "2"
    ],
    "answer": "A",
    "solution": "['The solution revolves around the idea that when the acceleration is perpendicular to the velocity, the work done is 0 , and thus, the instantaneous rate of change of the magnitude of velocity $v_{x}^{2}+v_{y}^{2}$ is 0 . Thus, at such points, when the vertical velocity is plotted against the horizontal velocity, the curve will be tangent to a circle centered at the origin because $v_{y}^{2}+v_{x}^{2}$ is nonchanging at that instant.\\nThis is equivalent to stating that the line from the origin to the curve is perpendicular to the curve. Drawing such lines to the curve, the first time this occurs is at $v_{x}=1 \\\\mathrm{~m} / \\\\mathrm{s}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_19": {
    "pid": "phy_19",
    "question": "While exploring outer space, Darth Vader comes upon a purely reflective spherical planet with radius $R_{p}=$ $40,000 \\mathrm{~m}$ and mass $M_{p}=8.128 \\times 10^{24} \\mathrm{~kg}$. Around the planet is a strange moon of orbital radius $R_{s}=$ $6,400,000 \\mathrm{~m}\\left(R_{s} \\gg R_{p}\\right)$ and mass $M_{s}=9.346 \\times 10^{19} \\mathrm{~kg}\\left(M_{s} \\ll M_{p}\\right)$. The moon can be modelled as a blackbody and absorbs light perfectly. Darth Vader is in the same plane that the planet orbits in. Startled, Darth Vader shoots a laser with constant intensity and power $P_{0}=2 \\times 10^{32} \\mathrm{~W}$ at the reflective planet and hits the planet a distance of $\\frac{R_{p}}{2}$ away from the line from him to the center of the planet. Upon hitting the reflective planet, the light from the laser is plane polarized. The angle of the planet's polarizer is always the same as the angle of reflection. After reflectance, the laser lands a direct hit on the insulator planet. Darth Vader locks the laser in on the planet until it moves right in front of him, when he turns the laser off. Determine the energy absorbed by the satellite. Assume the reflective planet remains stationary and that the reflective planet is a perfect polarizer of light.\n\n<image_1>",
    "options": [
      "E_{absorbed}",
      "1.33 \\cdot 10^{35}",
      "1.33 \\cdot 10^{34}",
      "1 \\times 10^{32}"
    ],
    "answer": "B",
    "solution": "[\"The original angle of reflectance can be found with some optical geometry to be $\\\\theta_{0}=\\\\sin ^{-1}\\\\left(\\\\frac{1}{2}\\\\right)=$ $\\\\frac{\\\\pi}{6}$. By Malus' Law, when the laser hits the planet with an angle $\\\\theta$, the final power after reflection is $P_{0} \\\\cos ^{2}(\\\\theta)$. Also, note that the satellite has to be at an angle $2 \\\\theta$ due to the law of reflection. Therefore, by Kepler's Third law, the time for the satellite to reach $\\\\theta=0$ is\\n$$\\nt=2 \\\\theta \\\\sqrt{\\\\frac{r^{3}}{G M_{p}}} \\\\Longrightarrow d t=2 \\\\sqrt{\\\\frac{r^{3}}{G M_{p}}} d \\\\theta\\n$$\\n\\nThus, the total power absorbed by the satellite is\\n\\n$$\\n\\\\int_{0}^{\\\\theta_{0}} P_{0} \\\\cos ^{2}(\\\\theta) d t=2 P_{0} \\\\sqrt{\\\\frac{r^{3}}{G M_{p}}} \\\\int_{0}^{\\\\theta_{0}} \\\\cos ^{2}(\\\\theta) d \\\\theta=P_{0} \\\\sqrt{\\\\frac{r^{3}}{G M_{p}}}\\\\left(\\\\theta_{0}+\\\\sin \\\\left(\\\\theta_{0}\\\\right) \\\\cos \\\\left(\\\\theta_{0}\\\\right)\\\\right)=1.33 \\\\cdot 10^{35} \\\\mathrm{~J} .\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_20": {
    "pid": "phy_20",
    "question": "An engineer has access to a tetrahedron building block with side length $\\ell=10 \\mathrm{~cm}$. The body is made of a thermal insulator but the edges are wrapped with a thin copper wiring with cross sectional area $S=2 \\mathrm{~cm}^{2}$. The thermal conductivity of copper is $385.0 \\mathrm{~W} /(\\mathrm{m} \\mathrm{K})$. He stacks these tetrahedrons (all facing the same direction) to form a large lattice such that the copper wires are all in contact. In the diagram, only the front row of a small section is coloured. Assume that the lattice formed is infinitely large.\n\nAt some location in the tetrahedral building block, the temperature difference between two adjacent points is $1^{\\circ} \\mathrm{C}$. What is the heat flow across these two points? Answer in Watts.\n\nNote: Two adjacent points refer to two adjacent points on the tetrahedron.\n\n<image_1>",
    "options": [
      "5.28",
      "7.7 \\, \\mathrm{W}",
      "0.77 \\, \\text{W}",
      "4.62"
    ],
    "answer": "D",
    "solution": "[\"There are many ways to solve this problem. We first identify that this is exactly the same as an infinite lattice resistor problem. To solve these, we can imagine injecting a current at a node and seeing how this current spreads out. However, a faster approach is by applying Foster's Theorem on this lattice.\\nThe resistance of a single wire is:\\n\\n$$\\nR=\\\\frac{\\\\ell}{k S}=1.299 \\\\mathrm{~W} / \\\\mathrm{K}\\n$$\\n\\nFoster's theorem tells us that\\n\\n$$\\nE R=V-1\\n$$\\n\\n\\n\\nwhere $V$ is number of vertices and $E$ is edges. Taking the limit as $E, V \\\\rightarrow \\\\infty$, we get: $E=6 \\\\mathrm{~V}$ (since each vertex is connected to 12 edges, but each edge is shared by two vertices). Therefore:\\n\\n$$\\nR_{\\\\mathrm{eff}}=\\\\frac{1}{6} R=0.2165 \\\\mathrm{~W} / \\\\mathrm{K}\\n$$\\n\\nFrom Fourier's Law, we have:\\n\\n$$\\n\\\\dot{Q}=\\\\frac{\\\\Delta T}{R_{\\\\mathrm{eff}}}=4.62 \\\\mathrm{~W}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_21": {
    "pid": "phy_21",
    "question": "Three unit circles, each with radius 1 meter, lie in the same plane such that the center of each circle is one intersection point between the two other circles, as shown below. Mass is uniformly distributed among all area enclosed by at least one circle. The mass of the region enclosed by the triangle shown above is $1 \\mathrm{~kg}$. Let $x$ be the moment of inertia of the area enclosed by all three circles (intersection, not union) about the axis perpendicular to the page and through the center of mass of the triangle. Then, $x$ can be expressed as $\\frac{a \\pi-b \\sqrt{c}}{d \\sqrt{e}}$ $\\mathrm{kg} \\mathrm{m}^{2}$, where $a, b, c, d, e$ are integers such that $\\operatorname{gcd}(a, b, d)=1$ and both $c$ and $e$ are squarefree. Compute $a+b+c+d+e$.\n\n<image_1>",
    "options": [
      "11",
      "6",
      "15",
      "39"
    ],
    "answer": "D",
    "solution": "['Define point $O$ as the point in the plane that the axis of rotation passes through. Since moments of inertia simply add about a given axis, we can calculate the moments of inertia of the three \"sectors\" whose union forms the given area and subtract twice the moment of inertia of the triangle, so our answer will be $3 I_{s, O}-2 I_{t, O}$.\\nClaim: The center of mass of a sector is $\\\\frac{2}{\\\\pi}$ away from the vertex of the sector along its axis of symmetry. Proof: We can divide the sector into arbitrarily small sectors that can be approximated as isosceles triangles. It\\'s well known that the center of mass of one such isosceles triangle is $\\\\frac{2}{3}$ of the way from the central vertex to the base. Therefore, the center of mass of the sector is the center of mass of the arc with central angle $\\\\frac{\\\\pi}{3}$ and same center with radius $\\\\frac{2}{3}$ contained within the sector. Since the center of mass has to lie on the axis of symmetry, we set that as the $\\\\mathrm{x}$ axis with the vertex of the sector being $x=0$. Then, the $x$-coordinate of a point on the arc whose corresponding radius makes an angle of $\\\\theta$ with the axis of symmetry is $\\\\frac{2}{3} \\\\cos (\\\\theta)$. We can integrate this over all possible angles $\\\\left(-\\\\frac{\\\\pi}{6} \\\\leq \\\\theta \\\\leq \\\\frac{\\\\pi}{6}\\\\right)$ and then divide by the range $\\\\left(\\\\frac{\\\\pi}{3}\\\\right)$ to get the average $x$-coordinate, or the center of mass.\\n\\n$$\\n\\\\begin{gathered}\\n\\\\frac{\\\\int_{-\\\\frac{\\\\pi}{6}}^{\\\\frac{\\\\pi}{6}} \\\\frac{2}{3} \\\\cos (\\\\theta) \\\\mathrm{d} \\\\theta}{\\\\frac{\\\\pi}{3}} \\\\\\\\\\n\\\\frac{2}{\\\\pi} \\\\int_{-\\\\frac{\\\\pi}{6}}^{\\\\frac{\\\\pi}{6}} \\\\cos (\\\\theta) \\\\mathrm{d} \\\\theta \\\\\\\\\\n\\\\frac{2}{\\\\pi}\\\\left(\\\\sin \\\\left(\\\\frac{\\\\pi}{6}\\\\right)-\\\\sin \\\\left(-\\\\frac{\\\\pi}{6}\\\\right)\\\\right)\\n\\\\end{gathered}\\n$$\\n\\n\\n\\nThis concludes the proof.\\n\\nNow define point $X$ as the vertex of a sector and point $M$ as the center of mass of that sector. According to the parallel axis theorem,\\n\\n$$\\nI_{s, X}=I_{s, M}+m_{s}\\\\left(\\\\frac{2}{\\\\pi}\\\\right)^{2}\\n$$\\n\\n. It\\'s well known that $I_{s, X}=\\\\frac{1}{2} m_{s} r^{2}=\\\\frac{m_{s}}{2}$, and so\\n\\n$$\\nI_{s, M}=\\\\frac{m_{s}}{2}-\\\\frac{4 m_{s}}{\\\\pi^{2}}=m_{s}\\\\left(\\\\frac{\\\\pi^{2}-8}{2 \\\\pi^{2}}\\\\right)\\n$$\\n\\nIt\\'s also well known that $O$ is on the line of symmetry and a distance of $\\\\frac{1}{\\\\sqrt{3}}$ away from $X$, and so $M X=$ $\\\\frac{2}{\\\\pi}-\\\\frac{1}{\\\\sqrt{3}}$. Therefore,\\n\\n$$\\nI_{s, O}=I_{s, M}+m_{s}\\\\left(\\\\frac{2}{\\\\pi}-\\\\frac{1}{\\\\sqrt{3}}\\\\right)^{2}=m_{s}\\\\left(\\\\frac{5 \\\\pi-8 \\\\sqrt{3}}{6 \\\\pi}\\\\right)\\n$$\\n\\nIt\\'s well known that, since $O$ is the center of mass of the triangle,\\n\\n$$\\nI_{t, O}=\\\\frac{1}{12}\\n$$\\n\\nNow we just need to calculate $m_{s}$. Since the mass of the triangle is $1 \\\\mathrm{~kg}$, this is equivalent to finding the ratio of the area of a sector to the area of a triangle. Through geometry, this is found to be $\\\\frac{2 \\\\pi}{3 \\\\sqrt{3}}$. Finally, we get our answer to be\\n\\n$$\\n\\\\left(\\\\frac{2 \\\\pi}{\\\\sqrt{3}}\\\\right)\\\\left(\\\\frac{5 \\\\pi-8 \\\\sqrt{3}}{6 \\\\pi}\\\\right)-\\\\frac{1}{6}=\\\\left(\\\\frac{10 \\\\pi-17 \\\\sqrt{3}}{6 \\\\sqrt{3}}\\\\right)\\n$$\\n\\nand $a+b+c+d+e=10+17+3+6+3=039$']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_22": {
    "pid": "phy_22",
    "question": "Two infinitely long current carrying wires carry constant current $i_{1}=2 \\mathrm{~A}$ and $i_{2}=3 \\mathrm{~A}$ as shown in the diagram. The equations of the wire curvatures are $y^{2}-8 x-6 y+25=0$ and $x=0$. Find the magnitude of force (in Newtons) acting on one of the wires due to the other.\n\n<image_1>\n\nNote: The current-carrying wires are rigidly fixed. The units for distances on the graph should be taken in metres.",
    "options": [
      "6 \\times 10^{-7}",
      "6 \\times 10^{-7}",
      "7.5398 \\cdot 10^{6}",
      "7.5398 \\cdot 10^{-6}"
    ],
    "answer": "D",
    "solution": "['The magnetic field from the wire is given by $B=\\\\frac{\\\\mu_{0} i_{1}}{2 \\\\pi x}$. Let $\\\\theta$ be the direction of a component of force from the vertical. It is then seen that\\n$$\\nd F=B i_{2} d \\\\ell \\\\Longrightarrow d F_{x}=B i_{2} d \\\\ell \\\\sin \\\\theta=B i_{2} d y\\n$$\\n\\nWe only consider the force in the $x$-direction which means that\\n\\n$$\\nF_{x}=\\\\int_{\\\\infty}^{\\\\infty} d F_{x}=\\\\frac{\\\\mu_{0} i_{1} i_{2}}{2 \\\\pi} \\\\int_{-\\\\infty}^{\\\\infty} \\\\frac{d y}{x}\\n$$\\n\\nSolving the equation in terms of $x$ and then plugging in gives us\\n\\n$$\\nF_{x}=\\\\frac{8 \\\\mu_{0} i_{1} i_{2}}{2 \\\\pi} \\\\int_{-\\\\infty}^{\\\\infty} \\\\frac{d y}{y^{2}-6 y+25}=\\\\frac{8 \\\\mu_{0} i_{1} i_{2}}{2 \\\\pi} \\\\cdot \\\\frac{\\\\pi}{4}=\\\\mu_{0} i_{1} i_{2}=7.5398 \\\\cdot 10^{-6} \\\\mathrm{~N} .\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_23": {
    "pid": "phy_23",
    "question": "Two electrons are in a uniform electric field $\\mathbf{E}=E_{0} \\hat{\\mathbf{z}}$ where $E_{0}=10^{-11} \\mathrm{~N} / \\mathrm{C}$. One electron is at the origin, and another is $10 \\mathrm{~m}$ above the first electron. The electron at the origin is moving at $u=10 \\mathrm{~m} / \\mathrm{s}$ at an angle of $30^{\\circ}$ from the line connecting the electrons at $t=0$, while the other electron is at rest at $t=0$. Find the minimum distance between the electrons. You may neglect relativistic effects.\n\n<image_1>",
    "options": [
      "10.01 \\, \\mathrm{m}",
      "6.84",
      "9.83",
      "6.48"
    ],
    "answer": "B",
    "solution": "['Let $\\\\ell=10 \\\\mathrm{~m}$. First, switch into the reference frame accelerating at $-\\\\frac{E q}{m} \\\\hat{z}$. In this frame, the electrons are not affected by the electric field. Now, switch into the center of mass reference frame from here. In this frame, we have both conservation of angular momentum and conservation of energy. Both electrons in this frame are moving at $\\\\frac{u}{2}$ initially at an angle of $\\\\theta=30^{\\\\circ}$. At the smallest distance, both electrons will be moving perpendicular to the line connecting them. Suppose that they both move with speed $v$ and are a distance $r$ from the center of mass. By conservation of angular momentum,\\n$$\\n\\\\begin{gathered}\\n2 m \\\\cdot \\\\frac{u}{2} \\\\cdot \\\\frac{\\\\ell}{2} \\\\sin \\\\theta=2 m v r \\\\\\\\\\nv r=\\\\frac{u \\\\ell}{4} \\\\sin \\\\theta\\n\\\\end{gathered}\\n$$\\n\\n\\n\\nNow, by conservation of energy,\\n\\n$$\\nm v^{2}+\\\\frac{k e^{2}}{2 r}=\\\\frac{1}{4} m u^{2}+\\\\frac{k e^{2}}{\\\\ell}\\n$$\\n\\nNow, we just solve this system of equations to determine the value of $r$. Substituting $v=\\\\frac{u l}{4 r} \\\\sin \\\\theta$ into the conservation of energy equation, we can solve the ensuing quadratic to find:\\n\\n$$\\nr=\\\\frac{\\\\frac{k e^{2}}{2}+\\\\sqrt{\\\\left(\\\\frac{k e^{2}}{2}\\\\right)^{2}+\\\\left(m u^{2}+\\\\frac{4 k e^{2}}{\\\\ell}\\\\right)\\\\left(\\\\frac{m u^{2} \\\\ell^{2}}{16} \\\\sin ^{2}(\\\\theta)\\\\right)}}{\\\\frac{1}{2} m u^{2}+\\\\frac{2 k e^{2}}{\\\\ell}}\\n$$\\n\\nFinally, remembering that the distance between the electrons is actually $2 r$, we obtain $2 r=6.84 \\\\mathrm{~m}$ as the final answer.']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_24": {
    "pid": "phy_24",
    "question": "Consider a long uniform conducting cylinder. First, we divide the cylinder into thirds and remove the middle third. Then, we perform the same steps on the remaining two cylinders. Again, we perform the same steps on the remaining four cylinders and continuing until there are 2048 cylinders.\n\nWe then connect the terminals of the cylinder to a battery and measure the effective capacitance to be $C_{1}$. If we continue to remove cylinders, the capacitance will reach an asymptotic value of $C_{0}$. What is $C_{1} / C_{0}$ ?\n\nYou may assume each cylindrical disk to be wide enough to be considered as an infinite plate, such that the radius $R$ of the cylinders is much larger than the $d$ between any successive cylinders.\n<image_1>\n\nNote: The diagram is not to scale.",
    "options": [
      "2048",
      "0.888",
      "2",
      "1.017"
    ],
    "answer": "D",
    "solution": "[\"The capacitance is proportional to $C \\\\propto \\\\frac{1}{d}$, where $d$ is the distance between successive parallel plates. When we add capacitor plates in series, their effective capacitance will be:\\n$$\\nC \\\\propto\\\\left(\\\\frac{1}{1 / d_{1}}+\\\\frac{1}{1 / d_{2}}+\\\\cdots\\\\right)^{-1}=\\\\frac{1}{d_{1}+d_{2}+\\\\cdots} \\\\Longrightarrow C \\\\propto \\\\frac{1}{d_{\\\\text {total }}}\\n$$\\n\\nTherefore, this essentially becomes a math problem: What is the total length of the spacing in between? Between successive 'cuts', the length of each cylinder is cut down by $1 / 3$, but the number of gaps double. Therefore, the spacing grows by a factor of $2 / 3$ each time. For $n=2^{1}$, the spacing starts off as $1 / 3$. For $n=2^{10}$, the spacing becomes:\\n\\n$$\\n\\\\frac{1}{C_{\\\\text {eff }}} \\\\propto d=\\\\frac{1}{3}\\\\left(\\\\frac{1-(2 / 3)^{10}}{1-2 / 3}\\\\right) L=0.983 L\\n$$\\n\\nfor $n \\\\rightarrow \\\\infty$, it is clear the total spacing will converge to $L$. Therefore:\\n\\n$$\\nC_{1} / C_{0}=1.017\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_25": {
    "pid": "phy_25",
    "question": "A square based pyramid (that is symmetrical) is standing on top of a cube with side length $\\ell=10 \\mathrm{~cm}$ such that their square faces perfectly line up. The cube is initially standing still on flat ground and both objects have the same uniform density. The coefficient of friction between every surface is the same value of $\\mu=0.3$. The cube is then given an initial speed $v$ in some direction parallel to the floor. What is the maximum possible value of $v$ such that the base of the pyramid will always remain parallel to the top of the cube? Answer in meters per second.\n\n<image_1>",
    "options": [
      "1.07",
      "0.767 \\, \\text{m/s}",
      "0.77 \\, \\mathrm{m/s}",
      "2.94"
    ],
    "answer": "A",
    "solution": "['Let $x$ be the relative displacement of the two objects. Then:\\n$$\\nv_{i}^{2}=2 a x\\n$$\\n\\nwhere the relative acceleration is:\\n\\n$$\\na=\\\\frac{2 h}{3 \\\\ell} g \\\\mu\\n$$\\n\\nwork The acceleration of pyramid is $g \\\\mu$ and the acceleration of cube is:\\n\\n$$\\n\\\\rho \\\\ell^{3} a=\\\\rho\\\\left(\\\\ell^{3}+\\\\frac{\\\\ell^{2} h}{3}\\\\right) g \\\\mu+\\\\rho \\\\frac{\\\\ell^{2} h}{3} g \\\\mu \\\\Longrightarrow a=\\\\frac{3 \\\\ell+2 h}{3 \\\\ell} g \\\\mu\\n$$\\n\\nTherefore, the relative acceleration is:\\n\\n$$\\na=\\\\frac{6 \\\\ell+2 h}{3 \\\\ell} g \\\\mu\\n$$\\n\\nWe want to direct the motion of the cube diagonally (such that horizontal sides of the cube form a 45 degree angle with the displacement). Initially, we may think that we need to let $x=\\\\frac{\\\\sqrt{2}}{2} \\\\ell$ but it can start tipping before that. Moving into a non-inertial reference frame for the pyramid, we see that the effective gravity needs to point towards the back corner of the cube, so it needs to satisfy the criteria\\n\\n$$\\n\\\\frac{h_{\\\\mathrm{cm}}}{\\\\frac{\\\\sqrt{2}}{2} \\\\ell-x}=\\\\frac{m g}{m g \\\\mu} \\\\Longrightarrow x=\\\\frac{\\\\sqrt{2}}{2} \\\\ell-\\\\mu \\\\frac{1}{4} h\\n$$\\n\\n\\n\\nHere I used the fact that the center of mass was $1 / 4$ of the way up. Substituting, we get:\\n\\n$$\\nv=\\\\sqrt{2\\\\left(\\\\frac{6 \\\\ell+2 h}{3 \\\\ell} g \\\\mu\\\\right)\\\\left(\\\\frac{\\\\sqrt{2}}{2} l-\\\\frac{\\\\mu}{4} h\\\\right)}=\\\\sqrt{2 g \\\\mu\\\\left(2+\\\\frac{2 h}{3 \\\\ell}\\\\right)\\\\left(\\\\frac{\\\\sqrt{2}}{2} \\\\ell-\\\\frac{\\\\mu}{4} h\\\\right)}\\n$$\\n\\nThe maximum $v$ occurs at\\n\\n$$\\nh / \\\\ell=\\\\frac{-3+\\\\frac{2 \\\\sqrt{2}}{\\\\mu}}{2}\\n$$\\n\\ngiving a maximum $v$ of $v_{\\\\max }=1.07 \\\\mathrm{~m} / \\\\mathrm{s}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_26": {
    "pid": "phy_26",
    "question": "During quarantine, the FBI has been monitoring a young physicists suspicious activities. After compiling weeks worth of evidence, the FBI finally has had enough and searches his room.\n\nThe room's door is opened with a high angular velocity about its hinge. Over a very short period of time, its angular velocity increases to $\\omega=8.56 \\mathrm{rad} / \\mathrm{s}$ due to the force applied at the end opposite from the hinge. For simplicity, treat the door as a uniform thin rod of length $L=1.00 \\mathrm{~m}$ and mass $M=9.50 \\mathrm{~kg}$. The hinge (pivot) is located at one end of the rod. Ignore gravity. At what distance from the hinge of the door is the door most likely to break? Assume that the door will break at where the bending moment is largest. (Answer in metres.)\n\n<image_1>",
    "options": [
      "0.50 \\, \\text{m}",
      "1 \\text{ meter}",
      "\\frac{\\sqrt{3}}{3}",
      "3"
    ],
    "answer": "C",
    "solution": "[\"Let $N$ be the force from the pivot and $F$ be the applied force at the end. Let $\\\\alpha$ be the angular acceleration. Writing the torque equation and Newton's 2nd law for the whole door, we get:\\n$$\\n\\\\begin{aligned}\\n& F \\\\cdot L=\\\\frac{1}{3} M L^{2} \\\\alpha \\\\\\\\\\n& N+F=\\\\frac{1}{2} M L \\\\alpha\\n\\\\end{aligned}\\n$$\\n\\nSolving, we get $F=\\\\frac{1}{3} M L \\\\alpha$ and $N=\\\\frac{1}{6} M L \\\\alpha$. Now, we consider the part of the door with length $x$ attached to the pivot. The rest of the door applies a torque $\\\\tau$ and shear force $f$ on our system. (There is also tension force). Let $\\\\lambda=\\\\frac{M}{L}$. We can write the torque equation and Newton's 2 nd law for our system:\\n\\n$$\\n\\\\begin{aligned}\\n& \\\\tau+f x=\\\\frac{1}{3} \\\\lambda x^{3} \\\\alpha \\\\\\\\\\n& N+f=\\\\lambda x \\\\cdot \\\\frac{x}{2} \\\\alpha\\n\\\\end{aligned}\\n$$\\n\\nSolving, we get\\n\\n$$\\n\\\\tau=\\\\frac{1}{6} \\\\lambda x \\\\alpha\\\\left(L^{2}-x^{2}\\\\right)\\n$$\\n\\nand\\n\\n$$\\nf=\\\\frac{1}{6} \\\\lambda \\\\alpha\\\\left(3 x^{2}-L^{2}\\\\right)\\n$$\\n\\nWe maximize $\\\\tau$ (which is equivalent to maximizing bending moment) to get $x=\\\\frac{L}{\\\\sqrt{3}}=0.577 \\\\mathrm{~m}$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_27": {
    "pid": "phy_27",
    "question": "A solid half-disc of mass $m=1 \\mathrm{~kg}$ in the shape of a semi-circle of radius $R=1 \\mathrm{~m}$ is kept at rest on a smooth horizontal table. QiLin starts applying a constant force of magnitude $F=10 \\mathrm{~N}$ at point A as shown, parallel to its straight edge. What is the initial linear acceleration of point B? (Answer in $\\mathrm{m} / \\mathrm{s}^{2}$ )\n\n<image_1>\n\nNote: the diagram above is a top down view.",
    "options": [
      "30 \\, \\text{m/s}",
      "40 \\mathrm{~m/s^2}",
      "15.9395",
      "22.36 \\mathrm{~m/s}"
    ],
    "answer": "C",
    "solution": "[\"Let C denote the location of the centre of mass of the disc. It is well known that $O C=\\\\frac{4 R}{3 \\\\pi}$. Note that the initial angular velocity of the disc about its centre of mass is 0 , and the linear acceleration is simply\\n$$\\na_{\\\\mathrm{CM}}=\\\\frac{F}{m} \\\\hat{i}\\n$$\\n\\nNow we use the $\\\\tau=\\\\vec{r} \\\\times \\\\vec{F}=I_{\\\\mathrm{CM}} \\\\alpha_{\\\\mathrm{CM}}$ about the centre of mass of the disc\\n\\n$$\\n\\\\left(\\\\frac{4 R}{3 \\\\pi}\\\\right) F=I_{\\\\mathrm{CM}} \\\\alpha_{\\\\mathrm{CM}}\\n$$\\n\\nTo compute the moment of inertia of the disc about its centre of mass, we use Steiner's theorem:\\n\\n$$\\nI_{\\\\mathrm{CM}}=\\\\frac{M R^{2}}{2}-M\\\\left(\\\\frac{4 R}{3 \\\\pi}\\\\right)^{2}\\n$$\\n\\nso the $\\\\tau=I \\\\alpha$ equation becomes\\n\\n$$\\n\\\\left(\\\\frac{4 R}{3 \\\\pi}\\\\right) F=\\\\left[\\\\frac{M R^{2}}{2}-M\\\\left(\\\\frac{4 R}{3 \\\\pi}\\\\right)^{2}\\\\right] \\\\alpha_{\\\\mathrm{CM}} \\\\Rightarrow \\\\alpha_{\\\\mathrm{CM}}=\\\\frac{\\\\frac{4 F R}{3 \\\\pi}}{M R^{2}\\\\left(\\\\frac{1}{2}-\\\\frac{16}{9 \\\\pi^{2}}\\\\right)}\\n$$\\n\\nUsing kinematics equation for rotational motion, we have\\n\\n$$\\n\\\\vec{a}_{B}=\\\\vec{a}_{\\\\mathrm{CM}}+\\\\vec{\\\\alpha}_{\\\\mathrm{CM}} \\\\times \\\\overrightarrow{\\\\mathrm{CB}}\\n$$\\n\\nSubstituting the values of $\\\\overrightarrow{\\\\mathrm{CB}}=R \\\\hat{i}-\\\\frac{4 R}{3 \\\\pi} \\\\hat{j}$ and $\\\\alpha_{\\\\mathrm{CM}}=\\\\frac{\\\\frac{4 F R}{3 \\\\pi}}{M R^{2}\\\\left(\\\\frac{1}{2}-\\\\frac{16}{9 \\\\pi^{2}}\\\\right)} \\\\hat{k}$ we get\\n\\n$$\\na_{B}=\\\\frac{F}{m}\\\\left[\\\\left(1+\\\\frac{1}{-1+\\\\frac{9 \\\\pi^{2}}{32}}\\\\right) \\\\hat{i}+\\\\frac{2}{3 \\\\pi\\\\left(\\\\frac{1}{2}+\\\\frac{16}{9 \\\\pi^{2}}\\\\right)} \\\\hat{j}\\\\right]=15.9395 \\\\mathrm{~m} / \\\\mathrm{s}^{2}\\n$$\\n\\nand we are done.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_28": {
    "pid": "phy_28",
    "question": "A frictionless track contains a loop of radius $R=0.5 \\mathrm{~m}$. Situated on top of the track lies a small ball of mass $m=2 \\mathrm{~kg}$ at a height $h$. It is then dropped and collides with another ball of mass $M=5 \\mathrm{~kg}$.\n\n<image_1>\n\nThe coefficient of restitution for this collision is given as $e=\\frac{1}{2}$. Now consider a different alternative. Now let the circular loop have a uniform coefficient of friction $\\mu=0.6$, while the rest of the path is still frictionless. Assume that the balls can once again collide with a restitution coefficient of $e=\\frac{1}{2}$. Considering the balls to be point masses, find the minimum value of $h$ such that the ball of mass $M$ would be able to move all the way around the loop. Both balls can be considered as point masses.",
    "options": [
      "38.4 \\, \\text{m}",
      "98.1",
      "0.525 \\, \\text{m}",
      "72.902"
    ],
    "answer": "D",
    "solution": "['Let the angle formed by $M$ at any moment of time be angle $\\\\theta$ with the negative y-axis. The normal force experienced by $M$ is just\\n$$\\nN=M g \\\\cos \\\\theta+M \\\\frac{v(\\\\theta)^{2}}{R}\\n$$\\n\\nby balancing the radial forces at this moment. Now, applying the work energy theorem, we have\\n\\n$$\\n\\\\begin{gathered}\\n\\\\int-\\\\mu\\\\left[M g \\\\cos \\\\theta+M \\\\frac{v(\\\\theta)^{2}}{R}\\\\right] R \\\\mathrm{~d} \\\\theta=\\\\frac{1}{2} M v(\\\\theta)^{2}-\\\\frac{1}{2} M v_{0}^{2}+M g R(1-\\\\cos \\\\theta) \\\\\\\\\\n\\\\Rightarrow-\\\\mu\\\\left[M g \\\\cos \\\\theta+M \\\\frac{v(\\\\theta)^{2}}{R}\\\\right] R=\\\\frac{M}{2} \\\\frac{\\\\mathrm{d}\\\\left(v(\\\\theta)^{2}\\\\right)}{\\\\mathrm{d} \\\\theta}+M g R \\\\sin \\\\theta\\n\\\\end{gathered}\\n$$\\n\\nRearranging, we have\\n\\n$$\\n\\\\frac{\\\\left.\\\\mathrm{d}\\\\left(v(\\\\theta)^{2}\\\\right)\\\\right)}{\\\\mathrm{d} \\\\theta}+2 \\\\mu v(\\\\theta)^{2}=-2 g R(\\\\sin \\\\theta+\\\\mu \\\\cos \\\\theta)\\n$$\\n\\nLet $v^{2}(\\\\theta)=y$. Thus we have a first order linear ODE of the form\\n\\n$$\\n\\\\frac{\\\\mathrm{d} y}{\\\\mathrm{~d} \\\\theta}+P(\\\\theta) y=Q(\\\\theta)\\n$$\\n\\nThis is easily solvable using the integrating factor $e^{\\\\int P(\\\\theta) \\\\mathrm{d} \\\\theta}$. Here the integrating factor is\\n\\n$$\\ne^{\\\\int 2 \\\\mu \\\\mathrm{d} \\\\theta}=e^{2 \\\\mu \\\\theta}\\n$$\\n\\nSo multiplying by the integrating factor, we get\\n\\n$$\\n\\\\begin{gathered}\\n\\\\int \\\\mathrm{d}\\\\left(e^{2 \\\\mu \\\\theta} y\\\\right)=\\\\int-2 g R(\\\\sin \\\\theta+\\\\mu \\\\cos \\\\theta) e^{2 \\\\mu \\\\theta} \\\\mathrm{d} \\\\theta \\\\\\\\\\n\\\\Rightarrow y=\\\\frac{\\\\int-2 g R(\\\\sin \\\\theta+\\\\mu \\\\cos \\\\theta) e^{2 \\\\mu \\\\theta} \\\\mathrm{d} \\\\theta}{e^{2 \\\\mu \\\\theta}}\\n\\\\end{gathered}\\n$$\\n\\nNow we use the well known integrals\\n\\n$$\\n\\\\begin{aligned}\\n& \\\\int e^{a x} \\\\sin x \\\\mathrm{~d} x=\\\\frac{e^{a x}}{1+a^{2}}(a \\\\sin x-\\\\cos x) \\\\\\\\\\n& \\\\int e^{a x} \\\\cos x \\\\mathrm{~d} x=\\\\frac{e^{a x}}{1+a^{2}}(a \\\\cos x+\\\\sin x)\\n\\\\end{aligned}\\n$$\\n\\n(These integrals can be computed using integration by parts.) Thus, plugging and chugging these integration formulas into our expression for $y$ and integrating from $\\\\theta=0$ to $\\\\theta=\\\\phi$, we have upon solving\\n\\n$$\\nv^{2}(\\\\phi)-v_{0}^{2}=\\\\frac{-2 g R}{1+4 \\\\mu^{2}}\\\\left[\\\\left(3 \\\\mu \\\\sin \\\\phi+\\\\left(2 \\\\mu^{2}-1\\\\right) \\\\cos \\\\phi-\\\\left(2 \\\\mu^{2}-1\\\\right) e^{-2 \\\\mu \\\\phi}\\\\right]\\\\right.\\n$$\\n\\nwhere $v_{0}$ is the velocity at $\\\\phi=0$. Solving gives us the velocity as a function of angle covered\\n\\n$$\\nv(\\\\phi)=\\\\sqrt{v_{0}^{2}-\\\\frac{2 g R}{1+4 \\\\mu^{2}}\\\\left[\\\\left(3 \\\\mu \\\\sin \\\\phi+\\\\left(2 \\\\mu^{2}-1\\\\right) \\\\cos \\\\phi-\\\\left(2 \\\\mu^{2}-1\\\\right) e^{-2 \\\\mu \\\\phi}\\\\right]\\\\right.}\\n$$\\n\\nBut to cover a complete circle, at the top most point\\n\\n$$\\nN=m g-\\\\frac{m v^{2}(\\\\pi)}{R} \\\\geq 0 \\\\Rightarrow v(\\\\pi) \\\\leq \\\\sqrt{g R}\\n$$\\n\\nThus\\n\\n$$\\nv_{0} \\\\leq \\\\sqrt{g R\\\\left[1+\\\\frac{2\\\\left(1-2 \\\\mu^{2}\\\\right)}{1+4 \\\\mu^{2}}\\\\left(1+e^{-2 \\\\mu \\\\pi}\\\\right)\\\\right]}\\n$$\\n\\n\\n\\nFrom the previous expression,\\n\\n$$\\nv_{0}=\\\\frac{m(1+e) \\\\sqrt{2 g h}}{M+m} \\\\geq \\\\sqrt{g R\\\\left[1+\\\\frac{2\\\\left(1-2 \\\\mu^{2}\\\\right)}{1+4 \\\\mu^{2}}\\\\left(1+e^{-2 \\\\mu \\\\pi}\\\\right)\\\\right]}\\n$$\\n\\nHence\\n\\n$$\\nh \\\\geq \\\\frac{R(M+m)^{2}}{2 m^{2}(1+e)^{2}}\\\\left[1+\\\\frac{2\\\\left(1-2 \\\\mu^{2}\\\\right)}{1+4 \\\\mu^{2}}\\\\left(1+e^{-2 \\\\mu \\\\pi}\\\\right)\\\\right]\\n$$\\n\\nWe get $h \\\\geq 72.902 \\\\mathrm{~m}$ and we are done.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_29": {
    "pid": "phy_29",
    "question": "A bicycle wheel of mass $M=2.8 \\mathrm{~kg}$ and radius $R=0.3 \\mathrm{~m}$ is spinning with angular velocity $\\omega=5 \\mathrm{rad} / \\mathrm{s}$ around its axis in outer space, and its center is motionless. Assume that it has all of its mass uniformly concentrated on the rim. A long, massless axle is attached to its center, extending out along its axis. A ball of mass $m=1.0 \\mathrm{~kg}$ moves at velocity $v=2 \\mathrm{~m} / \\mathrm{s}$ parallel to the plane of the wheel and hits the axle at a distance $h=0.5 \\mathrm{~m}$ from the center of the wheel. Assume that the collision is elastic and instantaneous, and that the ball's trajectory (before and after the collision) lies on a straight line.\n\n<image_1>\n\nFind the time it takes for the axle to return to its original orientation. Answer in seconds and round to three significant figures.",
    "options": [
      "0.458",
      "3.77 \\, \\mathrm{seconds}",
      "0.568",
      "0.658"
    ],
    "answer": "C",
    "solution": "[\"After the collision, let the wheel have speed $v_{1}$ and the ball have speed $v_{2}$. Conserving momentum, energy, and angular momentum gives:\\n$$\\n\\\\begin{gathered}\\nm v=M v_{1}+m v_{2} \\\\\\\\\\n\\\\frac{1}{2} m v^{2}+\\\\frac{1}{2} M R^{2} \\\\omega^{2}=\\\\frac{1}{2} M v_{1}^{2}+\\\\frac{1}{2} m v_{2}^{2}+\\\\frac{1}{2} M R^{2} \\\\omega^{2}+\\\\frac{1}{2} \\\\cdot \\\\frac{1}{2} M R^{2} \\\\omega_{1}^{2} \\\\\\\\\\nm\\\\left(v-v_{2}\\\\right) h=\\\\frac{1}{2} M R^{2} \\\\omega_{1}\\n\\\\end{gathered}\\n$$\\nwhere $\\\\omega_{1}$ is the angular velocity (after collision) of the wheel in the direction perp. to the axis and the velocity of the ball.\\n\\n\\n\\nSolving for $\\\\omega_{1}$, we get\\n$$\\n\\\\omega_{1}=\\\\frac{4 h m v}{m\\\\left(R^{2}+2 h^{2}\\\\right)+M R^{2}}\\n$$\\nNow, we realize that the angular momentum of the wheel is given by $I_{x} \\\\omega \\\\hat{x}+I_{y} \\\\omega_{1} \\\\hat{y}$ where the wheel's axis is the $\\\\mathrm{x}$-axis and the $\\\\mathrm{y}$-axis is in the direction of $\\\\omega_{1}$. Since angular momentum is conserved, the wheel must precess about its angular momentum vector. Let $\\\\hat{L}$ represent the direction of the angular momentum vector. To find the rate of precession, we can decompose the angular velocity vector $\\\\omega \\\\hat{x}+\\\\omega_{1} \\\\hat{y}$ into a $\\\\hat{L}$ component and a $\\\\hat{x}$ component. Since $I_{x}=2 I_{y}$, the $\\\\hat{L}$ component is $\\\\sqrt{(2 \\\\omega)^{2}+\\\\omega_{1}^{2}}$, resulting in a precession period of\\n$$\\nT=\\\\frac{\\\\pi}{\\\\sqrt{\\\\omega^{2}+\\\\frac{\\\\omega_{1}^{2}}{4}}}=0.568 s\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_30": {
    "pid": "phy_30",
    "question": "A small toy car rolls down three ramps with the same height and horizontal length, but different shapes, starting from rest. The car stays in contact with the ramp at all times and no energy is lost. Order the ramps from the fastest to slowest time it takes for the toy car to drop the full $1 \\mathrm{~m}$. For example, if ramp 1 is the fastest and ramp 3 is the slowest, then enter 123 as your answer choice.\n\nFigure 1\n\n<image_1>\n\nFigure 2\n\n<image_2>\n\nFigure 3\n\n<image_3>",
    "options": [
      "231",
      "123",
      "213",
      "321"
    ],
    "answer": "C",
    "solution": "['One can solve this by finding the time it takes for each ramp. For ramp 1:\\n$$\\n\\\\begin{aligned}\\n\\\\sqrt{2} & =\\\\frac{1}{2} g \\\\sin \\\\left(45^{\\\\circ}\\\\right) t^{2} \\\\\\\\\\n\\\\Longrightarrow t & =0.639 \\\\mathrm{~s}\\n\\\\end{aligned}\\n$$\\n\\nFor ramps 2, let the length of the dashed region be $x$. Then:\\n\\n$$\\nx+x / \\\\tan \\\\left(30^{\\\\circ}\\\\right)=1 \\\\Longrightarrow x=0.366 \\\\mathrm{~m}\\n\\\\tag{1}\\n$$\\n\\nDue to symmetry, both the steep and shallow regions of both ramps 2 and 3 have a length of $x / \\\\cos \\\\left(60^{\\\\circ}\\\\right)=0.732 \\\\mathrm{~m}$. This results in a time for ramp 2 as:\\n\\n$$\\n\\\\begin{aligned}\\n& 0.732=\\\\frac{1}{2} g \\\\sin \\\\left(60^{\\\\circ}\\\\right) t_{1}^{2} \\\\Longrightarrow t_{1}=0.415 \\\\mathrm{~s} \\\\\\\\\\n& 0.732=\\\\sqrt{2 g(1-x)} t_{2}+\\\\frac{1}{2} g \\\\sin \\\\left(30^{\\\\circ}\\\\right) t_{2}^{2} \\\\Longrightarrow t_{2}=0.184 \\\\mathrm{~s}\\n\\\\end{aligned}\\n$$\\n\\nfor a total time of $t_{1}+t_{2}=0.599 \\\\mathrm{~s}$. For ramp 3 ,\\n\\n$$\\n\\\\begin{aligned}\\n& 0.732=\\\\frac{1}{2} g \\\\sin \\\\left(30^{\\\\circ}\\\\right) t_{1}^{2} \\\\Longrightarrow t_{1}=0.546 \\\\mathrm{~s} \\\\\\\\\\n& 0.732=\\\\sqrt{2 g(1-x)} t_{2}+\\\\frac{1}{2} g \\\\sin \\\\left(60^{\\\\circ}\\\\right) t_{2}^{2} \\\\Longrightarrow t_{2}=0.206 \\\\mathrm{~s}\\n\\\\end{aligned}\\n$$\\n\\nwhich gives a total time of $t_{1}+t_{2}=0.752 \\\\mathrm{~s}$. From fastest to slowest, the answer becomes 213 . Note that this answer is easily guessable via intuition.']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_31": {
    "pid": "phy_31",
    "question": "A simple crane is shown in the below diagram, consisted of light rods with length $1 \\mathrm{~m}$ and $\\sqrt{2} \\mathrm{~m}$. The end of the crane is supporting a $5 \\mathrm{kN}$ object. Point $B$ is known as a \"pin.\" It is attached to the main body and can exert both a vertical and horizontal force. Point $A$ is known as a \"roller\" and can only exert vertical forces. Rods can only be in pure compression or pure tension.\n<image_1>\n\nIn $\\mathrm{kN}$, what is the force experienced by the rod $C D$ ? Express a positive number if the member is in tension and a negative number if it is in compression.",
    "options": [
      "15",
      "10",
      "5 \\mathrm{kN}",
      "-5"
    ],
    "answer": "B",
    "solution": "['One naive method (though perfectly valid) is to solve for each member individually, starting from the two rods that connect to the $5 \\\\mathrm{kN}$ weight. At each joint, we can write out force equilibrium equations in the vertical and horizontal directions, and solve a system of linaer equations to get the force in $C D$.\\nInstead, we can solve for this force in one line. Consider a horizontal slice right above point $D$.\\n\\n\\n\\n<img_4293>\\n\\nSince the net force of this sub-element is still zero, we can do a force balance. The only external forces acting on this system is $E F, E C, C D$, and the $5 \\\\mathrm{kN}$ weight. If we do a torque balance about $E$, we get:\\n\\n$$\\n5(2 L)=C D(L)\\n\\\\tag{5}\\n$$\\n\\nwhere $L$ is the length of the rod. This immediately gives $C D=10 \\\\mathrm{kN}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_32": {
    "pid": "phy_32",
    "question": "A small block of mass $m$ and charge $Q$ is placed at rest on an inclined plane with a slope $\\alpha=40^{\\circ}$. The coefficient of friction between them is $\\mu=0.3$. A homogenous magnetic field of magnitude $B_{0}$ is applied perpendicular to the slope. The speed of the block after a very long time is given by $v=\\beta \\frac{m g}{Q B_{0}}$. Determine $\\beta$. Do not neglect the effects of gravity.\n<image_1>",
    "options": [
      "0.413",
      "0.7",
      "0.6",
      "0.9"
    ],
    "answer": "C",
    "solution": "['Create a free body diagram. The direction of the magnetic field (into or out of the page) does not matter as we only need to know the magnitude of the terminal velocity. In dynamic equilibrium, we have three forces along the plane: the component of gravity along the plane, friction, and the magnetic force. The component of gravity along the plane is $m g \\\\sin \\\\alpha$. Friction has the magnitude $f=\\\\mu m g \\\\cos \\\\alpha$. The magnetic force has magnitude $F_{B}=Q v B_{0}$. At the terminal velocity, these forces are balanced. To finish, note that friction and the magnetic force are perpendicular so the magnitude of their vector sum is equal to the component of gravity along the plane. By the Pythagorean Theorem,\\n$$\\nF_{B}^{2}+f^{2}=(m g \\\\sin \\\\alpha)^{2} \\\\Longrightarrow v=\\\\frac{m g}{Q B_{0}} \\\\sqrt{\\\\sin ^{2} \\\\alpha-\\\\mu^{2} \\\\cos ^{2} \\\\alpha}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_33": {
    "pid": "phy_33",
    "question": "A sprinkler fountain is in the shape of a semi-sphere that spews out water from all angles at a uniform speed $v$ such that without the presence of wind, the wetted region around the fountain forms a circle in the $X Y$ plane with the fountain centered on it.\nNow suppose there is a constant wind blowing in a direction parallel to the ground such that the force acting on each water molecule is proportional to their weight. The wetted region forms the shape below where the fountain is placed at $(0,0)$. Determine the exit speed of water $v$ in meters per second. Round to two significant digits. All dimensions are in meters.\n\n<image_1>",
    "options": [
      "v=\\sqrt{k \\cdot g \\cdot 2x}",
      "4.4",
      "2.5",
      "14"
    ],
    "answer": "C",
    "solution": "[\"Method One: Let us look at only the major axis $x$. The wind provides a constant acceleration along $x$, which makes this problem equivalent to throwing a ball up and down a ramp tilted at an angle of $\\\\beta=\\\\tan \\\\frac{a}{g}$. The furthest point along the $x$ axis represents the maximum distance you can throw an object up and down this ramp. This distance can be derived to be:\\n\\n$$\\nd_{\\\\mathrm{optimal}}=\\\\frac{v^{2} / g}{1+\\\\sin \\\\beta}\\n\\\\tag{6}\\n$$\\n\\n\\n\\nwhere $\\\\beta$ is negative if it's tilting downwards. We get the systems of equations:\\n\\n$$\\n\\n\\\\frac{v^{2} / g_{\\\\mathrm{eff}}}{1+\\\\sin \\\\beta}=0.25+0.25 \\\\cdot \\\\frac{13}{20}\\n\\\\tag{7}\\n$$\\n$$\\n\\\\frac{v^{2} / g_{\\\\mathrm{eff}}}{1-\\\\sin \\\\beta}=1\\n\\n\\\\tag{8}\\n$$\\n\\nwhere:\\n\\n$$\\ng_{\\\\mathrm{eff}}=g / \\\\cos \\\\beta\\n\\\\tag{9}\\n$$\\n\\nand solving gives $v=2.51 \\\\mathrm{~m} \\\\mathrm{~s}^{-1}$.\\n\\nMethod Two: Looking at the minor axis is much easier. The wind doesn't contribute in this direction, so we know the furthest point must have a vertical displacement of $d_{\\\\max }=\\\\frac{v^{2}}{g}$. We measure $d_{\\\\max }=0.50+0.25 \\\\cdot \\\\frac{11}{20}$ and solving for $v$ gives $d_{\\\\max }=2.50 \\\\mathrm{~m}$.\\n\\nNote that the answers aren't exactly the same due to measurement inaccuracies, so we asked for two significant digits. An earlier version of the question had the same diagram, but the labels were accidentally shifted. This did not affect the final answer.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_34": {
    "pid": "phy_34",
    "question": "Poncho is a very good player of the legendary carnival game known as Pico-Pico. Its setup consists of a steel ball, represented by a point mass, of negligible radius and a frictionless vertical track. The goal of Pico-Pico is to flick the ball from the beginning of the track (point $A$ ) such that it is able to traverse through the track while never leaving the track, successfully reaching the end (point $B)$. The most famous track design is one of parabolic shape; specifically, the giant track is of the shape $h(x)=5-2 x^{2}$ in meters. The starting and ending points of the tracks are where the two points where the track intersects $y=0$. If $\\left(v_{a}, v_{b}\\right]$ is the range of the ball's initial velocity $v_{0}$ that satisfies the winning condition of Pico-Pico, help Poncho find $v_{b}-v_{a}$. This part is depicted below:\n<image_1>",
    "options": [
      "5.59 \\mathrm{~m}",
      "0.1231",
      "2",
      "3.86"
    ],
    "answer": "B",
    "solution": "['Using conservation of energy, the minimum initial velocity of the ball needed to pass the top of the track is $v_{a}=\\\\sqrt{2 g h}=9.9045 \\\\frac{\\\\mathrm{m}}{\\\\mathrm{s}}$. To find $v_{b}$, the centripetal force at all points on the track must be determined given the initial velocity.\\n$$\\n\\nF_{c} =\\\\frac{m v^{2}}{R}\\n\\\\tag{11}\\n$$\\n$$\\n=\\\\frac{m\\\\left(v_{b}^{2}-2 g h\\\\right)}{\\\\frac{\\\\left|1+\\\\left(\\\\frac{d}{d x} h(x)\\\\right)^{2}\\\\right|}{\\\\frac{d^{2}}{d x^{2}} h(x)}}\\n\\\\tag{12}\\n$$\\n$$\\n=\\\\frac{m\\\\left(v_{b}^{2}-2 g h\\\\right)}{\\\\frac{\\\\left|1+16 x^{2}\\\\right|^{\\\\frac{3}{2}}}{4}}\\n\\\\tag{13}\\n$$\\n\\nFor the boundary condition, the ball leaves if the normal force from the track on the ball $N=m g \\\\cos \\\\theta-F_{c}$ becomes 0.\\n\\n$$\\n\\\\begin{aligned}\\nm g \\\\cos \\\\theta-F_{c} & =0 \\\\\\\\\\nm g \\\\cos \\\\arctan (-4 x) & =\\\\frac{4 m\\\\left(v_{b}^{2}-2 g h\\\\right)}{\\\\left|1+16 x^{2}\\\\right|^{\\\\frac{3}{2}}} \\\\\\\\\\n\\\\frac{g}{\\\\left|1+16 x^{2}\\\\right|^{\\\\frac{1}{2}}} & =\\\\frac{4\\\\left(v_{b}^{2}-2 g h\\\\right)}{\\\\left|1+16 x^{2}\\\\right|^{\\\\frac{3}{2}}} \\\\\\\\\\ng & =\\\\frac{4\\\\left(v_{b}^{2}-2 g h\\\\right)}{1+16 x^{2}} \\\\\\\\\\nv_{b \\\\max } & =\\\\sqrt{\\\\frac{g+16 g x^{2}}{4}+2 g h}\\n\\\\end{aligned}\\n$$\\n\\nFrom the derivation, $v_{b \\\\max }$ is the lowest at $x=0$. Thus,\\n\\n$$\\n\\\\begin{aligned}\\nv_{b \\\\max } & =\\\\sqrt{\\\\frac{g}{4}+2 g h} \\\\\\\\\\n& =10.0276 \\\\frac{\\\\mathrm{m}}{\\\\mathrm{s}}\\n\\\\end{aligned}\\n$$\\n\\nwhich is our desired $v_{b}$. The final answer, $v_{b}-v_{a}$, can be calculated.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_35": {
    "pid": "phy_35",
    "question": "Anyone who's had an apple may know that pieces of an apple stick together, when picking up one piece a second piece may also come with the first piece. The same idea is tried on a golden apple. Consider two uniform hemispheres with radius $r=4 \\mathrm{~cm}$ made of gold of density $\\rho_{g}=19300 \\mathrm{~kg} \\mathrm{~m}^{-3}$. The top half is nailed to a support and the space between is filled with water.\n<image_1>\n\nGiven that the surface tension of water is $\\gamma=0.072 \\mathrm{~N} \\mathrm{~m}^{-1}$ and that the contact angle between gold and water is $\\theta=10^{\\circ}$, what is the maximum distance between the two hemispheres so that the bottom half doesn't fall? Answer in millimeters.",
    "options": [
      "80.5 \\mathrm{~mm}",
      "0.0281",
      "0 \\, \\text{mm}",
      "0.281"
    ],
    "answer": "B",
    "solution": "['Let $h$ be the difference in height. There are 3 forces on the bottom hemisphere. The force from gravity, which has magnitude $\\\\frac{2}{3} \\\\pi \\\\rho_{g} g r^{3}$, the force from the surface tension, and the force from the pressure difference at the top and bottom. The pressure difference is given by the young-laplace equation,\\n$$\\n\\\\Delta P=\\\\gamma\\\\left(-\\\\frac{1}{r}+\\\\frac{2 \\\\cos \\\\theta}{h}\\\\right) \\\\approx \\\\frac{2 \\\\gamma \\\\cos \\\\theta}{h}\\n$$\\n\\nThe radii are found by some simple geometry. It is likely that $r$ will be much larger than the height, so we can neglect the $1 / r$ term. Now the force from surface tension is $2 \\\\pi r \\\\gamma \\\\sin \\\\theta$, since we take the vertical component. So we can now set the net force to 0 ,\\n\\n$$\\n\\\\frac{2}{3} \\\\pi \\\\rho_{g} g r^{3}=\\\\pi r^{2} \\\\Delta P+2 \\\\pi r \\\\gamma \\\\sin \\\\theta \\\\Longrightarrow \\\\frac{2}{3} \\\\rho_{g} g r^{2}=(2 r \\\\gamma \\\\cos \\\\theta) \\\\frac{1}{h}+2 \\\\gamma \\\\sin \\\\theta\\n$$\\n\\nThis is simple to solve,\\n\\n$$\\nh=\\\\frac{2 r \\\\gamma \\\\cos \\\\theta}{2 \\\\rho_{g} g r^{2} / 3-2 \\\\gamma \\\\sin \\\\theta}=2.81 \\\\times 10^{-5} \\\\mathrm{~m}=0.0281 \\\\mathrm{~mm}\\n$$\\n\\nThis is very small so our approximation from earlier is justified.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_36": {
    "pid": "phy_36",
    "question": "In the following two problems we will look at shooting a basketball. Model the basketball as an elastic hollow sphere with radius 0.1 meters. Model the net and basket as shown below, dimensions marked. Neglect friction between the backboard and basketball, and assume all collisions are perfectly elastic.\n\n<image_1>\n\n\nFor this problem, you launch the basketball from the point that is 2 meters above the ground and 4 meters from the backboard as shown. You attempt to make a shot by hitting the basketball off the backboard as depicted above. What is the minimum initial speed required for the ball to make this shot?\nNote: For this problem, you may assume that the size of the ball is negligible.",
    "options": [
      "6.6 \\, \\text{m/s}",
      "7.19",
      "7.23",
      "8.07 \\, \\text{m/s}"
    ],
    "answer": "B",
    "solution": "[\"For this part, we regard the basketball as a point mass. Now to account for the backboard bounce, we reflect the hoop over the backboard. The problem is now equivalent to making it into the hoop that is 4.15 meters away now. So now we need to find the smallest velocity to reach this point. One way to do it is to use the safety parabola, which makes it so minimal calculations are needed, so we present that method here. However, this problem is also readily solvable with only basic kinematics.\\nThe point that the ball must hit (4.15 meters in front and 1 meter above) lies on the safety parabola when it is thrown at minimum speed. Since the focus of the safety parabola is the point of launch,\\n\\n\\n\\nthe directrix is\\n\\n$$\\n\\\\sqrt{1^{2}+4.15^{2}}=4.27 \\\\mathrm{~m}\\n$$\\n\\naway from the top of the hoop. The distance from the focus to the vertex of the parabola is then $(4.27+1) / 2=2.63 \\\\mathrm{~m}$. So the minimum velocity to go this height is given by\\n\\n$$\\n\\\\frac{v^{2}}{2 g}=2.63 \\\\mathrm{~m}\\n$$\\n\\nand that gives $v=7.19 \\\\mathrm{~m} / \\\\mathrm{s}$. There is one last bit we need to check to complete this problem. The basketball's trajectory has to actually be possible (i.e. it doesn't go underneath the rim). It is clearly less optimal intuitively. If it passes through the underside, it means that its apex of the trajectory is very near its target.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_37": {
    "pid": "phy_37",
    "question": "Consider a toilet paper roll with some length of it hanging off as shown. The toilet paper roll rests on a cylindrical pole of radius $r=1 \\mathrm{~cm}$ and the coefficient of static friction between the role and the pole is $\\mu=0.3$.\n\n<image_1>\n\nThe length of the paper hanging off has length $\\ell=30 \\mathrm{~cm}$ and the inner radius of the roll is $R_{i}=2 \\mathrm{~cm}$. The toilet paper has thickness $s=0.1 \\mathrm{~mm}$ and mass per unit length $\\lambda=5 \\mathrm{~g} / \\mathrm{m}$. What is the minimum outer radius $R_{o}$ such that the toilet paper roll remains static? Answer in centimeters.",
    "options": [
      "10.2",
      "6.73 \\, \\text{cm}",
      "2.061",
      "2.160"
    ],
    "answer": "C",
    "solution": "[\"Due to the length of toilet paper hanging off, the toilet paper will be slightly tilted, in order for torques to balance. The tilt isn't shown in the diagram, since it is meant to be found. So the tilted normal force has to be compensated by the frictional force, and just before slippage,\\n\\n\\nit will look something like:\\n\\n<img_4301>\\n\\nLet $\\\\theta=\\\\arctan \\\\mu$. So now balancing torques about the contact point, if $m$ is the mass of the toilet paper roll,\\n\\n$$\\nm g R_{i} \\\\sin \\\\theta=(\\\\ell \\\\lambda) g\\\\left(R_{o}-R_{i} \\\\sin \\\\theta\\\\right) .\\n$$\\n\\nAnd now we need $m$. The mass per unit area is $\\\\sigma=\\\\lambda / s$, so $m=\\\\pi\\\\left(R_{o}^{2}-R_{i}^{2}\\\\right) \\\\lambda / s$. So substituting this in,\\n\\n$$\\n\\\\frac{\\\\pi\\\\left(R_{o}^{2}-R_{i}^{2}\\\\right) \\\\lambda}{s} g R_{i} \\\\sin \\\\theta=\\\\ell \\\\lambda g\\\\left(R_{o}-R_{i} \\\\sin \\\\theta\\\\right)\\n$$\\n\\nSimplifying a bit,\\n\\n$$\\n\\\\pi\\\\left(R_{o}^{2}-R_{i}^{2}\\\\right) R_{i} \\\\sin \\\\theta=s \\\\ell\\\\left(R_{o}-R_{i} \\\\sin \\\\theta\\\\right) .\\n$$\\n\\nThis is a quadratic and we can just plug in the numbers and use the quadratic formula or use a graphing calculator to finish, yielding $R_{o}=2.061 \\\\mathrm{~cm}$.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_38": {
    "pid": "phy_38",
    "question": "In the circuit shown below, a capacitor $C=4 \\mathrm{~F}$, inductor $L=5 \\mathrm{H}$, and resistors $R_{1}=3 \\Omega$ and $R_{2}=2 \\Omega$ are placed in a diamond shape and are then fed an alternating current with peak voltage $V_{0}=1 \\mathrm{~V}$ of unknown frequency. Determine the magnitude of the maximum instantaneous output voltage shown in the diagram.\n<image_1>",
    "options": [
      "0.85",
      "0.65",
      "0.2 \\mathrm{~V}",
      "0.4 \\, \\text{V}"
    ],
    "answer": "B",
    "solution": "['We use the method of phasors. Consider the following phasor diagram:\\n<img_4316>\\n\\nWe define angles as $\\\\angle A P B=\\\\angle A Q B=\\\\gamma, \\\\angle A O B=2 \\\\gamma, \\\\angle B P Q=\\\\alpha, \\\\angle A Q P=\\\\beta$. Note that $\\\\overrightarrow{P A}=I_{2} \\\\omega L, \\\\overrightarrow{A Q}=I_{2} R, \\\\overrightarrow{P B}=I_{1} R_{1}, \\\\overrightarrow{B Q}=1 / I_{1} \\\\omega C$. We seek to maximize the length of $\\\\mathrm{AB}$. We can write via law of cosines that\\n\\n$$\\n\\\\mathrm{AB}=\\\\sqrt{r^{2}+r^{2}-2 r \\\\cos (2 \\\\gamma)}=2 r \\\\sin (\\\\gamma)\\n$$\\n\\nwhere $r=V_{0}$ is the radius of the circle of which phasors are inscribed in. Since $\\\\gamma=\\\\alpha+\\\\beta$, we can then rewrite the length of $\\\\mathrm{AB}$ to be\\n\\n$$\\n\\\\mathrm{AB}=r(\\\\cos \\\\alpha \\\\cos \\\\beta-\\\\sin \\\\alpha \\\\sin \\\\beta)=V_{0}\\\\left(\\\\frac{R_{1} R_{2}}{V_{0}^{2}}-\\\\frac{L}{C V_{0}^{2}}\\\\right) I_{1} I_{2}=V_{0}\\\\left(R_{1} R_{2}-\\\\frac{L}{C}\\\\right)\\\\left(\\\\frac{1}{\\\\left|Z_{1}\\\\right|\\\\left|Z_{2}\\\\right|}\\\\right)\\n$$\\n\\nwhere the product of both complex exponentials is simply\\n\\n$$\\n\\\\left|Z_{1}\\\\right|\\\\left|Z_{2}\\\\right|=\\\\sqrt{\\\\omega^{2} L^{2}+R_{2}^{2}} \\\\sqrt{\\\\frac{1}{\\\\omega^{2} C^{2}}+R_{1}^{2}}\\n$$\\n\\nwhich implies the best frequency of the circuit is $\\\\omega=\\\\sqrt{\\\\frac{R_{2}^{2}}{L^{2} R_{1} C}}$. This means with algebra, the lowest value of $\\\\left|Z_{1}\\\\right|\\\\left|Z_{2}\\\\right|=\\\\frac{L}{C}-R_{1} R_{2}$. Hence, the maximum value of $\\\\mathrm{AB}$ is simply\\n\\n$$\\n\\\\mathrm{AB}=V_{0}\\\\left(\\\\frac{R_{1} R_{2}-\\\\frac{L}{C}}{R_{1} R_{2}+\\\\frac{L}{C}}\\\\right)\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_39": {
    "pid": "phy_39",
    "question": "A uniform bar of length $l$ and mass $m$ is connected to a very long thread of negligible mass suspended from a ceiling. It is then rotated such that it is vertically upside down and then released. Initially, the rod is in unstable equilibrium. As it falls down, the minimum tension acting on the thread over the rod's entire motion is given by $\\alpha m g$. Determine $\\alpha$.\n<image_1>",
    "options": [
      "0.156",
      "0.165",
      "\\alpha = 2",
      "5"
    ],
    "answer": "B",
    "solution": "['First note that the thread is given to be very long. Therefore, only vertical tension and gravitational forces act on the rod allowing for its center of mass to move in a straight vertical line. Using this fact, we can now write the acceleration of the rod in terms of angular velocity $\\\\omega$ and angular acceleration $\\\\varepsilon$. Let the angle of the rod at any moment to the vertical be $\\\\varphi$. For simplicity, we define the length of the rod to be $2 l$. Then, by defining the coordinate $y$ to be the change in vertical length of the rod where $y=l \\\\cos \\\\varphi$, one can write for varying $\\\\varphi \\\\in[\\\\varphi, \\\\varphi+\\\\mathrm{d} \\\\varphi)$ that $l \\\\cos (\\\\varphi+\\\\mathrm{d} \\\\varphi)=y+\\\\mathrm{d} y \\\\Longrightarrow \\\\mathrm{d} y=l \\\\sin \\\\varphi \\\\mathrm{d} \\\\varphi$. Thus, simple differentiation proves that\\n$$\\nv=l \\\\sin \\\\varphi \\\\omega \\\\Longrightarrow a=l \\\\varepsilon \\\\sin \\\\varphi+l \\\\omega^{2} \\\\cos \\\\varphi\\n$$\\n\\nWe can now also write conservation of energy to get another relationship between velocity and angular velocity. At any given moment, it can be written that $m g l=\\\\frac{1}{2} m v^{2}+\\\\frac{1}{2} I \\\\omega^{2}-m g l \\\\cos \\\\varphi$. Since $I=\\\\frac{1}{2} m(2 l)^{2}=\\\\frac{1}{3} m l^{2}$, then\\n\\n$$\\nm g l(1+\\\\cos \\\\varphi)=m l^{2} \\\\omega^{2}\\\\left(\\\\frac{1}{2} \\\\sin ^{2} \\\\varphi+\\\\frac{1}{6}\\\\right)\\n$$\\n\\nOur third equation comes from the fact that the tension on the rod at any moment can be written as $T=m g-m a \\\\Longrightarrow m a=m g-T$. We can finally get a fourth equation by equating torques such that $\\\\frac{1}{3} m l^{2} \\\\varepsilon=T l \\\\sin \\\\varphi$. With these four equations, simple algebra yields the tension at any point is\\n\\n$$\\nT(\\\\varphi)=\\\\frac{1+(3 \\\\cos \\\\varphi-1)^{2}}{\\\\left(1+3 \\\\sin ^{2} \\\\varphi\\\\right)^{2}} m g \\\\Longrightarrow T_{\\\\min } \\\\approx 0.165 m g\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_40": {
    "pid": "phy_40",
    "question": "Colliding Conducting Slab A thin conducting square slab with side length $s=5 \\mathrm{~cm}$, initial charge $q=0.1 \\mu \\mathrm{C}$, and mass $m=100 \\mathrm{~g}$ is given a kick and sent bouncing between two infinite conducting plates separated by a distance $d=0.5 \\mathrm{~cm} \\ll s$ and with surface charge density $\\pm \\sigma= \\pm 50 \\mu \\mathrm{C} / \\mathrm{m}^{2}$. After a long time it is observed exactly in the middle of the two plates to be traveling with velocity of magnitude $v=3 \\mathrm{~m} / \\mathrm{s}$ and direction $\\theta=30^{\\circ}$ with respect to the horizontal line parallel to the plates. How many collisions occur after it has traveled a distance $L=15 \\mathrm{~m}$ horizontally from when it was last observed? Assume that all collisions are elastic, and neglect induced charges. Note that the setup is horizontal so gravity does not need to be accounted for.\n<image_1>",
    "options": [
      "25723",
      "25273",
      "865",
      "1730"
    ],
    "answer": "B",
    "solution": "[\"After the first collision, the charge approaches a constant magnitude. Let's look at a collision with the plate at charge $q$ hitting the $-\\\\sigma$ plate. Since the slab is thin, to keep the conducting surface an equipotential, the charge on the conduting slab has to become $-\\\\sigma s^{2}$. The initial charge doesn't matter because the plates are infinite. So the charge is $-\\\\sigma s^{2}$ after leaving the negative plate and $+\\\\sigma s^{2}$ after leaving the positive plate.\\nNow the acceleration always has a constant magnitude, which is directed toward the plate it is traveling to, which we can find using $F=m a$,\\n\\n$$\\n\\\\left(\\\\sigma s^{2}\\\\right) \\\\frac{\\\\sigma}{\\\\epsilon_{0}}=m a \\\\Longrightarrow a=\\\\frac{\\\\sigma^{2} s^{2}}{\\\\epsilon_{0} m}=7.06 \\\\mathrm{~m} / \\\\mathrm{s}^{2}\\n$$\\n\\n\\n\\nThen here we can use the trick of reflecting over the plates, and now it's a basic kinematics problem. The time to travel $L$ is $t=\\\\frac{L}{v \\\\cos \\\\theta}$, and then the distance it travels vertically is\\n\\n$$\\ny=v \\\\sin \\\\theta \\\\frac{L}{v \\\\cos \\\\theta}+\\\\frac{1}{2} a\\\\left(\\\\frac{L}{v \\\\cos \\\\theta}\\\\right)^{2}=126.36 \\\\mathrm{~m}\\n$$\\n\\nAnd since $25272 d+d / 2 \\\\approx 87.129$, the number of collisions is 25273 .\"]",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_41": {
    "pid": "phy_41",
    "question": "Spinning Cylinder Adithya has a solid cylinder of mass $M=10 \\mathrm{~kg}$, radius $R=0.08 \\mathrm{~m}$, and height $H=0.20 \\mathrm{~m}$. He is running a test in a chamber on Earth over a distance of $d=200 \\mathrm{~m}$ as shown below. Assume that the physical length of the chamber is much greater than $d$ (i.e. the chamber extends far to the left and right of the testing area). The chamber is filled with an ideal fluid with uniform density $\\rho=700 \\mathrm{~kg} / \\mathrm{m}^{3}$. Adithya's cylinder is launched with linear velocity $v=10 \\mathrm{~m} / \\mathrm{s}$ and spins counterclockwise with angular velocity $\\omega$. Adithya notices that the cylinder continues on a horizontal path until the end of the chamber. Find the angular velocity $\\omega$. Do not neglect forces due to fluid pressure differences. Note that the diagram presents a side view of the chamber (i.e. gravity is oriented downwards with respect to the diagram).\n<image_1>\n\nAssume the following about the setup and the ideal fluid:\n\n- fluid flow is steady in the frame of the center of mass of the cylinder\n- the ideal fluid is incompressible, irrotational, and has zero viscosity\n- the angular velocity of the cylinder is approximately constant during its subsequent motion\n\nHint: For a uniform cylinder of radius $R$ rotating counterclockwise at angular velocity $\\omega$ situated in an ideal fluid with flow velocity $u$ to the right far away from the cylinder, the velocity potential $\\Phi$ is given by\n\n$$\n\\Phi(r, \\theta)=u r \\cos \\theta+u \\frac{R^{2}}{r} \\cos \\theta+\\frac{\\Gamma \\theta}{2 \\pi}\n$$\n\nwhere $(r, \\theta)$ is the polar coordinate system with origin at the center of the cylinder. $\\Gamma$ is the circulation and is equal to $2 \\pi R^{2} \\omega$. The fluid velocity is given by\n\n$$\n\\mathbf{v}=\\nabla \\Phi=\\frac{\\partial \\Phi}{\\partial r} \\hat{\\mathbf{r}}+\\frac{1}{r} \\frac{\\partial \\Phi}{\\partial \\theta} \\hat{\\theta}\n$$",
    "options": [
      "1.25",
      "0.348 \\, \\mathrm{rad/s}",
      "1.52",
      "54.3 \\, \\text{rad/s}"
    ],
    "answer": "A",
    "solution": "[\"We will work in the reference frame of the center of mass of the cylinder because the fluid flow is steady in this reference frame. The key intuition here is that the magnitude of the fluid velocity above the cylinder will be higher on the top because the tangential velocity of the cylinder is in the same direction as the velocity of the fluid on the top. By Bernoulli's principle, this means that the pressure on the top is lower than the pressure on the bottom, which will create a lift force on the cylinder.\\nWith the given theory, we can model this quantitatively. In our chosen reference frame, the water\\n\\n\\n\\nmoves with velocity $v$ to the left. The velocity potential around a cylinder with radius $R$ is\\n\\n$$\\n\\\\Phi(r, \\\\theta)=-v r \\\\cos \\\\theta-v \\\\frac{R^{2}}{r} \\\\cos \\\\theta+R^{2} \\\\omega \\\\theta\\n$$\\n\\nTherefore, we find\\n\\n$$\\n\\\\mathbf{v}=\\\\nabla \\\\Phi=\\\\frac{\\\\partial \\\\Phi}{\\\\partial r} \\\\hat{\\\\mathbf{r}}+\\\\frac{1}{r} \\\\frac{\\\\partial \\\\Phi}{\\\\partial \\\\theta} \\\\hat{\\\\theta}=-v\\\\left(1-\\\\frac{R^{2}}{r^{2}}\\\\right) \\\\cos \\\\theta \\\\hat{\\\\mathbf{r}}+\\\\left(v\\\\left(1+\\\\frac{R^{2}}{r^{2}}\\\\right) \\\\sin \\\\theta+R \\\\omega\\\\right) \\\\hat{\\\\theta}\\n$$\\n\\nAs expected from boundary conditions, the radial velocity vanishes when $r=R$. Furthermore, on the surface of the cylinder, we have the tangential velocity of the fluid is $2 v \\\\sin \\\\theta+R \\\\omega$ in the counterclockwise direction. Consider points on the cylinder at angles $\\\\theta$ and $-\\\\theta$. By Bernoulli's principle (ignoring the height difference which will be accounted with the buoyant force),\\n\\n$$\\np_{-\\\\theta}-p_{\\\\theta}=\\\\frac{1}{2} \\\\rho\\\\left((2 v \\\\sin \\\\theta+R \\\\omega)^{2}-(-2 v \\\\sin \\\\theta+R \\\\omega)^{2}\\\\right)=4 \\\\rho v R \\\\omega \\\\sin \\\\theta\\n$$\\n\\nIf we integrate this result along the surface of the cylinder, we can find the lift force per unit length. Note that only the vertical components of the pressure will matter as the horizontal components cancel due to symmetry. The vertical component of the pressure difference is then $4 \\\\rho v r_{0} \\\\omega \\\\sin ^{2} \\\\theta$. Thus, the lift force per unit length is\\n\\n$$\\n\\\\frac{F_{\\\\text {lift }}}{H}=\\\\int_{0}^{\\\\pi} 4 \\\\rho v R \\\\omega \\\\sin ^{2}(\\\\theta)(R d \\\\theta)=2 \\\\pi \\\\rho \\\\omega v R^{2}\\n$$\\n\\nThe total left force is\\n\\n$$\\nF_{\\\\text {lift }}=2 \\\\pi \\\\rho R^{2} H \\\\omega v \\\\text {. }\\n$$\\n\\nThe gravitational force is $M g$, and the buoyant force is $\\\\pi R^{2} H \\\\rho g$. Therefore, we must have\\n\\n$$\\n\\\\pi R^{2} H \\\\rho g+2 \\\\pi \\\\rho R^{2} H \\\\omega v=M g\\n$$\\n\\nSolving for $\\\\omega$, we obtain\\n\\n$$\\n\\\\omega=\\\\frac{M g}{2 \\\\pi R^{2} H \\\\rho v}-\\\\frac{g}{2 v}\\n$$\\n\\n$1.25 \\\\mathrm{~s}^{-1}$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_42": {
    "pid": "phy_42",
    "question": "Consider a rectangular loop made of superconducting material with length $\\ell=200 \\mathrm{~cm}$ and width $w=2 \\mathrm{~cm}$. The radius of this particular wire is $r=0.5 \\mathrm{~mm}$. This superconducting rectangular loop initially has a current $I_{1}=5 \\mathrm{~A}$ in the counterclockwise direction as shown in the figure below. This rectangular loop is situated a distance $d=1 \\mathrm{~cm}$ above an infinitely long wire that initially contains no current. Suppose that the current in the infinitely long wire is increased to some current $I_{2}$ such that there is an attractive force $F$ between the rectangular loop and the long wire. Find the maximum possible value of $F$. Write your answer in newtons.\nHint: You may neglect the magnetic field produced by the vertical segments in the rectangular loop.\n\n<image_1>",
    "options": [
      "0.1 \\, \\text{N}",
      "2 \\times 10^{-4}",
      "0.001 \\, \\text{N}",
      "1.12 \\times 10^{-3}"
    ],
    "answer": "D",
    "solution": "[\"The key idea is that the superconducting loop must have constant flux. If it did not, by Faraday's Law, an emf\\n$$\\n\\\\mathcal{E}=-\\\\frac{d \\\\Phi}{d t}\\n$$\\n\\nwould be generated in the loop. Since superconducting materials have no resistance, this would imply an infinite current, hence a contradiction.\\n\\nWe will first compute the flux through the rectangular loop when there is a current $I_{1}$. Since $w \\\\ll \\\\ell$, we can assume that the vertical segments produce negligible amounts of magnetic field. We can furthermore approximate the field produced by one of the horizontal wires a distance $r$ away as\\n\\n\\n\\n$\\\\frac{\\\\mu_{0} I}{2 \\\\pi r}$ (this is valid for an infinitely long wire, and therefore is also valid in the regime where $w \\\\ll \\\\ell$ ).\\n\\nThus, the total flux through the rectangular loop when there is a current $I_{1}$ is\\n\\n$$\\n\\\\Phi_{1}=\\\\int_{r}^{w} B\\\\left(\\\\ell d r^{\\\\prime}\\\\right)=\\\\int_{r}^{w-r}\\\\left(\\\\frac{\\\\mu_{0} I_{1}}{2 \\\\pi r^{\\\\prime}}+\\\\frac{\\\\mu_{0} I_{1}}{2 \\\\pi\\\\left(w-r^{\\\\prime}\\\\right)}\\\\right) \\\\ell d r^{\\\\prime}=\\\\frac{\\\\mu_{0} I_{1} \\\\ell}{\\\\pi} \\\\ln \\\\left(\\\\frac{w}{r}\\\\right)\\n$$\\n\\nNote that the self inductance of the loop is $L=\\\\frac{\\\\Phi}{I_{1}}=\\\\frac{\\\\mu_{0} \\\\ell}{\\\\pi} \\\\ln \\\\left(\\\\frac{w}{r}\\\\right)$.\\n\\nNow, we will determine the flux through the rectangular loop due to the long current-carrying wire. This is\\n\\n$$\\n\\\\Phi_{2}=\\\\int_{d}^{d+w} \\\\frac{\\\\mu_{0} I_{2}}{2 \\\\pi r}(\\\\ell d r)=\\\\frac{\\\\mu_{0} I_{2} \\\\ell}{2 \\\\pi} \\\\ln \\\\left(\\\\frac{d+w}{d}\\\\right)\\n$$\\n\\nThe mutual inductance is $M=\\\\frac{\\\\Phi_{2}}{I_{2}}=\\\\frac{\\\\mu_{0} \\\\ell}{2 \\\\pi} \\\\ln \\\\left(\\\\frac{d+w}{d}\\\\right)$. In to maintain the same flux in the loop, the current will change to $I_{3}$ where\\n\\n$$\\nL I_{1}=M I_{2}+L I_{3}\\n$$\\n\\nor\\n\\n$$\\nI_{3}=I_{1}-\\\\frac{M}{L} I_{2}\\n$$\\n\\nNow, we compute the force between the rectangular loop and the long, current-carrying wire. The forces on the vertical sides cancel out because the current in the loop is in opposite directions on these sides. From the horizontal sides, we have the force is\\n\\n$$\\n\\\\begin{aligned}\\nF=\\\\sum\\\\left(I_{3} \\\\vec{\\\\ell} \\\\times \\\\vec{B}\\\\right) & =I_{3} \\\\ell\\\\left(\\\\frac{\\\\mu_{0} I_{2}}{2 \\\\pi d}-\\\\frac{\\\\mu_{0} I_{2}}{2 \\\\pi(d+w)}\\\\right) \\\\\\\\\\n& =\\\\frac{\\\\mu_{0} \\\\ell w}{2 \\\\pi d(d+w)}\\\\left[I_{2}\\\\left(I_{1}-\\\\frac{M}{L} I_{2}\\\\right)\\\\right] .\\n\\\\end{aligned}\\n$$\\n\\nThis quadratic in $I_{2}$ is maximized when $I_{2}=\\\\frac{L}{2 M} I_{1}$ in which case the force becomes\\n\\n$$\\nF=\\\\frac{\\\\mu_{0} \\\\ell w}{2 \\\\pi d(d+w)} \\\\frac{L I_{1}^{2}}{4 M}=\\\\frac{\\\\mu_{0} \\\\ell w I_{1}^{2}}{4 \\\\pi d(d+w)} \\\\frac{\\\\ln \\\\left(\\\\frac{w}{r}\\\\right)}{\\\\ln \\\\left(\\\\frac{d+w}{d}\\\\right)}\\n$$\\n\\nNote: If the size of the wires is considered when computing flux, a slightly different answer is obtained. In the contest, all answers between $1.11 \\\\times 10^{-3}$ and $1.18 \\\\times 10^{-3}$ were accepted.\"]",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_43": {
    "pid": "phy_43",
    "question": "Consider the following simple model of a bow and arrow. An ideal elastic string has a spring constant $k=10 \\mathrm{~N} / \\mathrm{m}$ and relaxed length $L=1 \\mathrm{~m}$ which is attached to the ends of an inflexible fixed steel rod of the same length $L$ as shown below. A small ball of mass $m=2 \\mathrm{~kg}$ and the thread are pulled by its midpoint away from the rod until each individual part of the thread have the same length of the rod, as shown below. What is the speed of the ball in meters per seconds right after it stops accelerating? Assume the whole setup is carried out in zero gravity.\n<image_1>",
    "options": [
      "1.58 \\, \\mathrm{m/s}",
      "1 \\cdot \\sqrt{5}",
      "2.73",
      "2.23"
    ],
    "answer": "D",
    "solution": "['We can use conservation of energy. The bow string has its potential increased as\\n$$\\nE_{p}=\\\\frac{1}{2} k(2 L-L)^{2}=\\\\frac{1}{2} k L^{2}\\n$$\\n\\nThis all turns into the kinetic energy of the ball $E_{k}=\\\\frac{1}{2} m v^{2}$, so\\n\\n$$\\nE_{p}=E_{k} \\\\Longrightarrow \\\\frac{1}{2} k L^{2}=\\\\frac{1}{2} m v^{2} \\\\Longrightarrow v=L \\\\sqrt{\\\\frac{k}{m}}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_44": {
    "pid": "phy_44",
    "question": "These days, there are so many stylish rectangular home-designs (see figure A). It is possible from the outline of those houses in their picture to estimate with good precision where the camera was. Consider an outline in one photograph of a rectangular house which has height $H=3$ meters (see figure B for square-grid coordinates). Assume that the camera size is negligible, how high above the ground (in meters) was the camera at the moment this picture was taken?<image_1>",
    "options": [
      "1.5",
      "0.09",
      "3",
      "0.9"
    ],
    "answer": "D",
    "solution": "[\"The formation of the house's image seen in the picture is due to pinhole principle, and note that the fish-eye effect here is weak (straight-lines stays straight). Define points $A, B, C, A^{\\\\prime}, B^{\\\\prime}, C^{\\\\prime}$ as in the attached Fig., since $A A^{\\\\prime}, B B^{\\\\prime}, C C^{\\\\prime}$ stays parallel we know that the camera looked horizontally\\n\\n\\n\\nat the time this picture is taken.\\n\\n<img_4322>\\n\\nTo determine the height of the camera at the very same moment, we need to know the where is the horizontal plane passing through the camera in the picture which is collapsed into a line. That can be found by finding the intersection $M$ of $A B \\\\cap A^{\\\\prime} B^{\\\\prime}$ and the intersection $N$ of $B C \\\\cap B^{\\\\prime} C^{\\\\prime}$, then $M N$ is the line of interests. $M N$ intersects $B B^{\\\\prime}$ at $P$, the position of $P$ can be calculated too be $(22,0.9)$, therefore the height of the camera is the length-ratio $P B^{\\\\prime} / B B^{\\\\prime}$ times $3 \\\\mathrm{~m}$, which equals to $0.9 \\\\mathrm{~m}$.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_45": {
    "pid": "phy_45",
    "question": "Consider a thin rigid wire-frame MNPP'N'M' in which MNN'M' and NPP'N' are two squares of side $L$ with resistance per unit-length $\\lambda$ and their planes are perpendicular. The frame is rotated with a constant angular velocity $\\omega$ around an axis passing through $\\mathrm{NN}$ ' and put in a region with constant magnetic field $B$ pointing perpendicular to $\\mathrm{NN}^{\\prime}$. What is the total heat released on the frame per revolution (in Joules)? Use $L=1 \\mathrm{~m}, \\lambda=1 \\Omega / \\mathrm{m}, \\omega=2 \\pi \\mathrm{rad} / \\mathrm{s}$ and $B=1 \\mathrm{~T}$.\n<image_1>",
    "options": [
      "8\\pi^2 \\, \\text{J}",
      "6.58",
      "4.935",
      "4.93 \\, \\text{J}"
    ],
    "answer": "B",
    "solution": "[\"In this setting, for every orientation during rotation the total magnetic flux passing though MNPP'N'M' is tthe same as through MPP'M', which has area $S=\\\\sqrt{2} L^{2}$.\\nThe magnetic flux is:\\n\\n$$\\n\\\\Phi(t)=B S \\\\sin (\\\\omega t)=\\\\sqrt{2} B L^{2} \\\\sin (\\\\omega t) .\\n\\\\tag{3}\\n$$\\n\\nThe emf running around the wire-frame is:\\n\\n$$\\nE(t)=\\\\frac{d}{d t} \\\\Phi(t)=\\\\sqrt{2} B L^{2} \\\\omega \\\\cos (\\\\omega t)\\n\\\\tag{4}\\n$$\\n\\nThe electrical current running around the wire-frame is:\\n\\n$$\\nI(t)=\\\\frac{E(t)}{6 \\\\lambda L}=\\\\frac{B L \\\\omega \\\\cos (\\\\omega t)}{3 \\\\sqrt{2} \\\\lambda}\\n\\\\tag{5}\\n$$\\n\\nThe heat released power is:\\n\\n$$\\n\\\\frac{d}{d t} Q(t)=I^{2}(t) \\\\times 6 \\\\lambda L=\\\\frac{B^{2} L^{3} \\\\omega^{2} \\\\cos ^{2}(\\\\omega t)}{3 \\\\lambda}\\n\\\\tag{6}\\n$$\\n\\nThus the total heat released per revolution is:\\n\\n$$\\nQ=\\\\int_{0}^{2 \\\\pi / \\\\omega} d t \\\\frac{d}{d t} Q(t)=\\\\frac{B^{2} L^{3} \\\\omega^{2} \\\\int_{0}^{2 \\\\pi / \\\\omega} d t \\\\cos ^{2}(\\\\omega t)}{3 \\\\lambda}=\\\\frac{\\\\pi B^{2} L^{3} \\\\omega}{3 \\\\lambda} \\\\approx 6.58 \\\\mathrm{~J}\\n\\\\tag{7}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_46": {
    "pid": "phy_46",
    "question": "The following information applies for the next two problems. A circuit has a power source of $\\mathcal{E}=5.82 \\mathrm{~V}$ connected to three elements in series: an inductor with $L=12.5 \\mathrm{mH}$, a capacitor with $C=48.5 \\mu \\mathrm{F}$, and a diode with threshold voltage $V_{0}=0.65 \\mathrm{~V}$. (Of course, the polarity of the diode is aligned with that of the power source.) You close the switch, and after some time, the voltage across the capacitor becomes constant. (Note: An ideal diode with threshold voltage $V_{0}$ is one whose IV characteristic is given by $I=0$ for $V<V_{0}$ and $V=V_{0}$ for $I>0$.)\n\n<image_1>\n\n\n\nHow much time (in seconds) has elapsed before the voltage across the capacitor becomes constant?",
    "options": [
      "0.00148",
      "2.446 \\times 10^{-3}",
      "2.446 \\times 10^{-2}",
      "0.00775 \\, \\text{s}"
    ],
    "answer": "B",
    "solution": "['When current is flowing clockwise, the circuit is equivalent to an LC circuit with a power source $\\\\mathcal{E}-V_{0}$. Thus, the voltage $U$ is sinusoidal about its equilibrium voltage $U_{0}=\\\\mathcal{E}-V_{0}$ with frequency $\\\\omega=1 / \\\\sqrt{L C}$.\\n\\nWhen the switch is closed, $I=0$ and $U=U_{\\\\min }=0$. Afterwards, $I$ increases to $I_{\\\\max }$ and decreases back to 0 , completing half a period of a sine wave. However, $I$ can not go negative due to the presence of the diode. Instead, a reverse voltage builds up on the diode (so that the voltage across the inductor becomes 0 ), and $I$ stays at 0 . At this point, $U$ becomes constant as well.\\n\\nThe time it took until the system became static was half a period of the LC circuit oscillation, i.e.,\\n\\n$$\\n\\\\frac{\\\\pi}{\\\\omega}=\\\\pi \\\\sqrt{L C}=2.446 \\\\times 10^{-3} \\\\mathrm{~s}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_47": {
    "pid": "phy_47",
    "question": "A tesseract is a 4 dimensional example of cube. It can be drawn in 3 dimensions by drawing two cubes and connecting their vertices together as shown in the picture below:\n\n<image_1>\n\nNow for the 3D equivalent. The lines connecting the vertices are replaced with ideal springs of constant $k=10 \\mathrm{~N} / \\mathrm{m}$ (in blue in the figure). Now, suppose the setup is placed in zero-gravity and the outer cube is fixed in place with a sidelength of $b=2 \\mathrm{~m}$. The geometric center of the inner cube is placed in the geometric center of the outer cube, and the inner cube has a side-length $a=1 \\mathrm{~m}$ and mass $m=1.5 \\mathrm{~kg}$. The inner cube is slightly displaced from equilibrium. Consider the period of oscillations\n\n- $T_{1}$ : when the springs have a relaxed length of 0 ;\n- $T_{2}$ : when the springs are initially relaxed before the inner cube is displaced.\n\nWhat is $T_{1}+T_{2}$ ?",
    "options": [
      "1.72",
      "2.59",
      "2.35",
      "2.53"
    ],
    "answer": "C",
    "solution": "['First let us prove that there is a net external torque of $\\\\vec{\\\\tau}=0$ on the cube for small displacements which means the inner cube behaves like a point mass. Consider a simple case when the cube is pushed to one side.\\n<img_4314>\\n\\nIf we label the vertices of the cube from 1 to 4 clockwise, where 1 is the top left side, it is apparent that sides 1 and 2 provide a positive torque while sides 3 and 4 provide a negative torque. As the displacement is small, the angles created are small enough such that $\\\\sin \\\\theta \\\\approx \\\\theta$. As force is\\n\\n\\n\\nproportional to the extension of the spring as $F \\\\propto x$, we can write that\\n\\n$$\\n\\\\tau \\\\propto \\\\theta\\\\left(r_{+}+r_{-}-r_{+}-r_{-}\\\\right) \\\\propto 0\\n$$\\n\\nIf torque is zero when the cube is displaced in the $x$-direction, then by symmetry, the torque is zero when the cube is displaced in the $y$-direction. Superposing both solutions implies that torque as a function of displacements in the $x$ and $y$ directions $\\\\alpha \\\\hat{x}+\\\\beta \\\\hat{y}$ is\\n\\n$$\\n\\\\tau(\\\\alpha x+\\\\beta y)=\\\\tau(\\\\alpha x)+\\\\tau(\\\\beta y)=\\\\alpha \\\\tau(x)+\\\\beta \\\\tau(y)=0\\n$$\\n\\n1.Label the vertices of the outer cube as $1,2, \\\\ldots, 8$ and the vectors that point to these vertices from the inner cube as $\\\\vec{r}_{1}, \\\\vec{r}_{2}, \\\\ldots, \\\\vec{r}_{2}$. Consider when the inner cube deviates from equilibrium with a vector $\\\\vec{r}$. The force as a function of $\\\\vec{r}$ is\\n$$\\n\\\\begin{aligned}\\nF(\\\\vec{r}) & =k\\\\left[\\\\left(\\\\vec{r}_{1}-\\\\vec{r}\\\\right)+\\\\left(\\\\vec{r}_{2}-\\\\vec{r}\\\\right)+\\\\ldots\\\\left(\\\\vec{r}_{8}-\\\\vec{r}\\\\right)\\\\right] \\\\\\\\\\n& =k\\\\left(\\\\sum_{i=1}^{8} \\\\vec{r}_{i}-8 \\\\vec{r}\\\\right) \\\\\\\\\\n& =-8 k \\\\vec{r}\\n\\\\end{aligned}\\n$$\\n\\nThis implies the period of oscillations is\\n\\n$$\\nT_{1}=2 \\\\pi \\\\sqrt{\\\\frac{m}{8 k}}\\n$$\\n\\n2.Let the center of the inner cube be $(0,0,0)$. Consider the coordinates $(a / 2, a / 2, a / 2)$ and $(b / 2, b / 2, b / 2)$ which correspond to the vertex of the inner and larger cube respectively. Consider moving the cube in the $x$-direction. From defining $y=b / 2-a / 2$, the compressional/extension of each spring $\\\\pm \\\\Delta \\\\ell$ is then\\n$$\\n\\\\begin{aligned}\\n\\\\Delta \\\\ell & = \\\\pm \\\\sqrt{(x+y)^{2}+2 y^{2}}-\\\\sqrt{3} y \\\\\\\\\\n& = \\\\pm \\\\sqrt{3} y \\\\sqrt{1+\\\\frac{2 x}{3 y}+\\\\mathcal{O}\\\\left(x^{2}\\\\right)}-\\\\sqrt{3} y \\\\\\\\\\n& \\\\approx \\\\pm \\\\sqrt{3} y \\\\frac{x}{3 y} \\\\\\\\\\n& = \\\\pm \\\\frac{x}{\\\\sqrt{3}}\\n\\\\end{aligned}\\n$$\\n\\nThe total energy in all springs together are then\\n\\n$$\\nE=8 \\\\times \\\\frac{1}{2} k\\\\left(\\\\frac{x}{\\\\sqrt{3}}\\\\right)^{2} \\\\Longrightarrow F=-\\\\frac{8 k}{3} x \\\\Longrightarrow T_{2}=2 \\\\pi \\\\sqrt{\\\\frac{3 m}{8 k}}\\n$$\\n\\nHence, our total answer is\\n\\n$$\\nT_{1}+T_{2}=2 \\\\pi(1+\\\\sqrt{3}) \\\\sqrt{\\\\frac{m}{8 k}}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_48": {
    "pid": "phy_48",
    "question": "An open electrical circuit contains a wire loop in the shape of a semi-circle, that contains a resistor of resistance $R=0.2 \\Omega$. The circuit is completed by a conducting pendulum in the form of a uniform rod with length $\\ell=0.1 \\mathrm{~m}$ and mass $m=0.05 \\mathrm{~kg}$, has no resistance, and stays in contact with the other wires at all times. All electrical components are oriented in the $y z$ plane, and gravity acts in the $z$ direction. A constant magnetic field of strength $B=2 \\mathrm{~T}$ is applied in the $+x$ direction.\n<image_1>\n\nIgnoring self inductance and assuming that $\\alpha \\ll 1$, the general equation of motion is in the form of $\\theta(t)=A(t) \\cos (\\omega t+\\varphi)$, where $A(t) \\geq 0$. Find $\\omega^{2}$.",
    "options": [
      "154",
      "147 \\, \\text{rad}",
      "150",
      "145"
    ],
    "answer": "D",
    "solution": "[\"The area enclosed by the wire loop is\\n$$\\nA=\\\\frac{1}{2} \\\\ell^{2} \\\\alpha+A_{0}\\n$$\\n\\nfor small angles $\\\\alpha$, and $A_{0}$ is a constant number (which gets ignored since we really care about how this angle is changing). The flux is $\\\\Phi=B A$ and from Lenz's Law, we have,\\n\\n$$\\n\\\\varepsilon=-\\\\frac{d \\\\Phi}{d t}=-\\\\frac{1}{2} B \\\\ell^{2} \\\\dot{\\\\alpha}\\n$$\\n\\nOne can verify that if $\\\\alpha$ is increasing, the current will flow in the clockwise direction, so we set the counterclockwise direction as positive. The current through the wire is thus,\\n\\n$$\\ni=\\\\frac{\\\\varepsilon}{R}=-\\\\frac{B \\\\ell^{2}}{2 R} \\\\dot{\\\\alpha}\\n$$\\n\\nThe magnetic force acting on it is $F_{B}=i B \\\\ell$ and the resulting torque is\\n\\n$$\\n\\\\tau_{B}=F_{B} \\\\frac{\\\\ell}{2}=-\\\\frac{B^{2} \\\\ell^{4}}{4 R} \\\\dot{\\\\alpha}\\n$$\\n\\nPlease verify that the sign is correct. The gravitational torque is $\\\\tau_{g}=-m g \\\\frac{\\\\ell}{2} \\\\alpha$, so the torque equation gives us\\n\\n$$\\n\\\\begin{aligned}\\n0 & =\\\\frac{1}{3} m \\\\ell^{2} \\\\ddot{\\\\alpha}+\\\\frac{B^{2} \\\\ell^{4}}{4 R} \\\\dot{\\\\alpha}+m g \\\\frac{\\\\ell}{2} \\\\alpha \\\\\\\\\\n0 & =\\\\ddot{\\\\alpha}+\\\\frac{3}{4} \\\\frac{B^{2} \\\\ell^{2}}{m R} \\\\dot{\\\\alpha}+\\\\frac{3}{2} \\\\frac{g}{\\\\ell} \\\\alpha\\n\\\\end{aligned}\\n$$\\n\\nRecall that for a damped harmonic oscillator in the form of $\\\\ddot{\\\\alpha}+\\\\gamma \\\\dot{\\\\alpha}+\\\\omega_{0}^{2} \\\\alpha=0$, the frequency of oscillations is $\\\\omega^{2}=\\\\omega_{0}^{2}-\\\\gamma^{2} / 4$, so in our case, we have\\n\\n$$\\n\\\\omega^{2}=\\\\frac{3}{2} \\\\frac{g}{\\\\ell}-\\\\frac{9}{64}\\\\left(\\\\frac{B^{2} \\\\ell^{2}}{m R} \\\\dot{\\\\alpha}\\\\right)^{2}=145 \\\\mathrm{~s}^{-1}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_49": {
    "pid": "phy_49",
    "question": "Consider an optical system made of many identical ideal (negligible-thickness) halflenses with focal length $f>0$, organized so that they share the same center and are angular-separated equally at density $n$ (number of lenses per unit-radian). Define the length-scale $\\lambda=f / n$. A light-ray arrives perpendicular to the first lens at distance $\\lambda / 2$ away from the center, then leaves from the last lens at distance $2 \\lambda$ away from the center. Estimate the total deflection angle (in rad) of the light-ray by this system in the limit $n \\rightarrow \\infty$.\n<image_1>",
    "options": [
      "1.875 \\, \\text{rad}",
      "3",
      "\\pi f",
      "1.05"
    ],
    "answer": "D",
    "solution": "[\"We define the angles as in Fig. A. The light-path inside the optical system is $r(\\\\theta)$, and the angle between the first and last lens is $\\\\Theta$ (which is an unknown but can be uniquely determined from know information).\\n\\n\\n<img_4291>\\n\\nConsider two consecutive lens at angle $\\\\theta$ and $\\\\theta+d \\\\theta$, in which $d \\\\theta=1 / n \\\\rightarrow 0$ in the continuum limit $n \\\\rightarrow \\\\infty$. From the ideal-lens' equation, using the approximation that $f$ is very large compare to other relevant length-scales in this optical setting:\\n\\n$$\\n\\\\frac{1}{f}=\\\\frac{1}{r \\\\tan \\\\phi}+\\\\frac{1}{r \\\\tan (\\\\pi-\\\\phi-\\\\delta \\\\phi)} \\\\approx \\\\frac{\\\\delta \\\\phi}{r \\\\sin ^{2} \\\\phi} \\\\Rightarrow \\\\delta \\\\phi \\\\approx \\\\frac{r}{f} \\\\sin ^{2} \\\\phi\\n\\\\tag{20}\\n$$\\n\\nthe differential equation for the angle of arrival $\\\\phi$ can be written as:\\n\\n$$\\nd \\\\phi=\\\\delta \\\\phi-d \\\\theta \\\\Rightarrow \\\\frac{d \\\\phi}{d \\\\theta}=\\\\frac{r}{f / n} \\\\sin ^{2} \\\\phi-1=\\\\frac{r}{\\\\lambda} \\\\sin ^{2} \\\\phi-1\\n\\\\tag{21}\\n$$\\n\\nWe also have the differential relation between radial position $r(\\\\theta)$ of the light-path and the angle of arrival $\\\\phi$ as followed:\\n\\n$$\\n\\\\frac{d r}{d \\\\theta}=r \\\\cot \\\\phi\\n\\\\tag{22}\\n$$\\n\\nFrom Eq. (21) and Eq. (22), we arrive at:\\n\\n$$\\n\\\\frac{d \\\\phi}{d r}=\\\\frac{\\\\frac{r}{\\\\lambda}-1}{r \\\\cot \\\\phi}\\n\\\\tag{23}\\n$$\\n\\nDefine $\\\\zeta=\\\\tan \\\\phi$, then Eq. (23) becomes:\\n\\n$$\\n\\\\frac{d \\\\phi}{d r}=\\\\frac{1}{1+\\\\zeta^{2}} \\\\frac{d \\\\zeta}{d r}=\\\\frac{\\\\frac{r}{\\\\lambda} \\\\frac{\\\\zeta^{2}}{1+\\\\zeta^{2}}-1}{r / \\\\zeta} \\\\Rightarrow-\\\\frac{d \\\\zeta}{\\\\zeta^{3} d r}-\\\\frac{1}{\\\\zeta^{2} r}=\\\\frac{1}{r}-\\\\frac{1}{\\\\lambda}\\n\\\\tag{24}\\n$$\\n\\nDefine $\\\\xi=1 / \\\\zeta^{2}=1 / \\\\tan ^{2} \\\\phi$, then Eq. (23) gives:\\n\\n$$\\n\\\\frac{d \\\\zeta}{\\\\zeta^{2} d r}=-\\\\frac{1}{2} \\\\frac{d \\\\xi}{d r} \\\\Rightarrow \\\\frac{d \\\\xi}{d r}-\\\\frac{2}{r} \\\\xi=2\\\\left(\\\\frac{1}{r}-\\\\frac{1}{\\\\lambda}\\\\right) \\\\Rightarrow \\\\frac{d}{d r}\\\\left(\\\\frac{\\\\xi}{r^{2}}\\\\right)=\\\\frac{2}{r^{2}}\\\\left(\\\\frac{1}{r}-\\\\frac{1}{\\\\lambda}\\\\right)\\n\\\\tag{25}\\n$$\\n\\nIntegrating both sides, then up to a constant value $C$, Eq. (25) gives:\\n\\n$$\\n\\\\frac{\\\\xi}{r^{2}}=-\\\\frac{1}{r^{2}}+\\\\frac{2}{\\\\lambda r}+C \\\\Rightarrow \\\\xi=-1+2 \\\\frac{r}{\\\\lambda}+C \\\\frac{r^{2}}{\\\\lambda^{2}}\\n\\\\tag{26}\\n$$\\n\\n\\n\\nAt $\\\\theta=0, r=\\\\lambda / 2$ and $\\\\phi=\\\\pi / 2$ (thus $\\\\xi=0$ ), we can determine $C=0$. Hence:\\n\\n$$\\n\\\\cot \\\\phi=\\\\sqrt{2 \\\\frac{r}{\\\\lambda}-1}\\n\\\\tag{27}\\n$$\\n\\nPlug Eq. (27) into Eq. (22):\\n\\n$$\\n\\\\frac{d r}{d \\\\theta}=\\\\frac{r}{\\\\lambda} \\\\sqrt{2 \\\\frac{r}{\\\\lambda}-1} \\\\Rightarrow \\\\theta=2 \\\\arctan \\\\sqrt{2 \\\\frac{r}{\\\\lambda}-1}\\n\\\\tag{28}\\n$$\\n\\nAt $\\\\theta=\\\\Theta, r=2 \\\\lambda$ therefore we can use Eq. (28) to get:\\n\\n$$\\n\\\\Theta=2 \\\\arctan \\\\sqrt{3}=\\\\frac{2 \\\\pi}{3}\\n\\\\tag{29}\\n$$\\n\\nUsing Eq. (27), the deflection angle $\\\\Delta$ can be calculated to be:\\n\\n$$\\n\\\\Delta=\\\\Theta-\\\\left.\\\\phi\\\\right|_{r=\\\\lambda / 2}+\\\\left.\\\\phi\\\\right|_{r=2 \\\\lambda}=\\\\Theta-\\\\frac{\\\\pi}{2}+\\\\operatorname{arccot} \\\\sqrt{3}=\\\\frac{2 \\\\pi}{3}-\\\\frac{\\\\pi}{2}+\\\\frac{\\\\pi}{6}=\\\\frac{\\\\pi}{3} \\\\approx 1.05 \\\\mathrm{rad}\\n\\\\tag{30}\\n$$\\n\\nFor the sake of completeness, we provide the simulated light-path inside the optical system where $n=1000$ using MatLab (which is in great agreement with our theoretical analysis).\"]",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_50": {
    "pid": "phy_50",
    "question": "For black body radiation, Wien's Displacement Law states that its spectral radiance will peak at\n$$\n\\lambda_{\\text {peak }}=\\frac{b}{T}\n$$\n\nwhere $b=2.89777 \\times 10^{-3} \\mathrm{mK}$, and $T$ is the temperature of the object. When QiLin tried to reproduce this in a lab, by working with a tungsten-filament lightbulb at $2800 \\mathrm{~K}$, he computed a different value for $b$ by measuring the peak wavelength using a spectrometer and multiplying it with the temperature. He hypothesizes that this discrepancy is because tungsten is not an ideal black body. The graph below, courtesy of the CRC Handbook of Chemistry and Physics, shows the emissivity of tungsten at various conditions (the units for wavelength is $\\mathrm{nm}$ ).\n\n\n\n<image_1>\n\nAssuming QiLin's hypothesis is correct, and assuming there were no other errors in the experiment, how off was his value for $b$ ? Submit $\\frac{\\left|b_{\\text {theory }}-b_{\\text {experiment }}\\right|}{b_{\\text {theory }}}$ as a decimal number, to one significant digit (giving you room to estimate where the points are).",
    "options": [
      "0.08",
      "0.8",
      "0.18",
      "0.06"
    ],
    "answer": "A",
    "solution": "[\"Recall Planck's Law, which says the spectral radiance of a black body is given by\\n$$\\nB_{0}(\\\\lambda, T)=\\\\frac{2 h c^{3}}{\\\\lambda^{5}} \\\\frac{1}{\\\\exp \\\\left(\\\\frac{h c}{\\\\lambda k_{B} T}\\\\right)-1}\\n$$\\n\\nThe regular Wien's Displacement Law can be derived by finding the peak by computing $\\\\frac{\\\\partial B_{0}}{\\\\partial \\\\lambda}$, to find the wavelength associated with the maximal radiance. For a nonideal body with emissivity $\\\\epsilon(\\\\lambda, T)$, we can write the radiance as\\n\\n$$\\nB(\\\\lambda, T)=B_{0}(\\\\lambda, T) \\\\epsilon(\\\\lambda, T)\\n$$\\n\\nWe can estimate $\\\\epsilon(\\\\lambda, T)$ by looking at the given graph. The tungsten is at $2800 \\\\mathrm{~K}$, so we will use the red line, and assuming it is near a black body, the peak wavelength should be around $1000 \\\\mathrm{~nm}$. Performing a linear approximation around $1000 \\\\mathrm{~nm}$, we get\\n\\n$$\\n\\\\epsilon(\\\\lambda, T)=-173333\\\\left(\\\\lambda-1000 \\\\cdot 10^{-9}\\\\right)+0.366\\n$$\\n\\nwhere $\\\\lambda$ is in meters. Numerically finding the maximum of $B(\\\\lambda, T)$ with respect to $\\\\lambda$ (i.e. with a graphing calculator), we get the new peak wavelength to be $\\\\lambda_{\\\\text {new }}=949 \\\\mathrm{~nm}$, while the old peak wavelength (assuming a perfect blackbody) is $\\\\lambda_{\\\\text {old }}=1035 \\\\mathrm{~nm}$, and their percent difference (rounded to 1 significant digit) is 0.08\"]",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_51": {
    "pid": "phy_51",
    "question": "A coin of uniform mass density with a radius of $r=1 \\mathrm{~cm}$ is initially at rest and is released from a slight tilt of $\\theta=8^{\\circ}$ onto a horizontal surface with an infinite coefficient of static friction. The coin has a thicker rim, allowing it to drop and rotate on one point. With every collision, the coin switches pivot points on the rim, and energy is dissipated through heat so that $k=0.9$ of the coin's prior total energy is conserved. How long will it take for the coin to come to a complete stop?\n<image_1>\n\nA cross-sectional view of the coin before release. The rim can be seen on the edges of the coin.",
    "options": [
      "0.716",
      "0.1 \\mathrm{~s}",
      "8.8 \\, \\text{seconds}",
      "2"
    ],
    "answer": "A",
    "solution": "[\"By the parallel axis theorem, the moment of inertia of the coin around the pivot can be expressed as\\n$$\\nI=I_{x}+m \\\\ell^{2}=\\\\frac{1}{4} m r^{2}+m r^{2}=\\\\frac{5}{4} m r^{2}\\n$$\\n\\n\\n\\nAs $\\\\theta$ is small, that means the perpendicular force of gravity is $m g \\\\cos \\\\theta \\\\approx m g$. Hence, Newton's second law to find the angular acceleration as\\n\\n$$\\nI \\\\alpha=\\\\tau \\\\Longrightarrow \\\\alpha=\\\\frac{4 g}{5 r} \\\\cdot(1 \\\\mathrm{rad})\\n$$\\n\\nUsing rotational kinematics, the time for the first collision will be $\\\\theta=\\\\frac{1}{2} \\\\alpha t^{2} \\\\Longrightarrow t_{0}=\\\\sqrt{\\\\frac{5 r \\\\theta_{0}}{2 g}}$. By conservation of energy, the angular velocity at the time of collision is $\\\\frac{1}{2} I \\\\omega_{0}^{2}=m g r \\\\sin \\\\theta \\\\approx m g r$, meaning that $\\\\omega_{0}=\\\\sqrt{\\\\frac{8 g \\\\theta_{0}}{5 r}}$. Now consider $k$. This is the ratio of the initial energy $E_{n-1}$ and next energy $E_{n}$. Then, we can say that\\n\\n$$\\nk=\\\\frac{\\\\frac{1}{2} I \\\\omega_{n}^{2}}{\\\\frac{1}{2} I \\\\omega_{n-1}^{2}} \\\\Longrightarrow \\\\omega_{n}=\\\\sqrt{k} \\\\omega_{n-1}\\n$$\\n\\nBy recurrence, $\\\\omega_{n}=k^{n / 2} \\\\omega_{0}$. The time of flight for each cycle will be $t_{n}=\\\\frac{2 \\\\omega_{n}}{\\\\alpha}$. Therefore,\\n\\n$$\\n\\\\begin{aligned}\\nT & =t_{0}+\\\\sum_{n=1}^{\\\\infty} t_{n} \\\\\\\\\\n& =\\\\sqrt{\\\\frac{5 r \\\\theta_{0}}{2 g}}+\\\\sum_{n=1}^{\\\\infty}\\\\left(2 k^{n / 2} \\\\sqrt{\\\\frac{8 g \\\\theta_{0}}{5 r}} \\\\cdot \\\\frac{5 r}{4 g}\\\\right) \\\\\\\\\\n& =\\\\sqrt{\\\\frac{5 r \\\\theta_{0}}{2 g}}+\\\\sqrt{\\\\frac{10 r \\\\theta_{0}}{g}} \\\\frac{k^{1 / 2}}{1-k^{1 / 2}}\\n\\\\end{aligned}\\n$$\\n\\nConverting $8^{\\\\circ}$ to $\\\\frac{2 \\\\pi}{45}$ radians, $k=0.9, g=9.8 \\\\mathrm{~m} / \\\\mathrm{s}^{2}, r=0.01 \\\\mathrm{~m}$, we find that $T=0.716 \\\\mathrm{~s}$ which is a reasonable estimate.\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_52": {
    "pid": "phy_52",
    "question": "Here is a Physoly round button badge, in which the logo is printed on the flat and rigid surface of this badge. Toss it in the air and track the motions of three points (indicated by cyan circles in the figure) separated a straight-line distance of $L=5 \\mathrm{~mm}$ apart. At a particular moment, we find that these all have the same speed $V=4 \\mathrm{~cm} / \\mathrm{s}$ but are heading to different directions which form an angle of $\\theta=30^{\\circ}$ between each pair. Determine the then angular velocity of the badge (in $\\left.\\mathrm{rad} / \\mathrm{s}\\right)$.\n<image_1>",
    "options": [
      "6.1111",
      "4.1141",
      "13.85",
      "4.1411"
    ],
    "answer": "D",
    "solution": "['Call the three tracking points on the Physoly badge A, B, C, and their geometrical center $\\\\mathrm{O}$. The distance from $\\\\mathrm{O}$ to these three points are the same and equal to $L / \\\\sqrt{3}$.\\n<img_4248>\\n\\nDue to symmetry, the velocity vector of $\\\\mathrm{O}$ has to be perpendicular to the $\\\\mathrm{ABC}$ plane. In the reference frame of $\\\\mathrm{O}$, the points $\\\\mathrm{A}, \\\\mathrm{B}, \\\\mathrm{C}$ both have the same speed $2 V \\\\sin (\\\\theta / 2) / \\\\sqrt{3}$ but are heading to different directions which form an angle of $120^{\\\\circ}$ between each pair. Also due to symmetry, the axis of rotation has to be perpendicular to the $\\\\mathrm{ABC}$ plane, thus the velocity vectors of points $\\\\mathrm{A}$, $\\\\mathrm{B}, \\\\mathrm{C}$ in $\\\\mathrm{O}$ reference frame looks like described in the attached figure. For $L=5 \\\\mathrm{~mm}, V=4 \\\\mathrm{~cm} / \\\\mathrm{s}$, $\\\\theta=30^{\\\\circ}=\\\\pi / 12$, the angular velocity of the badge can be calculated as:\\n\\n$$\\n\\\\Omega=\\\\frac{2 V \\\\sin (\\\\theta / 2) / \\\\sqrt{3}}{L / \\\\sqrt{3}}=\\\\left(\\\\frac{\\\\sqrt{3}-1}{\\\\sqrt{2}}\\\\right) \\\\frac{V}{L} \\\\approx 4.1411 \\\\mathrm{rad} / \\\\mathrm{s}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_53": {
    "pid": "phy_53",
    "question": "In general, we can describe the quadratic drag on an object by the following force law:\n$$\nF_{D}=\\frac{1}{2} C_{D} \\rho A v^{2}\n$$\n\nwhere $A$ is the cross-sectional area of the object exposed to the airflow, $v$ is the speed of the object in a fluid, and $C_{D}$ is the drag coefficient, a dimensionless quantity that varies based on shape.\n\nAnother useful quantity to know is the Reynold's number, a dimensionless quantity that helps predict\n\n\n\nfluid flow patterns. It is given by the formula:\n\n$$\n\\operatorname{Re}=\\frac{\\rho v L}{\\mu}\n$$\n\nwhere $\\rho$ is the density of the surrounding fluid, $\\mu$ is the dynamic viscosity of the fluid, and $L$ is a reference length parameter that varies based on each object. For a smooth ${ }^{1}$ sphere traveling in a fluid, its diameter serves as the reference length parameter.\n\n<image_1>\n\nA logarithmic graph of $C_{D}$ vs Re of a sphere from the NASA Glenn Research Center.\n\nThe relationship between the drag coefficient and the Reynold's number holds significant importance. Due to the complexity of fluid dynamics, empirical data is commonly used, as depicted in the figure provided above. Notably, the figure indicates a significant decrease in the drag coefficient around $\\operatorname{Re} \\approx 4 \\times 10^{5}$. This phenomenon, known as the drag crisis, occurs when a sphere transitions from laminar to turbulent flow, resulting in a broad wake and high drag.\n\nLet's consider a smooth ball with a radius of $0.2 \\mathrm{~m}$ and a mass of $0.1 \\mathrm{~kg}$ dropped in air with a constant density of $\\rho=1.255 \\mathrm{~kg} / \\mathrm{m}^{3}$. It is found that at velocity $5 \\mathrm{~m} / \\mathrm{s}$, the Reynold's number of the ball is $3.41 \\cdot 10^{5}$. If the ball is dropped from rest, it approaches a stable terminal velocity $v_{1}$. If the ball is thrown downwards with enough velocity, it will experience turbulence, and approach a stable terminal velocity $v_{2}$. Find $\\Delta v=v_{2}-v_{1}$. Ignore any terminal velocities found for Reynold numbers less than an order of magnitude $10^{-1}$.\n\nNote: This problem is highly idealized as it assumes the atmosphere has air of constant density and temperature. In reality, this is not true!",
    "options": [
      "6.17 \\, \\text{m/s}",
      "5.89",
      "4.98",
      "6.15"
    ],
    "answer": "C",
    "solution": "['Terminal velocity exists when the net force is 0 . Using $v=\\\\frac{\\\\mu \\\\cdot \\\\operatorname{Re}}{2 \\\\rho r}$ where $L=2 r$, we find that\\n$$\\n\\\\frac{1}{2} \\\\rho_{a} C_{D}\\\\left(\\\\pi r^{2}\\\\right)\\\\left(\\\\frac{\\\\mu \\\\cdot \\\\mathrm{Re}}{2 \\\\rho r}\\\\right)^{2}=m g-\\\\rho_{a} g\\\\left(\\\\frac{4}{3} \\\\pi r^{3}\\\\right)\\n$$\\n\\n\\nSince $\\\\rho=\\\\frac{m}{4 \\\\pi r^{3} / 3}=2.98 \\\\mathrm{~kg} / \\\\mathrm{m}^{3}$ is on the same order as $\\\\rho_{a}=1.255 \\\\mathrm{~kg} / \\\\mathrm{m}^{3}$, the buoyant force must be accounted for and is non-negligible. We can rearrange to find that\\n$$\\nC_{D} \\\\operatorname{Re}^{2}=\\\\frac{8 \\\\rho_{a}}{\\\\pi \\\\mu^{2}}\\\\left(m g-\\\\frac{4}{3} \\\\rho_{a} g \\\\pi r^{3}\\\\right)\\n$$\\nUsing $x$ as $C_{D}$ and $y$ as Re, we can plot an equation $x y^{2}=$ const on the $C_{D}$ vs Re graph. There, we can find three intersections.\\n\\n<img_4276>\\n\\nThe intersection in the middle is not stable. So we find the intersections of the other two to be $\\\\operatorname{Re}_{1} \\\\approx 2.6 \\\\times 10^{5}$ and $\\\\operatorname{Re}_{2}=6 \\\\times 10^{5}$. Hence, $v_{1}=3.81 \\\\mathrm{~m} / \\\\mathrm{s}$ and $v_{2}=8.79 \\\\mathrm{~m} / \\\\mathrm{s}$, meaning $\\\\Delta v=4.98 \\\\mathrm{~m} / \\\\mathrm{s}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_54": {
    "pid": "phy_54",
    "question": "The following information applies for the next two problems. Pictured is a wheel from a 4wheeled car of weight $1200 \\mathrm{~kg}$. The absolute pressure inside the tire is $3.0 \\times 10^{5} \\mathrm{~Pa}$. Atmospheric pressure is $1.0 \\times 10^{5} \\mathrm{~Pa}$. Assume the rubber has negligible \"stiffness\" (i.e. a negligibly low Sheer modulus compared to its Young's modulus).\n\n<image_1>\n\n\nThe rubber on the bottom of the wheel is completely unstretched. The rubber has a thickness of $7 \\mathrm{~mm}$. Based on this information, find the Young's Modulus of the rubber. Is this answer reasonable?",
    "options": [
      "1.4 \\times 10^6 \\, \\text{Pa}",
      "1.00 \\times 10^{8}",
      "1.4 \\times 10^6 \\, \\text{Pa}",
      "1.00 \\times 10^{9}"
    ],
    "answer": "D",
    "solution": "[\"Let $P=2.0 \\\\times 10^{5}$ Pa be the gauge pressure of the tire, $w=20 \\\\mathrm{~cm}$ be the width of the tire, $r=20 \\\\mathrm{~cm}$ be the radius of the tire, $t=7 \\\\mathrm{~mm}$ be the thickness of the rubber, $M=1200 \\\\mathrm{~kg}$ be the mass of the car, $Y$ be the Young's modulus, and $\\\\theta$ be the angle subtended by the portion of the tire in contact with the ground. We have\\n$$\\n\\\\begin{gathered}\\n\\\\frac{M g}{4}=2 r w P \\\\sin \\\\left(\\\\frac{\\\\theta}{2}\\\\right) \\\\\\\\\\n\\\\theta=2 \\\\arcsin \\\\left(\\\\frac{M g}{8 R w P}\\\\right)=0.3696\\n\\\\end{gathered}\\n$$\\nLet $T$ be the tension in the stretched portion of the rubber. Balance forces on a small section of the tire subtending an angle $d \\\\theta$.\\n$$\\n\\\\operatorname{Pr} w d \\\\theta=2 T \\\\sin \\\\left(\\\\frac{d \\\\theta}{2}\\\\right)\\n$$\\nUsing the approximation $\\\\sin \\\\theta=\\\\theta$,\\n$$\\nT=\\\\operatorname{Pr} w\\n$$\\nThe stress on the rubber is\\n$$\\n\\\\sigma=\\\\frac{T}{w t}=\\\\frac{P r}{t}\\n$$\\nThe strain is\\n$$\\n\\\\epsilon=\\\\frac{\\\\theta}{2 \\\\sin \\\\left(\\\\frac{\\\\theta}{2}\\\\right)}-1\\n$$\\nThe Young's modulus is\\n$$\\nY=\\\\frac{\\\\sigma}{\\\\epsilon}=\\\\frac{\\\\frac{P r}{t}}{\\\\frac{b}{2 \\\\sin \\\\left(\\\\frac{b}{2}\\\\right)}-1}=1.00 \\\\times 10^{9} \\\\mathrm{~Pa}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_55": {
    "pid": "phy_55",
    "question": "A hollow sphere of mass $M$ and radius $R$ is placed under a plank of mass $3 M$ and length $2 R$. The plank is hinged to the floor, and it initially makes an angle $\\theta=\\frac{\\pi}{3}$ rad to the horizontal. Under the weight of the plank, the sphere starts rolling without slipping across the floor. What is the sphere's initial translational acceleration? Assume the plank is frictionless.\n\n<image_1>\n\nA not-to-scale picture of the sphere-plank setup.",
    "options": [
      "\\frac{3 \\sqrt{3}}",
      "2.76",
      "\\frac{9\\sqrt{3}}",
      "2.67"
    ],
    "answer": "B",
    "solution": "['Let $N$ be the normal force acting from the ball on the plank. We can use torque at a distance $x=R \\\\cot \\\\frac{\\\\theta}{2}$ from the hinge (by geometry) to write (using $m=3 M$ )\\n$$\\nm g \\\\frac{l}{2} \\\\cos \\\\theta-N R \\\\cot \\\\frac{\\\\theta}{2}=\\\\frac{m l^{2}}{3} \\\\alpha\\n$$\\nYou can also find $N$ from\\n$$\\n\\\\begin{aligned}\\nN \\\\sin \\\\theta-f & =M a_{0} \\\\\\\\\\nf R & =\\\\frac{2}{3} M R^{2} \\\\alpha \\\\\\\\\\na_{0} & =R \\\\alpha\\n\\\\end{aligned}\\n$$\\nYou can relate the acceleration at the point of contact $a_{p}=\\\\vec{a}_{0}+\\\\vec{a}_{0} \\\\times \\\\vec{r}=\\\\alpha_{0}(1-\\\\cos \\\\theta)$. Hence combining all equations gives $a=\\\\frac{9}{32} g \\\\approx 2.76 \\\\mathrm{~m} / \\\\mathrm{s}^{2}$.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_56": {
    "pid": "phy_56",
    "question": "On a flat playground, choose a Cartesian Oxy coordinate system (in unit of meters). A child running at a constant velocity $V=1 \\mathrm{~m} / \\mathrm{s}$ around a heart-shaped path satisfies the following order- 6 algebraic equation:\n$$\n\\left(x^{2}+y^{2}-L^{2}\\right)^{3}-L x^{2} y^{3}=0, L=10 \\text {. }\n$$\nWhen the child is at the position $(x, y)=(L, 0)$, what is the magnitude of their acceleration?\n\n<image_1>",
    "options": [
      "0.1 \\mathrm{~m/s}",
      "0.66591",
      "0.1",
      "0.066591"
    ],
    "answer": "D",
    "solution": "['The acceleration can be found from the local geometry of the curves, thus let us study small deviations around the position of interests $(x, y)=(L, 0)$ :\\n$$\\nx=L+\\\\delta_{x} \\\\quad, \\\\quad y=0+\\\\delta_{y} \\\\quad, \\\\quad\\\\left|\\\\delta_{x}\\\\right|,\\\\left|\\\\delta_{y}\\\\right| \\\\ll L\\n$$\\nConsider the 2nd-order approximation in $\\\\delta_{x}$ of $\\\\delta_{y}$ with quadratic coefficients $\\\\alpha$ and $\\\\beta$ :\\n$$\\n\\\\delta_{y} \\\\approx \\\\alpha \\\\delta_{x}+\\\\frac{\\\\beta}{L} \\\\delta_{x}^{2} \\\\sim \\\\delta_{x}\\n$$\\nTo find these coefficients, we look at the algebraic equation of our heart-shape path up to the two lowest-orders of expansions (which are the 3rd and 4th):\\n$$\\n\\\\begin{aligned}\\n0 & =\\\\left(x^{2}+y^{2}-L^{2}\\\\right)^{3}-L x^{2} y^{3} \\\\approx L^{2}\\\\left[8 L \\\\delta_{x}^{3}+12 \\\\delta_{x}^{4}+12 \\\\delta_{x}^{2} \\\\delta_{y}^{2}-2 \\\\delta_{x} \\\\delta_{y}^{3}-L \\\\delta_{y}^{3}+\\\\mathcal{O}\\\\left(\\\\delta_{x}^{5}\\\\right)\\\\right] \\\\\\\\\\n& \\\\approx L^{2}\\\\left[8 L \\\\delta_{x}^{3}+12 \\\\delta_{x}^{4}+12 \\\\alpha^{2} \\\\delta_{x}^{4}-2 \\\\alpha^{3} \\\\delta_{x}^{4}-\\\\left(\\\\alpha^{3} L \\\\delta_{x}^{3}+3 \\\\alpha^{2} \\\\beta \\\\delta_{x}^{4}\\\\right)+\\\\mathcal{O}\\\\left(\\\\delta_{x}^{5}\\\\right)\\\\right] \\\\\\\\\\n& \\\\propto\\\\left(8-\\\\alpha^{3}\\\\right) L \\\\delta_{x}^{3}+\\\\left(12+12 \\\\alpha^{2}-2 \\\\alpha^{3}-3 \\\\alpha^{2} \\\\beta\\\\right) \\\\delta_{x}^{4}+\\\\mathcal{O}\\\\left(\\\\delta_{x}^{5}\\\\right)\\n\\\\end{aligned}\\n$$\\nThus, $\\\\alpha$ and $\\\\beta$ can be found by solving:\\n$$\\n8-\\\\alpha^{3}=0 \\\\quad, \\\\quad 12+12 \\\\alpha^{2}-2 \\\\alpha^{3}-3 \\\\alpha^{2} \\\\beta=0 \\\\Longrightarrow \\\\alpha=2, \\\\beta=\\\\frac{11}{3} .\\n\\\\tag{3}\\n$$\\nWe can find the relations between velocities $\\\\left.(\\\\dot{x}, \\\\dot{y})=\\\\dot{\\\\delta}_{x}, \\\\dot{\\\\delta}_{y}\\\\right)$ and accelerations $(\\\\ddot{x}, \\\\ddot{y})=\\\\ddot{\\\\delta}_{x}, \\\\ddot{\\\\delta}_{y}$ ) evaluated at the position $(x, y)=(1,0) \\\\rightarrow\\\\left(\\\\delta_{x}, \\\\delta_{y}\\\\right)=(0,0)$ by taking the time-derivatives:\\n$$\\n\\\\dot{\\\\delta}_{y}=\\\\alpha \\\\dot{\\\\delta}_{x}+2 \\\\frac{\\\\beta}{L} \\\\delta_{x} \\\\dot{\\\\delta}_{x}=\\\\left(\\\\alpha+2 \\\\frac{\\\\beta}{L} \\\\delta_{x}\\\\right) \\\\dot{\\\\delta}_{x}=\\\\alpha \\\\dot{\\\\delta}_{x}\\n\\\\tag{4}\\n$$\\n\\n$$\\n\\\\ddot{\\\\delta}_{y}=\\\\alpha \\\\ddot{\\\\delta}_{x}+2 \\\\frac{\\\\beta}{L} \\\\dot{\\\\delta}_{x}^{2}+2 \\\\frac{\\\\beta}{L} \\\\delta_{x} \\\\ddot{\\\\delta}_{x}=\\\\left(\\\\alpha+2 \\\\frac{\\\\beta}{L} \\\\delta_{x}\\\\right) \\\\ddot{\\\\delta}_{x}+2 \\\\frac{\\\\beta}{L} \\\\dot{\\\\delta}_{x}^{2}=\\\\alpha \\\\ddot{\\\\delta}_{x}+2 \\\\frac{\\\\beta}{L} \\\\dot{\\\\delta}_{x}^{2}\\n\\\\tag{5}\\n$$\\nFor a constant running speed $V$, we get:\\n$$\\nV=\\\\left(\\\\dot{x}^{2}+\\\\dot{y}^{2}\\\\right)^{1 / 2} \\\\Longrightarrow \\\\quad \\\\dot{\\\\delta}_{x}=\\\\left(1+\\\\alpha^{2}\\\\right)^{-1 / 2} V, \\\\dot{\\\\delta}_{y}=\\\\alpha\\\\left(1+\\\\alpha^{2}\\\\right)^{-1 / 2} V\\n$$\\nwhich we obtain by applying Eq. (4). Also, the temporal-constraint of constant speed means that the acceleration vector (if non-zero) should be perpendicular to the velocity vector:\\n$$\\n\\\\frac{d}{d t} V=0=\\\\frac{d}{d t}\\\\left(\\\\dot{x}^{2}+\\\\dot{y}^{2}\\\\right)^{1 / 2} \\\\propto \\\\dot{\\\\delta}_{x} \\\\ddot{\\\\delta}_{x}+\\\\dot{\\\\delta}_{y} \\\\ddot{\\\\delta}_{y}=0 \\\\quad \\\\Longrightarrow \\\\quad \\\\ddot{\\\\delta}_{x}+\\\\alpha \\\\ddot{\\\\delta}_{y}=0\\n$$\\nUsing Eq. (5), we can arrive at:\\n$$\\n\\\\begin{aligned}\\n\\\\ddot{\\\\delta}_{x}+\\\\alpha\\\\left(\\\\alpha \\\\ddot{\\\\delta}_{x}+2 \\\\frac{\\\\beta}{L} \\\\dot{\\\\delta}_{x}^{2}\\\\right)=0 \\\\Longrightarrow \\\\ddot{\\\\delta}_{x} & =-2 \\\\frac{\\\\beta}{L} \\\\alpha\\\\left(1+\\\\alpha^{2}\\\\right)^{-1} \\\\dot{\\\\delta}_{x}^{2}=-2 \\\\beta \\\\alpha\\\\left(1+\\\\alpha^{2}\\\\right)^{-2} \\\\frac{V^{2}}{L}, \\\\\\\\\\n\\\\ddot{\\\\delta}_{y} & =-\\\\alpha^{-1} \\\\dot{\\\\delta}_{x}=2 \\\\beta\\\\left(1+\\\\alpha^{2}\\\\right)^{-2} \\\\frac{V^{2}}{L} .\\n\\\\end{aligned}\\n$$\\nThe quadratic coefficients are found in Eq. (3), and given that $V=1 \\\\mathrm{~m} / \\\\mathrm{s}, L=10 \\\\mathrm{~m}$, the magnitude of the total acceleration can be calculated:\\n$$\\na=\\\\left(\\\\ddot{\\\\delta}_{x}^{2}+\\\\ddot{\\\\delta}_{y}^{2}\\\\right)^{1 / 2}=2 \\\\beta\\\\left(1+\\\\alpha^{2}\\\\right)^{3 / 2} \\\\frac{V^{2}}{L}=\\\\frac{22}{15 \\\\sqrt{5}} \\\\frac{V^{2}}{L} \\\\approx 0.066591 \\\\mathrm{~m} / \\\\mathrm{s}^{2} .\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_57": {
    "pid": "phy_57",
    "question": "The logo of OPhO describes two objects travelling around their center-of-mass, following the same oval-shape trajectory. For simplicity, we assume these objects are point-like, have identical mass, and interacts via an interacting potential $U(d)$ depends on the distance $d$ between them. Choose the polar coordinates $(r, \\theta)$ as shown in the figure, where the origin is located at the center of the logo, then the shared trajectory obeys the equation:\n$$\nr(\\theta)=\\frac{L}{2}[1-\\epsilon \\cos (2 \\theta)]^{-(1+\\gamma)},\n$$\n\nin which we consider $\\epsilon=0.12$ and $\\gamma=0.05$. Here the smallest and largest separation between the objects are $d_{\\min }$ and $d_{\\max }$. Since the interacting potential $U(d)$ is defined up to a constant, let us pick $U(L)=0$. Find the ratio $U\\left(d_{\\min }\\right) / U\\left(d_{\\max }\\right)$.\n<image_1>",
    "options": [
      "0.753",
      "-0.6846",
      "-0.6864",
      "1.287"
    ],
    "answer": "C",
    "solution": "['Define the dimensionless inverse-radius $u=\\\\frac{L}{d}$ and the angular-derivative ${ }^{\\\\prime}=\\\\frac{d}{d \\\\theta}$, then for any central interacting potential we have Binet equation (can be derived directly from the equations of motion in polar coordinates):\\n$$\\n\\\\frac{d}{d u} U(u) \\\\propto-\\\\left(u^{\\\\prime \\\\prime}+u\\\\right)\\n\\\\tag{26}\\n$$\\nFor the given oval-shape trajectory:\\n$$\\nd=L[1-\\\\epsilon \\\\cos (2 \\\\theta)]^{-(1+\\\\gamma)} \\\\Longrightarrow u=(1-\\\\epsilon \\\\cos \\\\phi)^{(1+\\\\gamma)}, \\\\cos \\\\phi=\\\\epsilon^{-1}\\\\left[1-u^{\\\\left(\\\\frac{1}{1+\\\\gamma}\\\\right)}\\\\right]\\n\\\\tag{27}\\n$$\\nwhere $\\\\phi=2 \\\\theta$. The angular 2nd-derivative of the dimensionless inverse-radius $u$ can be calculated:\\n$$\\n\\\\begin{aligned}\\nu^{\\\\prime \\\\prime} & =4 \\\\frac{d^{2}}{d \\\\phi^{2}} u=4 \\\\epsilon(1+\\\\gamma)\\\\left[\\\\frac{\\\\gamma \\\\epsilon\\\\left(1-\\\\cos ^{2} \\\\phi\\\\right)}{1-\\\\epsilon \\\\cos \\\\phi}+\\\\cos \\\\phi\\\\right](1-\\\\epsilon \\\\cos \\\\phi)^{\\\\gamma} \\\\\\\\\\n& =4 \\\\epsilon(1+\\\\gamma)\\\\left\\\\{\\\\gamma \\\\epsilon\\\\left(1-\\\\epsilon^{-2}\\\\left[1-u^{\\\\left(\\\\frac{1}{1+\\\\gamma}\\\\right)}\\\\right]^{2}\\\\right) u^{-\\\\left(\\\\frac{1}{1+\\\\gamma}\\\\right)}+\\\\epsilon^{-1}\\\\left[1-u^{\\\\left(\\\\frac{1}{1+\\\\gamma}\\\\right)}\\\\right]\\\\right\\\\} u^{\\\\left(\\\\frac{\\\\gamma}{1+\\\\gamma}\\\\right)} \\\\\\\\\\n& =4(1+\\\\gamma)\\\\left\\\\{\\\\gamma \\\\epsilon^{2} u^{-\\\\left(\\\\frac{1-\\\\gamma}{1+\\\\gamma}\\\\right)}-\\\\gamma u^{-\\\\left(\\\\frac{1-\\\\gamma}{1+\\\\gamma}\\\\right)}\\\\left[1-2 u^{\\\\left(\\\\frac{1}{1+\\\\gamma}\\\\right)}+u^{\\\\left(\\\\frac{2}{1+\\\\gamma}\\\\right)}\\\\right]+\\\\left[u^{\\\\left(\\\\frac{\\\\gamma}{1+\\\\gamma}\\\\right)}-u\\\\right]\\\\right\\\\} \\\\\\\\\\n& =-4 \\\\gamma(1+\\\\gamma)\\\\left(1-\\\\epsilon^{2}\\\\right) u^{-\\\\left(\\\\frac{1-\\\\gamma}{1+\\\\gamma}\\\\right)}+4(1+\\\\gamma)(1+2 \\\\gamma) u^{\\\\left(\\\\frac{\\\\gamma}{1+\\\\gamma}\\\\right)}-4(1+\\\\gamma)^{2} u .\\n\\\\end{aligned}\\n$$\\nPlug this back into Eq. (26), we can arrive at:\\n$$\\n\\\\begin{aligned}\\n\\\\frac{d}{d u} U(u) & \\\\propto\\\\left[4(1+\\\\gamma)^{2}-1\\\\right] u+4 \\\\gamma(1+\\\\gamma)\\\\left(1-\\\\epsilon^{2}\\\\right) u^{-\\\\left(\\\\frac{1-\\\\gamma}{1+\\\\gamma}\\\\right)}-4(1+\\\\gamma)(1+2 \\\\gamma) u^{\\\\left(\\\\frac{\\\\gamma}{1+\\\\gamma}\\\\right)} \\\\\\\\\\n\\\\Longrightarrow U(u) & \\\\propto\\\\left(2-\\\\frac{1}{2(1+\\\\gamma)^{2}}\\\\right) u^{2}+2\\\\left(1-\\\\epsilon^{2}\\\\right) u^{\\\\left(\\\\frac{2 \\\\gamma}{1+\\\\gamma}\\\\right)}-4 u^{\\\\left(\\\\frac{1+2 \\\\gamma}{1+\\\\gamma}\\\\right)}+W\\n\\\\end{aligned}\\n\\\\tag{28}\\n$$\\nwhere $W$ is a constant so that we can assign $U(u=1)=0$. For $\\\\epsilon=0.12$ and $\\\\gamma=0.05$, we get $W=0.48231$. Following that, we use Eq. (27), the maximum distance corresponds to $\\\\theta=0$ and thus $u_{\\\\triangleright}=0.87439$, the minimum distance corresponds to $\\\\theta=\\\\pi / 2$ and thus $u_{\\\\triangleleft}=1.1264$. The ratio of interests, therefore, can be found directly:\\n$$\\n\\\\frac{U\\\\left(u=u_{\\\\triangleleft}\\\\right)}{U\\\\left(u=u_{\\\\triangleright}\\\\right)} \\\\approx-0.6864\\n$$\\nWe plot the interacting potential, up to a pre-factor as given in Eq. (28), in the figure below.\\n\\n\\n\\n<img_4284>']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_58": {
    "pid": "phy_58",
    "question": "Consider a uniform isosceles triangle prism $\\mathrm{ABC}$, with the apex angle $\\theta=110^{\\circ}$ at vertex $\\mathrm{A}$. One of the sides, $\\mathrm{AC}$, is coated with silver, allowing it to function as a mirror. When a monochrome light-ray of wavelength $\\lambda$ approaches side $\\mathrm{AB}$ at an angle of incidence $\\alpha$, it first refracts, then reaches side AC, reflects, and continues to base BC. After another refraction, the ray eventually exits the prism at the angle of emergence which is also equal to the angle of incidence (see Fig. A).\n<image_1>\n\n\n\nWhat is the relative refractive index of the prism for that particular wavelength $\\lambda$ with respect to the outside environment, given that $\\alpha=70^{\\circ}$.",
    "options": [
      "1.64",
      "1.5436",
      "1.5",
      "1.06"
    ],
    "answer": "B",
    "solution": "[\"The light-path refracts on side $A B$ at point $M$, reflects on side $A C$ at point $N$ and refracts on base $\\\\mathrm{BC}$ at point $\\\\mathrm{P}$ (see Fig. A). Define the angle of refraction inside the prism to be $\\\\beta$, then from Snell's law:\\n$$\\n\\\\sin \\\\alpha=n \\\\sin \\\\beta .\\n\\\\tag{29}\\n$$\\n\\nFrom the law of reflection and the $180^{\\\\circ}$-sum of three interior angles inside any triangles:\\n$$\\n\\\\begin{aligned}\\n\\\\widehat{\\\\mathrm{MNA}} & =180^{\\\\circ}-\\\\widehat{\\\\mathrm{NAM}}-\\\\widehat{\\\\mathrm{AMN}}=180^{\\\\circ}-\\\\theta-\\\\left(90^{\\\\circ}-\\\\beta\\\\right) \\\\\\\\\\n& =\\\\widehat{\\\\mathrm{PNC}}=180^{\\\\circ}-\\\\widehat{\\\\mathrm{NCP}}-\\\\widehat{\\\\mathrm{CPN}}=180^{\\\\circ}-\\\\left(\\\\frac{180^{\\\\circ}-\\\\theta}{2}\\\\right)-\\\\left(90^{\\\\circ}+\\\\beta\\\\right),\\n\\\\end{aligned}\\n$$\\nwe obtain the refraction angle $\\\\beta$ to be:\\n$$\\n\\\\beta=\\\\frac{3 \\\\theta-180^{\\\\circ}}{4}\\n$$\\nPlug this finding into Eq. (29), we get the relative refraction index of the prism with respect to the outside environment:\\n$$\\nn=\\\\frac{\\\\sin \\\\alpha}{\\\\sin \\\\beta}=\\\\left.\\\\frac{\\\\sin \\\\alpha}{\\\\sin \\\\left(\\\\frac{3 \\\\theta-180^{\\\\circ}}{4}\\\\right)}\\\\right|_{\\\\alpha=70^{\\\\circ}, \\\\theta=110^{\\\\circ}} \\\\approx 1.5436\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_59": {
    "pid": "phy_59",
    "question": "Field-drive is a locomotion mechanism that is analogous to general relativistic warp-drive. In this mechanism, an active particle continuously climbs up the field-gradient generated by its own influence on the environment so that the particle can bootstrap itself into a constant non-zero velocity motion. Consider a field-drive in one-dimensional (the $\\mathrm{O} x$ axis) environment, where the position of the particle at time $t$ is given by $X(t)$ and its instantaneous velocity follows from:\n$$\n\\frac{\\mathrm{d}}{\\mathrm{d} t} X(t)=\\left.\\kappa \\frac{\\partial}{\\partial x} R(x, t)\\right|_{x=X(t)}\n$$\nin which $\\kappa$ is called the guiding coefficient and $R(x, t)$ is the field-value in this space. Note that, the operation ... $\\left.\\right|_{x=X(t)}$ means you have to calculate the part in ... first, then replace $x$ with $X(t)$. For a biological example, the active particle can be a cell, the field can be the nutrient concentration, and the strategy of climbing up the gradient can be chemotaxis. The cell consumes the nutrient and also responses to the local nutrient concentration, biasing its movement toward the direction where the concentration increases the most. If the nutrient is not diffusive and always recovers locally (e.g. a surface secretion) to the value which we defined to be 0 , then its dynamics can usually be approximated by:\n$$\n\\frac{\\partial}{\\partial t} R(x, t)=-\\frac{1}{\\tau} R(x, t)-\\gamma \\exp \\left\\{-\\frac{[x-X(t)]^{2}}{2 \\lambda^{2}}\\right\\}\n$$\nwhere $\\tau$ is the timescale of recovery, $\\gamma$ is the consumption, and $\\lambda$ is the characteristic radius of influence. Before we inoculate the cell into the environment, $R=0$ everywhere at any time. What is the smallest guiding coefficient $\\kappa$ (in $\\mu \\mathrm{m}^{2} / \\mathrm{s}$ ) for field-drive to emerge, if the parameters are $\\tau=50 \\mathrm{~s}, \\gamma=1 \\mathrm{~s}^{-1}$, and $\\lambda=10 \\mu \\mathrm{m}$.\n\n\n\n<image_1>",
    "options": [
      "5 \\times 10^{5}",
      "4 \\times 10^{-2}",
      "4 \\times 10^2",
      "2 \\, \\mu \\text{m}"
    ],
    "answer": "B",
    "solution": "['Assume that we inoculate the cell into the environment at position $x=0$ and $t=0$. The field dynamics at $t>0$ can be rewritten as:\\n$$\\n\\\\begin{array}{r}\\n\\\\frac{\\\\partial}{\\\\partial t} R(x, t)+\\\\frac{1}{\\\\tau} R(x, t)=\\\\exp \\\\left(-\\\\frac{t}{\\\\tau}\\\\right) \\\\partial_{t}\\\\left[\\\\exp \\\\left(+\\\\frac{t}{\\\\tau}\\\\right) R(x, t)\\\\right]=-\\\\gamma \\\\exp \\\\left\\\\{-\\\\frac{[x-X(t)]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\} \\\\\\\\\\n\\\\Longrightarrow \\\\exp \\\\left(+\\\\frac{t}{\\\\tau}\\\\right) R(x, t)=\\\\int_{0}^{t} d t^{\\\\prime} \\\\exp \\\\left(+\\\\frac{t^{\\\\prime}}{\\\\tau}\\\\right)\\\\left(-\\\\gamma \\\\exp \\\\left\\\\{-\\\\frac{\\\\left[x-X\\\\left(t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\}\\\\right) \\\\\\\\\\n\\\\Longrightarrow R(x, t)=-\\\\gamma \\\\int_{0}^{t} d t^{\\\\prime} \\\\exp \\\\left\\\\{-\\\\frac{t-t^{\\\\prime}}{\\\\tau}-\\\\frac{\\\\left[x-X\\\\left(t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\} .\\n\\\\end{array}\\n\\\\tag{39}\\n$$\\nIf the cell can field-drive at a constant velocity $W>0$, then after a very long time $t \\\\rightarrow+\\\\infty$ we expect the cell will be in a steady-state, moving at this velocity. For consistency, this field-drive velocity $W$ should related to the field gradient evaluated at $x=X(t)$ such that:\\n$$\\nW=\\\\left.\\\\kappa \\\\partial_{x} R(x, t)\\\\right|_{x=X(t)}\\n\\\\tag{40}\\n$$\\nFrom Eq. (39) we obtain:\\n$$\\n\\\\begin{aligned}\\nW & =\\\\left.\\\\kappa \\\\partial_{x}\\\\left(-\\\\gamma \\\\int_{0}^{t} d t^{\\\\prime} \\\\exp \\\\left\\\\{-\\\\frac{t-t^{\\\\prime}}{\\\\tau}-\\\\frac{\\\\left[x-X\\\\left(t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\}\\\\right)\\\\right|_{x=X(t)} \\\\\\\\\\n& =\\\\left.\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{t} d t^{\\\\prime}\\\\left[x-X\\\\left(t^{\\\\prime}\\\\right)\\\\right] \\\\exp \\\\left\\\\{-\\\\frac{t-t^{\\\\prime}}{\\\\tau}-\\\\frac{\\\\left[x-X\\\\left(t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\}\\\\right|_{x=X(t)} \\\\\\\\\\n& =\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{t} d t^{\\\\prime}\\\\left[X(t)-X\\\\left(t^{\\\\prime}\\\\right)\\\\right] \\\\exp \\\\left\\\\{-\\\\frac{t-t^{\\\\prime}}{\\\\tau}-\\\\frac{\\\\left[X(t)-X\\\\left(t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\} .\\n\\\\end{aligned}\\n$$\\nWe then use the steady field-drive condition $X(t)-X\\\\left(t^{\\\\prime}\\\\right)=W\\\\left(t-t^{\\\\prime}\\\\right)$ at $t \\\\rightarrow+\\\\infty$ and define $t^{\\\\prime \\\\prime}=t-t^{\\\\prime}$, so that the temporal integration $\\\\int d t^{\\\\prime \\\\prime}$ will run from 0 to $+\\\\infty$ :\\n$$\\n\\\\begin{aligned}\\nW & =\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{t} d t^{\\\\prime}\\\\left[W\\\\left(t-t^{\\\\prime}\\\\right)\\\\right] \\\\exp \\\\left\\\\{-\\\\frac{t-t^{\\\\prime}}{\\\\tau}-\\\\frac{\\\\left[W\\\\left(t-t^{\\\\prime}\\\\right)\\\\right]^{2}}{2 \\\\lambda^{2}}\\\\right\\\\} \\\\\\\\\\n& =\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{+\\\\infty} d t^{\\\\prime \\\\prime}\\\\left(W t^{\\\\prime \\\\prime}\\\\right) \\\\exp \\\\left[-\\\\frac{t^{\\\\prime \\\\prime}}{\\\\tau}-\\\\frac{\\\\left(W t^{\\\\prime \\\\prime}\\\\right)^{2}}{2 \\\\lambda^{2}}\\\\right] .\\n\\\\end{aligned}\\n\\\\tag{41}\\n$$\\n\\nFor the set of parameter values $(\\\\kappa, \\\\tau, \\\\gamma, \\\\lambda)$ when the field-drive mechanism start to emerge, we can treat the field-drive velocity as infinitesimal small $W=0^{+}$. Thus, divide both sides of Eq.(41) by $W$, we can arrive at:\\n$$\\n1=\\\\left.\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{+\\\\infty} d t^{\\\\prime} t^{\\\\prime \\\\prime} \\\\exp \\\\left[-\\\\frac{t^{\\\\prime \\\\prime}}{\\\\tau}-\\\\frac{\\\\left(W t^{\\\\prime \\\\prime}\\\\right)^{2}}{2 \\\\lambda^{2}}\\\\right]\\\\right|_{W=0^{+}}=\\\\frac{\\\\kappa \\\\gamma}{\\\\lambda^{2}} \\\\int_{0}^{+\\\\infty} d t^{\\\\prime} t^{\\\\prime \\\\prime} \\\\exp \\\\left(-\\\\frac{t^{\\\\prime \\\\prime}}{\\\\tau}\\\\right)=\\\\frac{\\\\kappa \\\\gamma \\\\tau^{2}}{\\\\lambda^{2}}\\n$$\\nHence, the smallest guiding coefficient that give us field-drive, for $\\\\tau=50 \\\\mathrm{~s}, \\\\gamma=1 \\\\mathrm{~s}^{-1}, \\\\lambda=10 \\\\mu \\\\mathrm{m}$ :\\n$$\\n\\\\kappa=\\\\frac{\\\\lambda^{2}}{\\\\gamma \\\\tau^{2}}=4 \\\\times 10^{-2} \\\\mu \\\\mathrm{m} / \\\\mathrm{s}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "- Proton mass, $m_{p}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Neutron mass, $m_{n}=1.67 \\cdot 10^{-27} \\mathrm{~kg}$\n- Electron mass, $m_{e}=9.11 \\cdot 10^{-31} \\mathrm{~kg}$\n- Avogadro's constant, $N_{0}=6.02 \\cdot 10^{23} \\mathrm{~mol}^{-1}$\n- Universal gas constant, $R=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K})$\n- Boltzmann's constant, $k_{B}=1.38 \\cdot 10^{-23} \\mathrm{~J} / \\mathrm{K}$\n- Electron charge magnitude, $e=1.60 \\cdot 10^{-19} \\mathrm{C}$\n- 1 electron volt, $1 \\mathrm{eV}=1.60 \\cdot 10^{-19} \\mathrm{~J}$\n- Speed of light, $c=3.00 \\cdot 10^{8} \\mathrm{~m} / \\mathrm{s}$\n- Universal Gravitational constant,\n\n$$\nG=6.67 \\cdot 10^{-11}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{kg}^{2}\n$$\n\n- Solar Mass\n\n$$\nM_{\\odot}=1.988 \\cdot 10^{30} \\mathrm{~kg}\n$$\n\n- Acceleration due to gravity, $g=9.8 \\mathrm{~m} / \\mathrm{s}^{2}$\n- 1 unified atomic mass unit,\n\n$$\n1 \\mathrm{u}=1.66 \\cdot 10^{-27} \\mathrm{~kg}=931 \\mathrm{MeV} / \\mathrm{c}^{2}\n$$\n\n- Planck's constant,\n\n$$\nh=6.63 \\cdot 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.41 \\cdot 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s}\n$$\n\n- Permittivity of free space,\n\n$$\n\\epsilon_{0}=8.85 \\cdot 10^{-12} \\mathrm{C}^{2} /\\left(\\mathrm{N} \\cdot \\mathrm{m}^{2}\\right)\n$$\n\n- Coulomb's law constant,\n\n$$\nk=\\frac{1}{4 \\pi \\epsilon_{0}}=8.99 \\cdot 10^{9}\\left(\\mathrm{~N} \\cdot \\mathrm{m}^{2}\\right) / \\mathrm{C}^{2}\n$$\n\n- Permeability of free space,\n\n$$\n\\mu_{0}=4 \\pi \\cdot 10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A}\n$$\n\n- Magnetic constant,\n\n$$\n\\frac{\\mu_{0}}{4 \\pi}=1 \\cdot 10^{-7}(\\mathrm{~T} \\cdot \\mathrm{m}) / \\mathrm{A}\n$$\n\n- 1 atmospheric pressure,\n\n$$\n1 \\mathrm{~atm}=1.01 \\cdot 10^{5} \\mathrm{~N} / \\mathrm{m}^{2}=1.01 \\cdot 10^{5} \\mathrm{~Pa}\n$$\n\n- Wien's displacement constant, $b=2.9$. $10^{-3} \\mathrm{~m} \\cdot \\mathrm{K}$\n- Stefan-Boltzmann constant,\n\n$$\n\\sigma=5.67 \\cdot 10^{-8} \\mathrm{~W} / \\mathrm{m}^{2} / \\mathrm{K}^{4}\n$$",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_60": {
    "pid": "phy_60",
    "question": "1. Restore equilibrium \n\nA wooden plank of length $1 \\mathrm{~m}$ and uniform cross-section is hinged at one end to the bottom of a tank as shown in figure. The tank is filled with water up to a height $0.5 \\mathrm{~m}$. The specific gravity of the plank (or ratio of plank density to water density) is 0.5 . Find the angle $\\theta$ that the plank makes with the vertical in the equilibrium position (exclude the case $\\theta=0^{\\circ}$ )\n\n<image_1>",
    "options": [
      "30^{\\circ}",
      "24.4^\\circ",
      "\\theta=45",
      "\\theta=30"
    ],
    "answer": "C",
    "solution": "['<img_4519>\\n\\nOne could find the net buoyant force by integrating about the point of reference. Or one can directly use the fact this upthrust force acts at the center of portion submerged in water.\\n\\nA sample solution:\\n\\nThree forces will act on the plank-\\n\\n1. Weight which will act at centre of plank.\\n\\n\\n2. Upthrust which will act at centre of submerged portion.\\n3. Force from the hinge at $\\\\mathrm{O}$.\\n\\nNotation used: Submerged length $=0.5 \\\\sec \\\\theta, \\\\mathrm{F}=$ Upthrust, $w=$ Weight\\n\\nTaking moments of all three forces about point O. Moment of hinge force will be zero.\\n\\n$$\\n(A \\\\lg \\\\rho) \\\\frac{l}{2} \\\\sin \\\\theta=A(0.5 \\\\sec \\\\theta)\\\\left(\\\\rho_{w}\\\\right)(g)\\\\left(\\\\frac{0.5 \\\\sec \\\\theta}{2}\\\\right) \\\\sin \\\\theta\\n\\\\tag{1}\\n$$\\n\\nSolve to get $\\\\theta=45^{\\\\circ}$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_61": {
    "pid": "phy_61",
    "question": "(b) If the concave part is filled with water of refractive index $4 / 3$, find the distance through which the pin should be moved, so that the image of the pin again coincides with the pin.\n\n<image_1>",
    "options": [
      "10 \\text{ cm}",
      "1.16",
      "3.46 \\, \\text{cm}",
      "6.18"
    ],
    "answer": "B",
    "solution": "['There could be different approaches to solve this. A sample solution:\\n\\nNow, before striking with the concave surface, the ray is first refracted from a plane surface. So, let $\\\\mathrm{x}$ be the distance of pin, then the plane surface will form its image at a distance $\\\\frac{4}{3} x\\\\left(h_{a p p}=\\\\mu h\\\\right)$ from it.\\n\\nUsing,\\n\\n$$\\n\\\\frac{\\\\mu_{2}}{\\\\nu}-\\\\frac{\\\\mu_{1}}{u}=\\\\frac{\\\\mu_{2}-\\\\mu_{1}}{R}\\n\\\\tag{10}\\n$$\\n\\nwith proper signs,\\n\\n$$\\n\\\\frac{1.5}{-20}-\\\\frac{4 / 3}{-4 x / 3}=\\\\frac{1.5-4 / 3}{-60}\\n\\\\tag{11}\\n$$\\n\\nSolve to get $x=13.84 \\\\mathrm{~cm}$.\\n\\nTherefore $\\\\Delta x=x_{1}-x_{2}=15 \\\\mathrm{~cm}-13.84 \\\\mathrm{~cm}=1.16 \\\\mathrm{~cm}$ (Downwards)']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "3. Stick a pin there \n\nThe convex surface of a thin concavo-convex lens of glass of refractive index 1.5 has a radius of curvature $20 \\mathrm{~cm}$. The concave surface has a radius of curvature $60 \\mathrm{~cm}$. The convex side is silvered and placed on a horizontal surface.\nContext question:\n(a) Where should a pin be placed on the optical axis such that its image is formed at the same place?\nContext answer:\n\\boxed{15}\n",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_62": {
    "pid": "phy_62",
    "question": "3.1 Calculate the electric field intensity $\\vec{E}_{p}$ at a distance $r$ from an ideal electric dipole $\\vec{p}$ at the origin $\\mathrm{O}$ along the direction of $\\vec{p}$ in Figure 2.\n\n$p=2 a q, \\quad r \\gg a$\n\n<image_1>\n\nFIGURE 2",
    "options": [
      "3",
      "aq",
      "E_{p}=\\frac{2 p}{4 \\pi \\varepsilon_{0} r^{3}}",
      "E_{p}"
    ],
    "answer": "C",
    "solution": "[\"Using Coulomb's Law, we write the electric field at a distance $r$ is given by\\n\\n$$\\n\\\\begin{aligned}\\n& E_{p}=\\\\frac{q}{4 \\\\pi \\\\varepsilon_{0}(r-a)^{2}}-\\\\frac{q}{4 \\\\pi \\\\varepsilon_{0}(r+a)^{2}} \\\\\\\\\\n& E_{p}=\\\\frac{q}{4 \\\\pi \\\\varepsilon_{0} r^{2}}\\\\left(\\\\frac{1}{\\\\left(1-\\\\frac{a}{r}\\\\right)^{2}}-\\\\frac{1}{\\\\left(1+\\\\frac{a}{r}\\\\right)^{2}}\\\\right)\\n\\\\end{aligned}\\n\\\\tag{1}\\n$$\\n\\nUsing binomial expansion for small $a$,\\n\\n$$\\n\\\\begin{aligned}\\nE_{p} & =\\\\frac{q}{4 \\\\pi \\\\varepsilon_{0} r^{2}}\\\\left(1+\\\\frac{2 a}{r}-1+\\\\frac{2 a}{r}\\\\right) \\\\\\\\\\n& =+\\\\frac{4 q a}{4 \\\\pi \\\\varepsilon_{0} r^{3}}=+\\\\frac{q a}{\\\\pi \\\\varepsilon_{0} r^{3}} \\\\\\\\\\n& =\\\\frac{2 p}{4 \\\\pi \\\\varepsilon_{0} r^{3}}\\n\\\\end{aligned}\\n\\\\tag{2}\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "3. To Commemorate the Centenary of Rutherford's Atomic Nucleus: the Scattering of an Ion by a Neutral Atom \n\n<img_4421>\n\nAn ion of mass $m$, charge $Q$, is moving with an initial non-relativistic speed $v_{0}$ from a great distance towards the vicinity of a neutral atom of mass $M>>m$ and of electrical polarisability $\\alpha$. The impact parameter is $b$ as shown in Figure 1.\n\nThe atom is instantaneously polarised by the electric field $\\vec{E}$ of the in-coming (approaching) ion. The resulting electric dipole moment of the atom is $\\vec{p}=\\alpha \\vec{E}$. Ignore any radiative losses in this problem.",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_63": {
    "pid": "phy_63",
    "question": "<image_1>\n\nIn certain lakes there is a strange phenomenon called \"seiching\" which is an oscillation of the water. Lakes in which you can see this phenomenon are normally long compared with the depth and also narrow. It is natural to see waves in a lake but not something like the seiching, where the entire water volume oscillates, like the coffee in a cup that you carry to a waiting guest.\n\nIn order to create a model of the seiching we look at water in a rectangular container. The length of the container is $L$ and the depth of the water is $h$. Assume that the surface of the water to begin with makes a small angle with the horizontal. The seiching will then start, and we assume that the water surface continues to be plane but oscillates around an axis in the horizontal plane and located in the middle of the container.\n\nCreate a model of the movement of the water and derive a formula for the oscillation period $T$. The starting conditions are given in figure above.\n\nAssume that $\\xi<<h$. The table below shows experimental oscillation periods for different water depths in two containers of different lengths. Check in some reasonable way how well the formula that you have derived agrees with the experimental data. Give your opinion on the quality of your model.\n\nTable 1. $L=479 \\mathrm{~mm}$\n\n| $h / m m$ | 30 | 50 | 69 | 88 | 107 | 124 | 142 |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| $T / s$ | 1.78 | 1.40 | 1.18 | 1.08 | 1.00 | 0.91 | 0.82 |\n\nTable 2. $L=143 \\mathrm{~mm}$\n\n| $h / m m$ | 31 | 38 | 58 | 67 | 124 |\n| :---: | :---: | :---: | :---: | :---: | ---: |\n| $T / s$ | 0.52 | 0.52 | 0.43 | 0.35 | 0.28 |\n\nThe graph below shows results from measurements in lake V\u00e4ttern in Sweden. This lake has a length of $123 \\mathrm{~km}$ and a mean depth of $50 \\mathrm{~m}$. What is the time scale in the graph?\n\n\n\n<image_2>\n\nThe water surface level in Bastudalen (northern end of lake V\u00e4ttern) and J\u00f6nk\u00f6ping (southern end).",
    "options": [
      "T \\approx 2 \\text{ to }",
      "\\frac{\\pi L}{\\sqrt{3 h}}",
      "556,914",
      "3 \\, \\text{hours}"
    ],
    "answer": "B",
    "solution": "['In the coordinate system of the figure, we have for the centre of mass coordinates of the two triangular parts of the water\\n\\n$$\\n\\\\left(x_{1}, y_{1}\\\\right)=(L / 3, h / 2+\\\\xi / 3) \\\\quad\\\\left(x_{2}, y_{2}\\\\right)=(-L / 3, h / 2-\\\\xi / 3) .\\n$$\\n\\nFor the entire water mass the centre of mass coordinates will then be\\n\\n$$\\n\\\\left(x_{C O M}, y_{C O M}\\\\right)=\\\\left(\\\\frac{\\\\xi L}{6 h}, \\\\frac{\\\\xi^{2}}{6 h}\\\\right)\\n$$\\n\\nDue to that the $y$ component is quadratic in $\\\\xi$ will be much much smaller than the $x$ component.\\n\\nThe velocities of the water mass are\\n\\n$$\\n\\\\left(v_{x}, v_{y}\\\\right)=\\\\left(\\\\frac{g_{L}}{6 h}, \\\\frac{g_{\\\\xi}}{3 h}\\\\right)\\n$$\\n\\nand again the vertical component is much smaller the the horizontal one.\\n\\nWe now in our model neglect the vertical components. The total energy (kinetic + potential) will then be\\n\\n$$\\nW=W_{K}+W_{P}=\\\\frac{1}{2} M \\\\frac{\\\\xi^{2} L^{2}}{36 h^{2}}+M g \\\\frac{\\\\xi^{2}}{6 h^{2}}\\n$$\\n\\nFor a harmonic oscillator we have\\n\\n$$\\nW=W_{K}+W_{P}=\\\\frac{1}{2} m x^{2}+\\\\frac{1}{2} m \\\\omega^{2} x^{2}\\n$$\\n\\nIdentifying gives\\n\\n$$\\n\\\\omega=\\\\sqrt{\\\\frac{12 g h}{L}} \\\\text { or } T_{\\\\text {model }}=\\\\frac{\\\\pi L}{\\\\sqrt{3 h}} \\\\text {. }\\n$$\\n\\nComparing with the experimental data we find $T_{\\\\text {experiment }} \\\\approx 1.1 \\\\cdot T_{\\\\text {model }}$ our model gives a slight underestimation of the oscillation period.\\n\\nApplying our corrected model on the V\u00e4ttern data we have that the oscillation period of the seiching is about 3 hours.']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_64": {
    "pid": "phy_64",
    "question": "Initially, a switch $S$ is unshorted in the circuit shown in the figure on the right, a capacitor of capacitance $2 C$ carries the electric charge $q_{0}$, a capacitor of capacitance $C$ is uncharged, and there are no electric currents in both coils of inductance $L$ and $2 L$, respectively. The capacitor starts to discharge and at the moment when the current in the coils reaches its maximum value, the switch $S$ is instantly shorted. Find the maximum current $I_{\\max }$ through the switch $S$ thereafter.\n\n<image_1>",
    "options": [
      "1",
      "q_0",
      "I_{\\max }",
      "I_{\\max }=\\frac{q_{0}}{\\sqrt{2 L C}}"
    ],
    "answer": "D",
    "solution": "['At the moment when the current in the coils is a maximum, the total voltage across the coils is equal to zero, so the capacitor voltages must be equal in magnitude and opposite in polarity. Let $U$ be a voltage on the capacitors at the time moment just mentioned and $I_{0}$ be that maximum current. According to the law of charge conservation\\n\\nthus,\\n\\n$$\\nq_{0}=2 C U+C U\\n\\\\tag{C1.1}\\n$$\\n\\n$$\\nU=\\\\frac{q_{0}}{3 C}\\n\\\\tag{C1.2}\\n$$\\n\\nThen, from the energy conservation law\\n\\n$$\\n\\\\frac{q_{0}^{2}}{2 \\\\cdot 2 C}=\\\\frac{L I_{0}^{2}}{2}+\\\\frac{2 L I_{0}^{2}}{2}+\\\\frac{C U^{2}}{2}+\\\\frac{2 C U^{2}}{2}\\n\\\\tag{C1.3}\\n$$\\n\\nthe maximum current is found as\\n\\n$$\\nI_{0}=\\\\frac{q_{0}}{3 \\\\sqrt{2 L C}}\\n\\\\tag{C1.4}\\n$$\\n\\nAfter the key $K$ is shortened there will be independent oscillations in both circuits with the frequency\\n\\n$$\\n\\\\omega=\\\\frac{1}{\\\\sqrt{2 L C}}\\n\\\\tag{C1.5}\\n$$\\n\\nand their amplitudes are obtained from the corresponding energy conservation laws written as\\n\\n$$\\n\\\\frac{2 C U^{2}}{2}+\\\\frac{L I_{0}^{2}}{2}=\\\\frac{L J_{1}^{2}}{2}\\n\\\\tag{C1.6}\\n$$\\n$$\\n\\\\frac{C U^{2}}{2}+\\\\frac{2 L I_{0}^{2}}{2}=\\\\frac{2 L J_{2}^{2}}{2} .\\n\\\\tag{C1.7}\\n$$\\n\\nHence, the corresponding amplitudes are found as\\n\\n$$\\nJ_{1}  =\\\\sqrt{5} I_{0},\\n\\\\tag{C1.8}\\n$$\\n$$\\nJ_{2}  =\\\\sqrt{2} I_{0} .\\n\\\\tag{C1.9}\\n$$\\n\\nChoose the positive directions of the currents in the circuits as shown in the figure on the right. Then, the current flowing through the key is written as follows\\n\\n$$\\nI=I_{1}-I_{2}\\n\\\\tag{C1.10}\\n$$\\n\\nThe currents depend on time as\\n\\n$$\\nI_{1}(t)=A \\\\cos \\\\omega t+B \\\\sin \\\\omega t\\n\\\\tag{C1.11}\\n$$\\n$$\\nI_{2}(t)=D \\\\cos \\\\omega t+F \\\\sin \\\\omega t\\n\\\\tag{C1.12}\\n$$\\n\\n<img_4418>\\n\\nThe constants $A, B, D, F$ can be determined from the initial values of the currents and their amplitudes by putting down the following set of equations\\n\\n$$\\nI_{1}(0)=A=I_{0},\\n\\\\tag{C1.13}\\n$$\\n$$\\nA^{2}+B^{2}=J_{1}^{2}, \\n\\\\tag{C1.14}\\n$$\\n$$\\nI_{2}(0)=D=I_{0}, \\n\\\\tag{C1.15}\\n$$\\n$$\\nD^{2}+F^{2}=J_{2}^{2}\\n\\\\tag{C1.16}\\n$$\\n\\nSolving (C1.13)-(C1.16) it is found that\\n\\n$$\\nB=2 I_{0}, \\n\\\\tag{C1.17}\\n$$\\n$$\\nF=-I_{0},\\n\\\\tag{C1.18}\\n$$\\n\\nThe sign in $F$ is chosen negative, since at the time moment of the key shortening the current in the coil $2 L$ decreases.\\n\\nThus, the dependence of the currents on time takes the following form\\n\\n$$\\nI_{1}(t)=I_{0}(\\\\cos \\\\omega t+2 \\\\sin \\\\omega t),\\n\\\\tag{C1.19}\\n$$\\n$$\\nI_{2}(t)=I_{0}(\\\\cos \\\\omega t-\\\\sin \\\\omega t) .\\n\\\\tag{C1.20}\\n$$\\n\\nIn accordance with (C1.10), the current in the key is dependent on time according to\\n\\n$$\\nI(t)=I_{1}(t)-I_{2}(t)=3 I_{0} \\\\sin \\\\omega t .\\n\\\\tag{C1.21}\\n$$\\n\\nHence, the amplitude of the current in the key is obtained as\\n\\n$$\\nI_{\\\\max }=3 I_{0}=\\\\omega q_{0}=\\\\frac{q_{0}}{\\\\sqrt{2 L C}}\\n\\\\tag{C1.22}\\n$$'\n 'Instead of determining the coefficients $A, B, D, F$ the vector diagram shown in the figure on the right can be used. The segment $A C$ represents the current sought and its projection on the current axis is zero at the time of the key shortening. The current $I_{1}$ in the coil of inductance $L$ grows at the same time moment because the capacitor $2 C$ continues to discharge, thus, this current is depicted in the figure by the segment $O A$. The current $I_{2}$ in the coil of inductance $2 L$ decreases at the time of the key shortening since it continues to charge the capacitor $2 C$, that is why this current is depicted in the figure by the segment $O C$.\\n\\nIt is known for above that $O B=I_{0}, O A=\\\\sqrt{5} I_{0}, O C=\\\\sqrt{2} I_{0}$. Hence, it is found from the Pythagorean theorem that\\n\\n$$\\nA B=\\\\sqrt{O A^{2}-O B^{2}}=2 I_{0}\\n\\\\tag{C2.1}\\n$$\\n$$\\nB C=\\\\sqrt{O C^{2}-O B^{2}}=I_{0}\\n\\\\tag{C2.2}\\n$$\\n\\n<img_4426>\\n\\nThus, the current sought is found as\\n\\n$$\\nI_{\\\\max }=A C=A B+B C=3 I_{0}=\\\\omega q_{0}=\\\\frac{q_{0}}{\\\\sqrt{2 L C}}\\n\\\\tag{C2.3}\\n$$\\n\\nMethod 3. Heuristic approach\\n\\nIt is clear that the current through the key performs harmonic oscillations with the frequency\\n\\n$$\\n\\\\omega=\\\\frac{1}{\\\\sqrt{2 L C}}\\n\\\\tag{C3.1}\\n$$\\n\\nand it is equal to zero at the time of the key shortening, i.e.\\n\\n$$\\nI(t)=I_{\\\\max } \\\\sin \\\\omega t\\n\\\\tag{C3.2}\\n$$\\n\\nSince the current is equal to zero at the time of the key shortening, then the current amplitude is equal to the current derivative at this time moment divided by the oscillation frequency. Let us find that current derivative. Let the capacitor of capacitance $2 C$ have the charge $q_{1}$. Then the charge on the capacitor of capacitance $C$ is found from the charge conservation law as\\n\\n$$\\nq_{2}=q_{0}-q_{1} .\\n\\\\tag{C3.3}\\n$$\\n\\nAfter shortening the key the rate of current change in the coil of inductance $L$ is obtained as\\n\\n$$\\n\\\\dot{I}_{1}=\\\\frac{q_{1}}{2 L C}\\n\\\\tag{C3.4}\\n$$\\n\\nwhereas in the coil of inductance $2 L$ it is equal to\\n\\n$$\\n\\\\dot{I}_{2}=-\\\\frac{q_{0}-q_{1}}{2 L C}\\n\\\\tag{C3.5}\\n$$\\n\\nSince the voltage polarity on the capacitors are opposite, then the current derivative with respect to time finally takes the form\\n\\n$$\\n\\\\dot{I}=\\\\dot{I}_{1}-\\\\dot{I}_{2}=\\\\frac{q_{0}}{2 L C}=\\\\omega^{2} q_{0}\\n\\\\tag{C3.6}\\n$$\\n\\nNote that this derivative is independent of the time of the key shortening!\\n\\nHence, the maximum current is found as\\n\\n$$\\nI_{\\\\max }=\\\\frac{\\\\dot{I}}{\\\\omega}=\\\\omega q_{0}=\\\\frac{q_{0}}{\\\\sqrt{2 L C}}\\n\\\\tag{C3.7}\\n$$\\n\\nand it is independent of the time of the key shortening!']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_65": {
    "pid": "phy_65",
    "question": "iii. Consider another tube, identical and parallel to the first one.\n\n<image_1>\n\nThe second tube has the same magnetic field but in the opposite direction and its centre is placed at $y=l, x=z=0$ (so that the tubes form opposite sides of a square). Determine the magnetic interaction force $F$ between the two tubes.",
    "options": [
      "\\Phi^2 L",
      "F = 2\\Phi^2",
      "F=\\frac{4-\\sqrt{2}}{8 \\pi \\mu_{0}} \\frac{\\Phi^{2}}{l^{2}}",
      "F=\\frac{4+\\sqrt{2}}"
    ],
    "answer": "C",
    "solution": "['Let us analyse, what would be the change of the magnetic energy when one of the straws is displaced to a small distance. The magnetic field inside the tubes will remain constant due to the conservation of magnetic flux, but outside, the magnetic field will be changed. The magnetic field outside the straws is defined by the following condition: there is no circulation of $\\\\vec{B}$ (because there are no currents outside the straws); there are no sources of the field lines, other than the endpoints of the straws; each of the endpoints of the straws is a source of streamlines with a fixed magnetic flux $\\\\pm \\\\Phi$. These are exactly the same condition as those which define the electric field of four charges $\\\\pm Q$. We know that if the distance between charges is much larger than the geometrical size of a charge, the charges can be considered as point charges (the electric field near the charges remains almost constant, so that the respective contribution to the change of the overall electric field energy is negligible). Therefore we can conclude that the endpoints of the straws can be considered as magnetic point charges. In order to calculate the force between two magnetic charges (magnetic monopoles), we need to establish the correspondence between magnetic and electric quantities.\\n\\nFor two electric charges $Q$ separated by a distance $a$, the force is $F=\\\\frac{1}{4 \\\\pi \\\\varepsilon_{0}} \\\\frac{Q^{2}}{a^{2}}$, and at the position of one charge, the electric field of the other charge has energy density $w=\\\\frac{1}{32 \\\\pi^{2} \\\\varepsilon_{0}} \\\\frac{Q^{2}}{a^{4}}$; hence we can write $F=8 \\\\pi w a^{2}$. This is a universal expression for the force (for the case when the field lines have the same shape as in the case of two opposite and equal by modulus electric charges) relying only on the energy density, and not related to the nature of the field; so we can apply it to the magnetic\\n\\n\\n\\nfield. Indeed, the force can be calculated as a derivative of the full field energy with respect to a virtual displacement of a field line source (electric or magnetic charge); if the energy densities of two fields are respectively equal at one point, they are equal everywhere, and so are equal the full field energies. As it follows from the Gauss law, for a point source of a fixed magnetic flux $\\\\Phi$ at a distance $a$, the induction $B=\\\\frac{1}{4 \\\\pi} \\\\frac{\\\\Phi}{a^{2}}$. So, the energy density $w=\\\\frac{B^{2}}{2 \\\\mu_{0}}=\\\\frac{1}{32 \\\\pi^{2} \\\\mu_{0}} \\\\frac{\\\\Phi^{2}}{a^{4}}$, hence\\n\\n$$\\nF=\\\\frac{1}{4 \\\\pi \\\\mu_{0}} \\\\frac{\\\\Phi^{2}}{a^{2}}\\n$$\\n\\nFor the two straws, we have four magnetic charges. The longitudinal (along a straw axis) forces cancel out (the diagonally positioned pairs of same-sign-charges push in opposite directions). The normal force is a superposition of the attraction due to the two pairs of opposite charges, $F_{1}=\\\\frac{1}{4 \\\\pi \\\\mu_{0}} \\\\frac{\\\\Phi^{2}}{l^{2}}$, and the repulsive forces of diagonal pairs, $F_{2}=\\\\frac{\\\\sqrt{2}}{8 \\\\pi \\\\mu_{0}} \\\\frac{\\\\Phi^{2}}{2 l^{2}}$. The net attractive force will be\\n\\n$$\\nF=2\\\\left(F_{1}-F_{2}\\\\right)=\\\\frac{4-\\\\sqrt{2}}{8 \\\\pi \\\\mu_{0}} \\\\frac{\\\\Phi^{2}}{l^{2}}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "Part C. Magnetic straws\n\nConsider a cylindrical tube made of a superconducting material. The length of the tube is $l$ and the inner radius is $r$ with $l \\gg r$. The centre of the tube coincides with the origin, and its axis coincides with the $z$-axis.\n\n<img_4512>\n\nThere is a magnetic flux $\\Phi$ through the central cross-section of the tube, $z=0, x^{2}+y^{2}<r^{2}$. A superconductor is a material which expels any magnetic field (the field is zero inside the material).\nContext question:\ni. Sketch five such magnetic field lines, which pass through the five red dots marked on the axial cross-section of the tube, on the designated diagram on the answer sheet.\nContext answer:\n<img_4360>\n\n\nContext question:\nii. Find the tension force $T$ along the $z$-axis in the middle of the tube (i.e. the force by which two halves of the tube, $z>0$ and $z<0$, interact with each other).\nContext answer:\n\\boxed{$T=\\frac{\\Phi^{2}}{2 \\mu_{0} \\pi r^{2}}$}\n",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_66": {
    "pid": "phy_66",
    "question": "A.6 Determine the time T that the protons take to pass through this field\n\n\n<image_1>\n\nFigure 1: Sketch of an accelerator module.",
    "options": [
      "218",
      "6.24 \\times 10^{-5}",
      "2.61 \\times 10^{-7}",
      "1.12 \\, \\text{s}"
    ],
    "answer": "A",
    "solution": "[\"2nd Newton's law\\n\\n$$\\n\\\\begin{gathered}\\nF=\\\\frac{d p}{d t} \\\\quad \\\\text { leads to } \\\\\\\\\\n\\\\frac{V \\\\cdot e}{d}=\\\\frac{p_{f}-p_{i}}{T} \\\\text { with } p_{i}=0\\n\\\\end{gathered}\\n$$\\n\\nConservation of energy:\\n\\n$$\\nE_{t o t}=m \\\\cdot c^{2}+e \\\\cdot V\\n$$\\n\\nSince\\n\\n$$\\n\\\\begin{gathered}\\nE_{t o t}^{2}=\\\\left(m \\\\cdot c^{2}\\\\right)^{2}+\\\\left(p_{f} \\\\cdot c\\\\right)^{2} \\\\\\\\\\n\\\\rightarrow p_{f}=\\\\frac{1}{c} \\\\cdot \\\\sqrt{\\\\left(m \\\\cdot c^{2}+e \\\\cdot V\\\\right)^{2}-\\\\left(m \\\\cdot c^{2}\\\\right)^{2}}=\\\\sqrt{2 e \\\\cdot m \\\\cdot V+\\\\left(\\\\frac{e \\\\cdot V}{c}\\\\right)^{2}} \\\\\\\\\\n\\\\rightarrow T=\\\\frac{d \\\\cdot p_{f}}{V \\\\cdot e}=\\\\frac{d}{V \\\\cdot e} \\\\sqrt{2 e \\\\cdot m_{p} \\\\cdot V+\\\\left(\\\\frac{e \\\\cdot V}{c}\\\\right)^{2}} \\\\\\\\\\nT=218 \\\\mathrm{~ns}\\n\\\\end{gathered}\\n$$\"\n \"2nd Newton's law\\n\\n$$\\n\\\\frac{V \\\\cdot e}{d}=\\\\frac{p_{f}-p_{i}}{T} \\\\text { with } p_{i}=0\\n$$\\n\\nvelocity from A1 or from conservation of energy\\n\\n$$\\nv=c \\\\cdot \\\\sqrt{1-\\\\left(\\\\frac{m_{p} \\\\cdot c^{2}}{m_{p} \\\\cdot c^{2}+V \\\\cdot e}\\\\right)^{2}}\\n$$\\n\\nand hence for $\\\\gamma$\\n\\n$$\\n\\\\begin{gathered}\\n\\\\gamma=1 / \\\\sqrt{1-\\\\frac{v^{2}}{c^{2}}}=1+\\\\frac{e \\\\cdot V}{m_{p} \\\\cdot c^{2}} \\\\\\\\\\n\\\\rightarrow p_{f}=\\\\gamma \\\\cdot m_{p} \\\\cdot v=\\\\left(1+\\\\frac{e \\\\cdot V}{m_{p} \\\\cdot c^{2}}\\\\right) \\\\cdot m_{p} \\\\cdot c \\\\cdot \\\\sqrt{1-\\\\left(\\\\frac{m_{p} \\\\cdot c^{2}}{m_{p} \\\\cdot c^{2}+V \\\\cdot e}\\\\right)^{2}} \\\\\\\\\\n\\\\rightarrow T=\\\\frac{d \\\\cdot p_{f}}{V \\\\cdot e}=\\\\frac{d \\\\cdot m_{p} \\\\cdot c}{V \\\\cdot e} \\\\cdot \\\\sqrt{\\\\left(\\\\frac{m_{p} \\\\cdot c^{2}+e \\\\cdot V}{m_{p} \\\\cdot c^{2}}\\\\right)^{2}-1}=\\\\frac{d}{V \\\\cdot e} \\\\sqrt{2 e \\\\cdot m_{p} \\\\cdot V+\\\\left(\\\\frac{e \\\\cdot V}{c}\\\\right)^{2}} \\\\\\\\\\nT=218 \\\\mathrm{~ns}\\n\\\\end{gathered}\\n$$\"\n 'Energy increases linearly with distance $\\\\mathrm{x}$\\n\\n$$\\n\\\\begin{gathered}\\nE(x)=\\\\frac{e \\\\cdot V \\\\cdot x}{d} \\\\\\\\\\nt=\\\\int d t=\\\\int_{0}^{d} \\\\frac{d x}{v(x)} \\\\\\\\\\nv(x)=c \\\\cdot \\\\sqrt{1-\\\\left(\\\\frac{m_{p} \\\\cdot c^{2}}{m_{p} \\\\cdot c^{2}+\\\\frac{e \\\\cdot V \\\\cdot x}{d}}\\\\right)^{2}}=c \\\\cdot \\\\frac{\\\\sqrt{\\\\left(m_{p} \\\\cdot c^{2}+\\\\frac{e \\\\cdot V \\\\cdot x}{d}\\\\right)^{2}-\\\\left(m_{p} \\\\cdot c^{2}\\\\right)^{2}}}{m_{p} \\\\cdot c^{2}+\\\\frac{e \\\\cdot V \\\\cdot x}{d}} \\\\\\\\\\n=c \\\\cdot \\\\frac{\\\\sqrt{\\\\left(1+\\\\frac{e \\\\cdot V \\\\cdot x}{d \\\\cdot m_{p} \\\\cdot c^{2}}\\\\right)^{2}-1}}{1+\\\\frac{e \\\\cdot V \\\\cdot x}{d \\\\cdot m_{p} \\\\cdot c^{2}}}\\n\\\\end{gathered}\\n$$\\n\\nSubstitution : $\\\\xi=\\\\frac{e \\\\cdot V \\\\cdot x}{d \\\\cdot m_{p} \\\\cdot c^{2}} \\\\quad \\\\frac{d \\\\xi}{d x}=\\\\frac{e \\\\cdot V}{d \\\\cdot m_{p} \\\\cdot c^{2}}$\\n\\n$$\\n\\\\rightarrow t=\\\\frac{1}{c} \\\\int_{0}^{b} \\\\frac{1+\\\\xi}{\\\\sqrt{(1+\\\\xi)^{2}-1}} \\\\frac{d \\\\cdot m_{p} \\\\cdot c^{2}}{e \\\\cdot V} d \\\\xi \\\\quad b=\\\\frac{e \\\\cdot V}{m_{p} \\\\cdot c^{2}}\\n$$\\n\\n$$\\n1+\\\\xi:=\\\\cosh (s) \\\\quad \\\\frac{d \\\\xi}{d s}=\\\\sinh (s)\\n$$\\n\\n0.1\\n\\n$$\\nt=\\\\frac{m_{p} \\\\cdot c \\\\cdot d}{e \\\\cdot V} \\\\int \\\\frac{\\\\cosh (s) \\\\cdot \\\\sinh (s) d s}{\\\\sqrt{\\\\cosh ^{2}(s)-1}}=\\\\frac{m_{p} \\\\cdot c \\\\cdot d}{e \\\\cdot V}[\\\\sinh (s)]_{b_{1}}^{b_{2}}\\n$$\\n\\n$$\\n\\\\text { with } \\\\quad b_{1}=\\\\cosh ^{-1}(1), \\\\quad b_{2}=\\\\cosh ^{-1}\\\\left(1+\\\\frac{e \\\\cdot V}{m_{p} \\\\cdot c^{2}}\\\\right)\\n$$\\n\\n$$\\nT=218 \\\\mathrm{~ns}\\n$$'\n 'Alternative: differential equation \\n\\n$$\\n\\\\begin{gathered}\\n\\\\rightarrow \\\\frac{V \\\\cdot e}{d}=\\\\frac{\\\\mathrm{d}}{\\\\mathrm{d} t}\\\\left(\\\\frac{m \\\\cdot v}{\\\\sqrt{1-\\\\frac{v^{2}}{c^{2}}}}\\\\right)=\\\\frac{m \\\\cdot a\\\\left(1-\\\\frac{v^{2}}{c^{2}}\\\\right)+m \\\\cdot a \\\\frac{v^{2}}{c^{2}}}{\\\\left(1-\\\\frac{v^{2}}{c^{2}}\\\\right)^{\\\\frac{3}{2}}}=\\\\gamma^{3} \\\\cdot m \\\\cdot a \\\\\\\\\\na=\\\\ddot{s}=\\\\frac{V \\\\cdot e}{d \\\\cdot m}\\\\left(1-\\\\frac{\\\\dot{s}^{2}}{c^{2}}\\\\right)^{\\\\frac{3}{2}}\\n\\\\end{gathered}\\n$$\\n\\n$$\\n\\\\begin{gathered}\\n\\\\rightarrow s(t)=\\\\frac{c}{V \\\\cdot e}\\\\left(\\\\sqrt{e^{2} \\\\cdot V^{2} \\\\cdot t^{2}+c^{2} \\\\cdot m^{2} \\\\cdot d^{2}}-c \\\\cdot m \\\\cdot d\\\\right) \\\\\\\\\\ns=d \\\\rightarrow T=\\\\frac{d}{V \\\\cdot e} \\\\sqrt{\\\\left(\\\\frac{V \\\\cdot e}{c}\\\\right)^{2}+2 V \\\\cdot e \\\\cdot m} \\\\\\\\\\nT=218 \\\\mathrm{~ns}\\n\\\\end{gathered}\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "Large Hadron Collider\n\nPlease read the general instructions in the separate envelope before you start this problem.\n\nIn this task, the physics of the particle accelerator LHC (Large Hadron Collider) at CERN is discussed. CERN is the world's largest particle physics laboratory. Its main goal is to get insight into the fundamental laws of nature. Two beams of particles are accelerated to high energies, guided around the accelerator ring by a strong magnetic field and then made to collide with each other. The protons are not spread uniformly around the circumference of the accelerator, but they are clustered in so-called bunches. The resulting particles generated by collisions are observed with large detectors. Some parameters of the LHC can be found in table 1 .\n\n| LHC ring |  |\n| :--- | :--- |\n| Circumference of ring | $26659 \\mathrm{~m}$ |\n| Number of bunches per proton beam | 2808 |\n| Number of protons per bunch | $1.15 \\times 10^{11}$ |\n| Proton beams |  |\n| Energy of protons | $7.00 \\mathrm{TeV}$ |\n| Centre of mass energy | $14.0 \\mathrm{TeV}$ |\n\nTable 1: Typical numerical values of relevant LHC parameters.\n\nParticle physicists use convenient units for the energy, momentum and mass: The energy is measured in electron volts $[\\mathrm{eV}]$. By definition, $1 \\mathrm{eV}$ is the amount of energy gained by a particle with elementary charge, e, moved through a potential difference of one volt $\\left(1 \\mathrm{eV}=1.602 \\cdot 10^{-19} \\mathrm{~kg} \\mathrm{~m}^{2} \\mathrm{~s}^{-2}\\right)$.\n\nThe momentum is measured in units of $\\mathrm{eV} / c$ and the mass in units of $\\mathrm{eV} / c^{2}$, where $c$ is the speed of light in vacuum. Since $1 \\mathrm{eV}$ is a very small quantity of energy, particle physicists often use $\\mathrm{MeV}\\left(1 \\mathrm{MeV}=10^{6} \\mathrm{eV}\\right)$, $\\mathrm{GeV}\\left(1 \\mathrm{GeV}=10^{9} \\mathrm{eV}\\right)$ or $\\mathrm{TeV}\\left(1 \\mathrm{TeV}=10^{12} \\mathrm{eV}\\right)$.\n\nPart A deals with the acceleration of protons or electrons. Part B is concerned with the identification of particles produced in the collisions at CERN.\n\nPart A.LHC accelerator\n\nAcceleration:\n\nAssume that the protons have been accelerated by a voltage $V$ such that their velocity is very close to the speed of light and neglect any energy loss due to radiation or collisions with other particles.\nContext question:\nA.1 Find the exact expression for the final velocity $v$ of the protons as a function of the accelerating voltage $V$, and physical constants.\nContext answer:\n\\boxed{$v=c \\cdot \\sqrt{1-(\\frac{m_{p} \\cdot c^{2}}{m_{p} \\cdot c^{2}+V \\cdot e})^{2}}$}\n\n\nExtra Supplementary Reading Materials:\n\nA design for a future experiment at CERN plans to use the protons from the LHC and to collide them with electrons which have an energy of $60.0 \\mathrm{GeV}$.\nContext question:\nA.2 For particles with high energy and low mass the relative deviation $\\Delta=(c-v) / c$ of the final velocity $v$ from the speed of light is very small. Find a first order approximation for $\\Delta$ and calculate $\\Delta$ for electrons with an energy of $60.0 \\mathrm{GeVusing}$ the accelerating voltage $V$ and physical constants.\nContext answer:\n\\boxed{$\\frac{1}{2}\\left(\\frac{m_{e} \\cdot c^{2}}{m_{e} \\cdot c^{2}+V \\cdot e}\\right)^{2}$, $\\Delta=3.63 \\cdot 10^{-11}$}\n\n\nExtra Supplementary Reading Materials:\n\nWe now return to the protons in the LHC. Assume that the beam pipe has a circular shape.\nContext question:\nA.3 Derive an expression for the uniform magnetic flux density $B$ necessary to keep the proton beam on a circular track. The expression should only contain the energy of the protons $E$, the circumference $L$, fundamental constants and numbers. You may use suitable approximations if their effect is smaller than precision given by the least number of significant digits.\n\nCalculate the magnetic flux density $B$ for a proton energy of $E=7.00 \\mathrm{TeV}$, neglecting interactions between the protons.\nContext answer:\n\\boxed{$B=\\frac{2 \\pi \\cdot E}{e \\cdot c \\cdot L}$ , $B=5.50$}\n\n\nExtra Supplementary Reading Materials:\n\nRadiated Power: \n\nAn accelerated charged particle radiates energy in the form of electromagnetic waves. The radiated power $P_{\\mathrm{rad}}$ of a charged particle that circulates with a constant angular velocity depends only on its acceleration $a$, its charge $q$, the speed of light $c$ and the permittivity of free space $\\varepsilon_{0}$.\nContext question:\nA.4 Use dimensional analysis to find an expression for the radiated power $P_{\\text {rad }}$.\nContext answer:\n\\boxed{$P_{\\text {rad }}=a^{\\alpha} \\cdot q^{\\beta} \\cdot c^{\\gamma} \\cdot \\epsilon_{0}^{\\delta}$}\n\n\nExtra Supplementary Reading Materials:\n\nThe real formula for the radiated power contains a factor $1 /(6 \\pi)$; moreover, a full relativistic derivation gives an additional multiplicative factor $\\gamma^{4}$, with $\\gamma=\\left(1-v^{2} / c^{2}\\right)^{-\\frac{1}{2}}$.\nContext question:\nA.5 Calculate $P_{\\text {tot }}$, the total radiated power of the LHC, for a proton energy of E= 7.00 $\\mathrm{TeV}$ (Note table 1). You may use suitable approximations.\nContext answer:\n\\boxed{5.13}\n\n\nExtra Supplementary Reading Materials:\n\nLinear Acceleration:\n\nAt CERN, protons at rest are accelerated by a linear accelerator of length $d=30.0 \\mathrm{~m}$ through a potential difference of $V=500 \\mathrm{MV}$. Assume that the electrical field is homogeneous. A linear accelerator consists of two plates as sketched in Figure 1.",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_67": {
    "pid": "phy_67",
    "question": "a. The ant walks an angular displacement $\\theta$ along the edge of the disk. Then it walks radially inward by a distance $h \\ll R$, tangentially through an angular displacement $-\\theta$, then back to its starting point on the disk. Assume the ant walks with constant speed $v$.\n\n\n\n<image_1>\n\n\n\nThrough what net angle does the disk rotate throughout this process, to leading order in $h / R$ ?",
    "options": [
      "\\theta + \\delta\\theta + \\theta = \\theta\\left(1 - MR^2",
      "m",
      "2 m h \\theta",
      "\\frac{2 m \\theta}{M}\\left(\\left(1-\\frac{h}{R}\\right)^{2}-1\\right)-\\frac{4 m}{M} \\frac{h \\theta}{R}"
    ],
    "answer": "D",
    "solution": "['During the first leg of the trip, the disk has angular velocity\\n\\n\\n\\n$$\\n\\n\\\\omega=-\\\\frac{2 m v}{M R}\\n\\n$$\\n\\n\\n\\nby conservation of angular momentum. Thus, the disk rotates through an angle\\n\\n\\n\\n$$\\n\\n\\\\phi_{1}=-\\\\frac{2 m v}{M R} \\\\frac{\\\\theta R}{v}=-\\\\frac{2 m \\\\theta}{M}\\n\\n$$\\n\\n\\n\\nto leading order in $m / M$. (Here we have neglected the fact that the disk rotates under the ant as it is walking, somewhat reducing the distance it has to walk; this changes the answer only to higher order in $m / M$. The exact answer is a more complicated function of $m / M$. By going to \"leading order\", we mean we are expanding that exact answer in a series in $m / M$, such as with the binomial theorem, and keeping only the first nonzero term.)\\n\\n\\n\\nWhen the ant is moving radially, $\\\\omega=0$, so no rotation occurs. On the last leg of the trip, the disk has angular velocity\\n\\n\\n\\n$$\\n\\n\\\\omega=\\\\frac{2 m v(R-h)}{M R^{2}}\\n\\n$$\\n\\n\\n\\n\\n\\nwhich means the disk rotates through an angle\\n\\n\\n\\n$$\\n\\n\\\\phi_{2}=\\\\frac{2 m v(R-h)}{M R^{2}} \\\\frac{\\\\theta(R-h)}{v}=\\\\frac{2 m \\\\theta}{M}\\\\left(1-\\\\frac{h}{R}\\\\right)^{2}\\n\\n$$\\n\\n\\n\\nThe net rotation is\\n\\n\\n\\n$$\\n\\n\\\\phi_{1}+\\\\phi_{2}=\\\\frac{2 m \\\\theta}{M}\\\\left(\\\\left(1-\\\\frac{h}{R}\\\\right)^{2}-1\\\\right) \\\\approx-\\\\frac{4 m}{M} \\\\frac{h \\\\theta}{R}\\n\\n$$\\n\\n\\n\\nThe sign is not important since it is convention-dependent. (Solutions that were not fully approximated were also accepted; however, not approximating early dramatically increases the amount of work you have to do.)\\n\\n\\n\\nIncidentally, you might have thought the answer had to be zero, by angular momentum conservation. After all, when a system has zero total linear momentum, its center of mass can\\'t move. But this problem shows that systems with zero total angular momentum can perform net rotations, which is the reason, e.g. that a falling cat can always land on its feet. In more advanced physics, this would be described by saying the constraint on the disc\\'s motion coming from angular momentum conservation is not holonomic.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "## Disk Jockey\n\n\n\nA disk of uniform mass density, mass $M$, and radius $R$ sits at rest on a frictionless floor. The disk is attached to the floor by a frictionless pivot at its center, which keeps the center of the disk in place, but allows the disk to rotate freely. An ant of mass $m \\ll M$ is initially standing on the edge of the disk; you may give your answers to leading order in $m / M$.",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_68": {
    "pid": "phy_68",
    "question": "b. Now suppose the ant walks with speed $v$ along a circle of radius $r$, tangent to its starting point.\n\n\n\n<image_1>\n\n\n\nThrough what net angle does the disk rotate?",
    "options": [
      "2 m",
      "\\frac{4 m}{M} \\frac{\\pi r^{2}}{R^{2}}",
      "4 \\pi m r^2",
      "2 m r"
    ],
    "answer": "B",
    "solution": "[\"First solution: The overall rotation angle of the disk is\\n\\n\\n\\n$$\\n\\n\\\\phi=\\\\int \\\\omega d t=\\\\frac{2}{M R^{2}} \\\\int L d t=\\\\frac{2 m}{M R^{2}} \\\\int \\\\mathbf{r} \\\\times \\\\mathbf{v} d t\\n\\n$$\\n\\n\\n\\nwhere we again work to leading order in $m / M$, and $\\\\mathbf{r}$ and $\\\\mathbf{v}$ are the position and velocity of the ant. The coordinates of a point on the circle are given by\\n\\n\\n\\n$$\\n\\n(r \\\\sin \\\\theta,(R-r)+r \\\\cos \\\\theta)\\n\\n$$\\n\\n\\n\\n\\n\\n\\n\\nIf the speed of the ant is $v$, the velocity is given by\\n\\n\\n\\n$$\\n\\n(v \\\\cos \\\\theta,-v \\\\sin \\\\theta)\\n\\n$$\\n\\n\\n\\nTo evaluate the angular momentum, note that\\n\\n\\n\\n$$\\n\\n|\\\\mathbf{v} \\\\times \\\\mathbf{r}|=v r \\\\cos ^{2} \\\\theta+v r \\\\sin ^{2} \\\\theta+v(R-r) \\\\cos \\\\theta=v r+v(R-r) \\\\cos \\\\theta\\n\\n$$\\n\\n\\n\\nThus, we have\\n\\n\\n\\n$$\\n\\nL=m v(r+(R-r) \\\\cos \\\\theta)\\n\\n$$\\n\\n\\n\\nPlugging this into the time integral above,\\n\\n\\n\\n$$\\n\\n\\\\phi=\\\\int \\\\frac{2 m v}{M R^{2}}(r+(R-r) \\\\cos (\\\\theta(t))) \\\\mathrm{d} t\\n\\n$$\\n\\n\\n\\nChanging this to an integral over $\\\\theta$ using $d \\\\theta=v d t / r$,\\n\\n\\n\\n$$\\n\\n\\\\phi=\\\\int_{0}^{2 \\\\pi} \\\\frac{2 m r}{M R^{2}}(r+(R-r) \\\\cos (\\\\theta(t))) \\\\mathrm{d} \\\\theta=\\\\frac{4 m}{M} \\\\frac{\\\\pi r^{2}}{R^{2}}\\n\\n$$\\n\\n\\n\\nOf course, the problem could also be solved by parameterizing the ant's path in a different way, such as by using polar coordinates with the origin at the center of the disk. The way we set it up here is the simplest, since it makes the integral easy. (For most students, the hardest part was finding a compact expression for $L$. A common mistake was assuming $L=m v_{x} r$ or a variant thereof.)\"\n \"The net effect on the disk of one ant going in the circular path is the same as two ants going along the path, each with half the mass, and thus the same as four ants each with a quarter the mass, and so on. By repeating this logic, we can thus replace the ant with a ring of radius $r$ and mass $m$ of uniform density, which rotates around once. Therefore, the rotation angle is\\n\\n\\n\\n$$\\n\\n\\\\phi=2 \\\\pi \\\\frac{I_{\\\\mathrm{disk}}}{I_{\\\\text {ring }}}=2 \\\\pi \\\\frac{m r^{2}}{M R^{2} / 2}=\\\\frac{4 m}{M} \\\\frac{\\\\pi r^{2}}{R^{2}}\\n\\n$$\\n\\n\\n\\nThis is very simple, though it's a trick that only works for a circular trajectory.\"\n \"Starting from the first line of the first solution, we notice that\\n\\n\\n\\n$$\\n\\n\\\\int \\\\mathbf{r} \\\\times \\\\mathbf{v} d t=\\\\int \\\\mathbf{r} \\\\times d \\\\mathbf{r}=2 A\\n\\n$$\\n\\n\\n\\nwhere $A$ is the area of the ant's trajectory. Thus, we have\\n\\n\\n\\n$$\\n\\n\\\\phi=\\\\frac{4 m}{M} \\\\frac{A}{R^{2}}=\\\\frac{4 m}{M} \\\\frac{\\\\pi r^{2}}{R^{2}}\\n\\n$$\\n\\n\\n\\nThis makes it clear why the answer had to be simple in general: the angle can only depend on a geometric property of the ant's trajectory, namely its area. This kind of phenomenon occurs in many fields of physics, and is generally known as a geometric phase.\"\n 'We can decompose the circle into a stack of thin rectangles. The effect of a single ant going around the circle is the same as the effect of one ant going around each rectangle. But by slightly generalizing your result in part (a), you can show that the net rotation due to each rectangle is $(4 m / M)\\\\left(d A / R^{2}\\\\right)$ where $d A$ is the area of that rectangle. Summing the areas gives the answer. Like the third solution, this works for any ant trajectory, and it makes it clear why it was the area of the trajectory that mattered.']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "## Disk Jockey\n\n\n\nA disk of uniform mass density, mass $M$, and radius $R$ sits at rest on a frictionless floor. The disk is attached to the floor by a frictionless pivot at its center, which keeps the center of the disk in place, but allows the disk to rotate freely. An ant of mass $m \\ll M$ is initially standing on the edge of the disk; you may give your answers to leading order in $m / M$.\nContext question:\na. The ant walks an angular displacement $\\theta$ along the edge of the disk. Then it walks radially inward by a distance $h \\ll R$, tangentially through an angular displacement $-\\theta$, then back to its starting point on the disk. Assume the ant walks with constant speed $v$.\n\n\n\n<img_4433>\n\n\n\nThrough what net angle does the disk rotate throughout this process, to leading order in $h / R$ ?\nContext answer:\n\\boxed{$\\frac{2 m \\theta}{M}\\left(\\left(1-\\frac{h}{R}\\right)^{2}-1\\right)$}\n",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_69": {
    "pid": "phy_69",
    "question": "c. A cylinder of radius $r \\ll R \\theta_{0}$ is placed on top of the sphere. Suppose the mass is launched at an angle $\\alpha$ away from the direction of the spring's displacement with kinetic energy $K$, as shown.\n\n\n\nWhat is the maximum angle $\\alpha_{\\max }$ at which the mass can be launched such that it can still hit the cylinder? Express your answer in terms of $K, m, g, \\theta_{0}, r$, and $R$. You may assume $K$ is large enough for the mass to reach the cylinder for $\\alpha=0$.\n\n\n\n<image_1>\n\n\n\n(view from above)",
    "options": [
      "\\alpha=\\frac{r}{R \\sin \\theta_{0}} \\sqrt{1-\\frac{m g R\\left(1-\\cos \\theta_{0}\\right)-(1 / 2) m g R \\theta_{0} \\sin \\theta_{0}}{K}}",
      "1",
      "\\alpha_{\\max}",
      "\\alpha_{\\max}"
    ],
    "answer": "A",
    "solution": "['The initial energy of the system is given by\\n\\n\\n\\n$$\\n\\nm g R \\\\cos \\\\theta_{0}+\\\\frac{1}{2} k R^{2} \\\\theta_{0}^{2}+K\\n\\n$$\\n\\n\\n\\nSuppose the mass is launched with speed $v$. Then, the speed in the $\\\\theta$ direction is $v \\\\cos \\\\alpha$ and the speed in the $\\\\phi$ direction is $v \\\\sin \\\\alpha$, and therefore, the $z$-component of the angular momentum of the mass is\\n\\n\\n\\n$$\\n\\nL=m v \\\\sin \\\\alpha(R \\\\sin \\\\theta)\\n\\n$$\\n\\n\\n\\nWe now compute the distance of closest approach. If the distance of closest approach is equal to $r$ (as it does for $\\\\alpha_{\\\\max }$, then at $r$, the motion of the mass has no inward component, and the speed of the object at $r$ is given by conservation of angular momentum:\\n\\n\\n\\n$$\\n\\nm u r=m v \\\\sin \\\\alpha(R \\\\sin \\\\theta) \\\\Longrightarrow u=\\\\frac{v \\\\sin \\\\alpha(R \\\\sin \\\\theta)}{r}\\n\\n$$\\n\\n\\n\\nBecause $r \\\\ll R$, at the point of closest approach, the energy of the system is roughly\\n\\n\\n\\n$$\\n\\nm g R+\\\\frac{1}{2} m u^{2} \\\\approx m g R+\\\\frac{1}{2} \\\\frac{m v^{2} \\\\sin ^{2} \\\\alpha R^{2} \\\\sin ^{2} \\\\theta}{r^{2}} \\\\approx m g R+K\\\\left(\\\\frac{\\\\alpha^{2} R^{2} \\\\sin ^{2} \\\\theta}{r^{2}}\\\\right)\\n\\n$$\\n\\n\\n\\nEquating with the initial energy gives us\\n\\n\\n\\n$$\\n\\nm g R \\\\cos \\\\theta_{0}+\\\\frac{1}{2} k R^{2} \\\\theta_{0}^{2}+K=m g R+K\\\\left(\\\\frac{\\\\alpha^{2} R^{2} \\\\sin ^{2} \\\\theta}{r^{2}}\\\\right)\\n\\n$$\\n\\n\\n\\nBefore finishing the calculation, we now compute the required $k$ for the object to be at equilibrium (since our answer cannot contain $k$ ). Setting $k R \\\\theta_{0}=m g \\\\sin \\\\theta_{0}$ gives us $k=$\\n\\n\\n\\n\\n\\n\\n\\n$\\\\frac{m g \\\\sin \\\\theta_{0}}{R \\\\theta_{0}}$. Then,\\n\\n\\n\\n$$\\n\\nm g R \\\\cos \\\\theta_{0}+\\\\frac{1}{2} m g R \\\\theta_{0} \\\\sin \\\\theta_{0}+K=m g R+K\\\\left(\\\\frac{\\\\alpha^{2} R^{2} \\\\sin ^{2} \\\\theta_{0}}{r^{2}}\\\\right)\\n\\n$$\\n\\n\\n\\nSolving for $\\\\alpha$ gives us\\n\\n\\n\\n$$\\n\\n\\\\alpha=\\\\frac{r}{R \\\\sin \\\\theta_{0}} \\\\sqrt{1-\\\\frac{m g R\\\\left(1-\\\\cos \\\\theta_{0}\\\\right)-(1 / 2) m g R \\\\theta_{0} \\\\sin \\\\theta_{0}}{K}}\\n\\n$$\\n\\n\\n\\nSolving for $\\\\alpha$ without using the small angle approximation for $\\\\alpha$ also earned full credit. (The answer $\\\\alpha=\\\\pi$, which is technically also correct, earned partial credit.)']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "## The Mad Hatter\n\n\n\nA frictionless hemisphere of radius $R$ is fixed on top of a flat cylinder. One end of a spring with zero relaxed length and spring constant $k$ (i.e. the force from the spring when stretched to length $\\ell$ is $-k \\ell$ ) is fixed to the top of the hemisphere. Its other end is attached to a point mass of mass $m$.\n\n\n\n<img_4469>\nContext question:\na. The number and nature of the equilibrium points on the hemisphere depends on the value of the spring constant $k$. Consider the semicircular arc shown above as a dashed line, which is parameterized by angles in the range $-\\pi / 2 \\leq \\theta \\leq \\pi / 2$. Make a table indicating the number of equilibrium points on the arc, and the number that are stable, for each range of $k$ values. A blank table for your reference is given below. (You may need more or fewer rows than shown.)\n\n\n\n| Range of $k\\left(k_{\\min }<k<k_{\\max }\\right)$ | \\#  of Equilibria | \\#  of Stable Equilibria |\n|:----------------------------------------------:|:-----------------:|:------------------------:|\n|                     $0<k<?$                    |                   |                          |\n|                                                |                   |                          |\n|                                                |                   |                          |\n|                  $?<k<\\infty$                  |                   |                          |\nContext answer:\n| Range of $k$ values $\\left(k_{\\min }<k<k_{\\max }\\right)$ | \\#  of Equilibria | \\#  of Stable Equilibria |\n|:--------------------------------------------------------:|:-----------------:|:------------------------:|\n|                   $0<k<2 m g /(\\pi R)$                   |         1         |             0            |\n|                $2 m g /(\\pi R)<k<m g / R$                |         3         |             2            |\n|                    $m g / R<k<\\infty$                    |         1         |             1            |\n\n\nExtra Supplementary Reading Materials:\n\nb. At $t=0$, the mass is given a speed $v$ along a line of constant latitude $\\theta=\\theta_{0}$.\n\n\n\n<img_4518>\nContext question:\ni. Indicate which of the following trajectories the mass takes for a short time after $t=0$ and briefly explain your reasoning. The differences between the paths are exaggerated.\n\n\n\n<img_4424>\nContext answer:\nSeveral explanations would work here. Here are two.\n\n\n- If we go to the rotating frame of reference, there is an outward centrifugal force that the mass experiences, pushing it down the sphere.\n\n- For the mass to go in a circle around the sphere, the spring force not only has to compensate for the gravitational force but also must provide centripetal acceleration. Therefore, the spring must get longer.\n\n\nContext question:\nii. What is the total radial force (i.e., normal to the surface of the hemisphere) on the mass at $t=0$ ? Express your answer in terms of $m, v, R, g$, and $\\theta_{0}$.\nContext answer:\n\\boxed{$F_{r}=m g \\cos \\theta_{0}-\\frac{m v^{2}}{R}$}\n",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_70": {
    "pid": "phy_70",
    "question": "c. The water-air interface has some surface tension, $\\sigma$. The effect of surface tension is to change the pressure in the stream according to the Young-Laplace equation,\n$$\n\n\\Delta P=\\sigma\\left(\\frac{1}{r}+\\frac{1}{R}\\right)\n\n$$\n\nwhere $\\Delta P$ is the difference in pressure between the stream and the atmosphere and $R$ is the radius of curvature of the vertical profile of the stream, visualized below. ( $R<0$ for the stream of water; the radius of curvature would be positive only if the stream profile curved inwards.)\n\n\n\n<image_1>\n\n\n\nFor this part of the problem, we assume that $|R| \\gg|r|$, so that the curvature of the vertical profile of the stream can be ignored. Also assume that water is incompressible.\n\n\n\nAccounting for the pressure in the stream, find a new equation relating for $r(y)$ in terms of $\\sigma, r_{0}, v_{0}$, and $\\rho$, the density of water. You do not need to solve the equation for $r$.",
    "options": [
      "\\sigma",
      "r(y) = r_0 \\sqrt[4]{\\frac{v_0^2 \\sigma}}",
      "1",
      "\\frac{1}{2} \\rho v_{0}^{2} \\frac{r_{0}^{4}}{r^{4}}+\\rho g y=\\sigma\\left(\\frac{1}{r_{0}}-\\frac{1}{r}\\right)"
    ],
    "answer": "D",
    "solution": "['Our conservation of energy approach from part (b) needs to be modified to account for the work done against pressure. As we look further down in the stream, the radius is smaller. This means the pressure is higher there, and the water is slowed compared to when we assumed only gravity acted on the water.\\n\\n\\n\\nThe result of accounting for changes in pressure in a flow where no energy is dissipated is the Bernoulli equation,\\n\\n\\n\\n$$\\n\\n\\\\frac{1}{2} \\\\rho v^{2}+\\\\rho g y+P=\\\\frac{1}{2} \\\\rho v_{0}^{2}+\\\\rho g y_{0}+P_{0}\\n\\n$$\\n\\n\\n\\nwhere $P_{0}$ is the pressure in the stream at the spout.\\n\\n\\n\\nUsing the Young-Laplace equation to replace $P$ and $P_{0}$, we have\\n\\n\\n\\n$$\\n\\n\\\\frac{1}{2} \\\\rho v^{2}+\\\\rho g y+\\\\frac{\\\\sigma}{r}=\\\\frac{1}{2} \\\\rho v_{0}^{2}+\\\\rho g y_{0}+\\\\frac{\\\\sigma}{r_{0}}\\n\\n$$\\n\\n\\n\\nIf we substitute in $y_{0}=-\\\\frac{v_{0}^{2}}{2 g}$ and $v=v_{0} \\\\frac{r_{0}^{2}}{r^{2}}$, this becomes\\n\\n\\n\\n$$\\n\\n\\\\frac{1}{2} \\\\rho v_{0}^{2} \\\\frac{r_{0}^{4}}{r^{4}}+\\\\rho g y+\\\\frac{\\\\sigma}{r}=\\\\frac{1}{2} \\\\rho v_{0}^{2}-\\\\rho g \\\\frac{v_{0}^{2}}{2 g}+\\\\frac{\\\\sigma}{r_{0}}\\n\\n$$\\n\\n\\n\\nThis may be simplified to\\n\\n\\n\\n$$\\n\\n\\\\frac{1}{2} \\\\rho v_{0}^{2} \\\\frac{r_{0}^{4}}{r^{4}}+\\\\rho g y=\\\\sigma\\\\left(\\\\frac{1}{r_{0}}-\\\\frac{1}{r}\\\\right)\\n\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "## String Cheese\nContext question:\na. When a faucet is turned on, a stream of water flows down with initial speed $v_{0}$ at the spout. For this problem, we define $y$ to be the vertical coordinate with its positive direction pointing up.\n\nAssuming the water speed is only affected by gravity as the water falls, find the speed of water $v(y)$ at height $y$. Define the zero of $y$ such that the equation for $v^{2}$ has only one term and find $y_{0}$, the height of the spout.\nContext answer:\n\\boxed{$y_{0}=\\frac{-v_{0}^{2}}{2 g}$ ,$v=\\sqrt{-2 g y}$}\n\n\nContext question:\nb. Assume that the stream of water falling from the faucet is cylindrically symmetric about a vertical axis through the center of the stream. Also assume that the volume of water per unit time exiting the spout is constant, and that the shape of the stream of water is constant over time.\nIn this case, the radius $r$ of the stream of water is a function of vertical position $y$. Let the radius at the faucet be $r_{0}$. Using your result from part (a), find $r(y)$.\n\n\nIf $r(y)$ is not constant, it implies that the water has some radial velocity during its fall, in contradiction to our assumptions in part (a) that the motion is purely vertical. You may assume throughout the problem that any such radial velocity is negligibly small.\nContext answer:\n\\boxed{$r=r_{0} \\sqrt[4]{\\frac{v_{0}^{2}}{-2 g y}}$}\n",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_71": {
    "pid": "phy_71",
    "question": "c. Now suppose we place a transparent hemispherical shell of thickness $s$ and index of refraction $n$ over the source such that all light from the source that directly strikes the right wall passes through the shell, and all light from the source that strikes the mirror first does not pass through the shell.\n\nhemispherical shell\n\n\n\n<image_1>\n\n\n\nAt what $y$ is the fringe closest to the bottom-most corner now? (You may find it convenient to use $\\lfloor x\\rfloor$, the largest integer below $x$.)",
    "options": [
      "y = \\lambda^2",
      "1",
      "y = \\lambda L",
      "y=\\frac{L}{4 d}\\left((n-1) s-\\lambda\\left\\lfloor\\frac{(n-1) s}{\\lambda}-\\frac{1}{2}\\right\\rfloor-\\frac{\\lambda}{2}\\right)"
    ],
    "answer": "D",
    "solution": "['Now the optical distance between the source and a spot $y$ on the wall is increased by $(n-1) s$. Then, we need\\n\\n\\n\\n$$\\n\\n\\\\frac{4 d y}{L}-(n-1) s+\\\\lambda / 2=m \\\\lambda\\n\\n$$\\n\\n\\n\\nTo minimize $y$, we take $m$ to be $-\\\\left\\\\lfloor\\\\frac{(n-1) s}{\\\\lambda}-\\\\frac{1}{2}\\\\right\\\\rfloor$. Then,\\n\\n\\n\\n$$\\n\\ny=\\\\frac{L}{4 d}\\\\left((n-1) s-\\\\lambda\\\\left\\\\lfloor\\\\frac{(n-1) s}{\\\\lambda}-\\\\frac{1}{2}\\\\right\\\\rfloor-\\\\frac{\\\\lambda}{2}\\\\right)\\n\\n$$\\n\\n\\n\\nBecause $(n-1) s$ is just an offset, the spacing between the fringes does not change, i.e., the spacing is still $\\\\lambda L /(4 d)$.']",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "## Mirror Mirror on the Wall\n\n\n\nConsider a square room with side length $L$. The bottom wall of the room is a perfect mirror.* A perfect monochromatic point source with wavelength $\\lambda$ is placed a distance $d$ above the center of the mirror, where $\\lambda \\ll d \\ll L$.\n\n\n\n<img_4432>\n\n\n\n*Remember that the phase of light reflected by a mirror changes by $180^{\\circ}$.\nContext question:\na. On the right wall, an interference pattern emerges. What is the distance $y$ between the bottom corner and the closest bright fringe above it? Hint: you may assume $\\lambda \\ll y \\ll L$ as well.\nContext answer:\n\\boxed{$y=\\frac{\\lambda L}{8 d}$}\n",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_72": {
    "pid": "phy_72",
    "question": "e. The electromagnet is composed of layers of spiral wound copper pipe; the pipe has inner diameter $d_{i}=0.40 \\mathrm{~cm}$ and outer diameter $d_{o}=0.50 \\mathrm{~cm}$. The copper pipe is wound into this flat spiral that has an inner diameter $D_{i}=20 \\mathrm{~cm}$ and outer diameter $D_{o}=50 \\mathrm{~cm}$. Assuming the pipe almost touches in the spiral winding, determine the length $L$ in one spiral.\n\n\n\nCopyright (c)2017 American Association of Physics Teachers\n\n\n\n\n\n\n\n<image_1>",
    "options": [
      "30\\pi \\, \\text{cm}",
      "659.4",
      "33",
      "2.2 \\, \\text{m}"
    ],
    "answer": "C",
    "solution": "['Treat the problem as two dimensional. The area of the spiral is\\n\\n\\n\\n$$\\n\\nA=\\\\frac{\\\\pi}{4}\\\\left(D_{o}^{2}-D_{i}^{2}\\\\right)\\n\\n$$\\n\\n\\n\\nThe area of the pipe is\\n\\n\\n\\n$$\\n\\nA=L d_{o}\\n\\n$$\\n\\n\\n\\nEquating and solving,\\n\\n\\n\\n$$\\n\\nL=\\\\frac{\\\\pi\\\\left(D_{o}^{2}-D_{i}^{2}\\\\right)}{4 d_{o}}=33 \\\\mathrm{~m}\\n\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "$g=9.8 \\mathrm{~N} / \\mathrm{kg}$\n\n\n\n$k=1 / 4 \\pi \\epsilon_{0}=8.99 \\times 10^{9} \\mathrm{~N} \\cdot \\mathrm{m}^{2} / \\mathrm{C}^{2}$\n\n\n\n$c=3.00 \\times 10^{8} \\mathrm{~m} / \\mathrm{s}$\n\n\n\n$N_{\\mathrm{A}}=6.02 \\times 10^{23}(\\mathrm{~mol})^{-1}$\n\n\n\n$\\sigma=5.67 \\times 10^{-8} \\mathrm{~J} /\\left(\\mathrm{s} \\cdot \\mathrm{m}^{2} \\cdot \\mathrm{K}^{4}\\right)$\n\n\n\n$1 \\mathrm{eV}=1.602 \\times 10^{-19} \\mathrm{~J}$\n\n\n\n$m_{e}=9.109 \\times 10^{-31} \\mathrm{~kg}=0.511 \\mathrm{MeV} / \\mathrm{c}^{2}$\n\n\n\n$m_{p}=1.673 \\times 10^{-27} \\mathrm{~kg}=938 \\mathrm{MeV} / \\mathrm{c}^{2}$\n\n\n\n$\\sin \\theta \\approx \\theta-\\frac{1}{6} \\theta^{3}$ for $|\\theta| \\ll 1$\n\n\n\n$$\n\n\\begin{aligned}\n\n& G=6.67 \\times 10^{-11} \\mathrm{~N} \\cdot \\mathrm{m}^{2} / \\mathrm{kg}^{2} \\\\\n\n& k_{\\mathrm{m}}=\\mu_{0} / 4 \\pi=10^{-7} \\mathrm{~T} \\cdot \\mathrm{m} / \\mathrm{A} \\\\\n\n& k_{\\mathrm{B}}=1.38 \\times 10^{-23} \\mathrm{~J} / \\mathrm{K} \\\\\n\n& R=N_{\\mathrm{A}} k_{\\mathrm{B}}=8.31 \\mathrm{~J} /(\\mathrm{mol} \\cdot \\mathrm{K}) \\\\\n\n& e=1.602 \\times 10^{-19} \\mathrm{C} \\\\\n\n& h=6.63 \\times 10^{-34} \\mathrm{~J} \\cdot \\mathrm{s}=4.14 \\times 10^{-15} \\mathrm{eV} \\cdot \\mathrm{s} \\\\\n\n& (1+x)^{n} \\approx 1+n x \\text { for }|x| \\ll 1 \\\\\n\n& \\ln (1+x) \\approx x \\text { for }|x| \\ll 1 \\\\\n\n& \\cos \\theta \\approx 1-\\frac{1}{2} \\theta^{2} \\text { for }|\\theta| \\ll 1\n\n\\end{aligned}\n\n$$\n\n$$\n\n\\begin{array}{lrl}\n\n\\text { velocity parameter } & \\beta & =\\frac{v}{c} \\\\\n\n\\text { Lorentz factor } & \\gamma & =\\frac{1}{\\sqrt{1-\\beta^{2}}} \\\\\n\n\\text { relativistic momentum } & p & =\\gamma \\beta m c \\\\\n\n\\text { relativistic energy } & E & =\\gamma m c^{2} \\\\\n\n\\text { relativistic doppler shift } & \\frac{f}{f_{0}} & =\\sqrt{\\frac{1-\\beta}{1+\\beta}}\n\n\\end{array}\n\n$$\n\nExtra Supplementary Reading Materials:\n\nBeloit College has a \"homemade\" $500 \\mathrm{kV}$ VanDeGraff proton accelerator, designed and constructed by the students and faculty.\n\n<img_4547>\n\n\n\nAccelerator dome (assume it is a sphere); accelerating column; bending electromagnet\n\n\n\nThe accelerator dome, an aluminum sphere of radius $a=0.50$ meters, is charged by a rubber belt with width $w=10 \\mathrm{~cm}$ that moves with speed $v_{b}=20 \\mathrm{~m} / \\mathrm{s}$. The accelerating column consists of 20 metal rings separated by glass rings; the rings are connected in series with $500 \\mathrm{M} \\Omega$ resistors. The proton beam has a current of $25 \\mu \\mathrm{A}$ and is accelerated through $500 \\mathrm{kV}$ and then passes through a tuning electromagnet. The electromagnet consists of wound copper pipe as a conductor. The electromagnet effectively creates a uniform field $B$ inside a circular region of radius $b=10 \\mathrm{~cm}$ and zero outside that region.\n\n\n\n<img_4492>\n\n\n\nOnly six of the 20 metals rings and resistors are shown in the figure. The fuzzy grey path is the path taken by the protons as they are accelerated from the dome, through the electromagnet, into the target.\nContext question:\na. Assuming the dome is charged to $500 \\mathrm{kV}$, determine the strength of the electric field at the surface of the dome.\nContext answer:\n\\boxed{$10^{6}$}\n\n\nContext question:\nb. Assuming the proton beam is off, determine the time constant for the accelerating dome (the time it takes for the charge on the dome to decrease to $1 / e \\approx 1 / 3$ of the initial value.\nContext answer:\n\\boxed{0.556}\n\n\nContext question:\nc. Assuming the $25 \\mu \\mathrm{A}$ proton beam is on, determine the surface charge density that must be sprayed onto the charging belt in order to maintain a steady charge of $500 \\mathrm{kV}$ on the dome.\nContext answer:\n\\boxed{$37.5$}\n\n\nContext question:\nd. The proton beam enters the electromagnet and is deflected by an angle $\\theta=10^{\\circ}$. Determine the magnetic field strength.\n\n\n\n<img_4438>\nContext answer:\n\\boxed{0.0894}\n",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_73": {
    "pid": "phy_73",
    "question": "T2: Thread around a cylinder\n\nOne end of a thread is tied into a loop of length $L>2 \\pi R$, and a cylinder of radius $R$ is put through the loop. The coefficient of friction between the thread and the cylinder is $\\mu$. The free end of the thread is being pulled parallel to the axis of the cylinder (as shown by arrow in\n\n<image_1>\nthe photo) while keeping the cylinder at rest. If the length of the loop is longer than a critical value, $L>L_{0}$, the loop can slide along the cylinder without changing its shape, otherwise the friction \"locks\" it into a place and increasing the pulling force would eventually just break the thread. Find this critical value $L_{0}$. The weight of the thread is to be neglected; the thread will not twist when being pulled.\n\nIt might be useful to know that\n\n$$\n2 \\int \\sqrt{1+x^{2}} \\mathrm{~d} x=x \\sqrt{1+x^{2}}+\\operatorname{arcsinh} x,\n$$\n\nwhere $\\operatorname{arcsinh} x \\equiv \\ln \\left(x+\\sqrt{1+x^{2}}\\right)$.",
    "options": [
      "2 \\pi R",
      "2 R",
      "2 \\pi R",
      "L_0 = 2\\pi R + R"
    ],
    "answer": "A",
    "solution": "['Fig. 1 shows the cylinder and the loop from three different angles; $P$ denotes the pulled point of the loop, while $O$ is the top point of the thread.\\n<img_4369>\\n\\nFig. 1\\n\\nImagine that the side of the cylinder is cut along the generatrix $A B$ passing through point $P$, and then the side (including the loop) is unfolded as shown in Fig. 2. In this figure points $A$ and $A^{\\\\prime}, B$ and $B^{\\\\prime}, P$ and $P^{\\\\prime}$ are\\n\\n\\n\\nequivalent, respectively. Let us introduce a Cartesian coordinate system on this unfolded plane so that point $O$ is the origin, axis $z$ is parallel with the axis of cylinder and directed downwards, axis $x$ is perpendicular to $z$ (i.e. horizontal).\\n\\n<img_4470>\\n\\nFig. 2\\n\\nConsider the forces acting on a small piece of the thread (with horizontal projection $\\\\Delta x$ ) indicated with red line in both figures. These are the tensions at both ends of the small piece exerted by neighbouring parts of the thread, the normal force $\\\\Delta N$ and the friction force $\\\\Delta f$ exerted by the cylinder. On the verge of slipping, the direction of $\\\\Delta f$ is parallel to the $z$-axis. Since the small piece of thread is in equilibrium, the $x$-component of the tension is the same everywhere:\\n\\n$$\\nT_{x}=\\\\text { const. }\\n$$\\n\\nThe normal force $\\\\Delta N$ can be determined by looking at the top view of the loop in Fig. 1. The polar angle corresponding to small piece of thread is $\\\\Delta \\\\varphi=\\\\Delta x / R$, so the force balance in the radial direction can be written as\\n\\n$$\\n2 T_{x} \\\\underbrace{\\\\sin \\\\frac{\\\\Delta \\\\varphi}{2}}_{\\\\approx \\\\Delta \\\\varphi / 2}-\\\\Delta N=0 \\\\quad \\\\longrightarrow \\\\quad \\\\Delta N=T_{x} \\\\frac{\\\\Delta x}{R} .\\n\\\\tag{4}\\n$$\\n\\nThe frictional force on the verge of slipping is given by\\n\\n$$\\n\\\\Delta f=\\\\mu \\\\Delta N\\n\\\\tag{5}\\n$$\\n\\nThus, the force balance on the small piece of thread in the $z$ direction (see Fig. 2):\\n\\n$$\\n\\\\left.T_{x} \\\\frac{\\\\mathrm{d} z}{\\\\mathrm{~d} x}\\\\right|_{x+\\\\Delta x}-\\\\left.T_{x} \\\\frac{\\\\mathrm{d} z}{\\\\mathrm{~d} x}\\\\right|_{x}-\\\\Delta f=0\\n\\\\tag{6}\\n$$\\n\\nwhere we expressed the $z$-component of the tension forces with $T_{x}$ and the tangent $\\\\mathrm{d} z / \\\\mathrm{d} x$. Using the three equations above and taking the limit $\\\\Delta x \\\\rightarrow 0$, we get the differential equation\\n\\n$$\\n\\\\frac{\\\\mathrm{d}^{2} z}{\\\\mathrm{~d} x^{2}}=\\\\frac{\\\\mu}{R}\\n$$\\n\\nwhere we used the fact that $T_{x} \\\\neq 0$. By direct integration and taking into account the boundary conditions $z(0)=0$ and $z^{\\\\prime}(0)=0$ we get\\n\\n$$\\nz(x)=\\\\frac{\\\\mu}{2 R} x^{2}\\n$$\\n\\nso the shape of the thread on the unfolded side surface (Fig. 2) can be described by a parabola.\\nThe thread needs to span over the entire cylinder, so its length can be calculated as\\n\\n$$\\nL_{0}=\\\\int_{-\\\\pi R}^{\\\\pi R} \\\\sqrt{\\\\mathrm{d} x^{2}+\\\\mathrm{d} z^{2}}=2 \\\\int_{0}^{\\\\pi R} \\\\sqrt{1+\\\\left(\\\\frac{\\\\mathrm{d} z}{\\\\mathrm{~d} x}\\\\right)^{2}} \\\\mathrm{~d} x\\n$$\\n\\nSubstituting the $z(x)$ function we get:\\n\\n$$\\nL_{0}=2 \\\\int_{0}^{\\\\pi R} \\\\sqrt{1+\\\\left(\\\\frac{\\\\mu x}{R}\\\\right)^{2}} \\\\mathrm{~d} x=\\\\left(\\\\frac{R}{\\\\mu}\\\\right) 2 \\\\int_{0}^{\\\\pi \\\\mu} \\\\sqrt{1+\\\\xi^{2}} \\\\mathrm{~d} \\\\xi\\n$$\\n\\nwhere we introduced the notation $\\\\xi=\\\\mu x / R$. Using the integral given in the text of the problem:\\n\\n$$\\nL_{0}=\\\\pi R \\\\sqrt{1+(\\\\pi \\\\mu)^{2}}+\\\\frac{R}{\\\\mu} \\\\operatorname{arcsinh}(\\\\pi \\\\mu) .\\n$$\\n\\nIf the length of the thread is shorter than the length calculated here, then there is no solution satisfying the thread length constraint, i.e. the thread cannot slip.\\n\\nNote. In the limit $\\\\mu \\\\rightarrow 0$ the loop slips even if $L=2 \\\\pi R$, which should be reproduced by our final formula. Using the relation for the inverse hyperbolic function given in the problem text, then expanding the logarithm in Taylor series in linear order around 0 we get:\\n\\n$$\\n\\\\operatorname{arcsinh} x \\\\equiv \\\\ln \\\\left(x+\\\\sqrt{1+x^{2}}\\\\right) \\\\approx \\\\ln (x+1) \\\\approx x\\n$$\\n\\nso for small values of $\\\\mu$ we get\\n\\n$$\\nL_{0} \\\\approx \\\\pi R+\\\\frac{R}{\\\\mu}(\\\\pi \\\\mu)=2 \\\\pi R\\n$$']",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_74": {
    "pid": "phy_74",
    "question": "## T2: Mechanical accelerator\n\nA massless thread makes $N$ turns around statically fixed cylinder, as shown in the figure. Initially, the free (unwound) ends of the thread are parallel to the axis $X$. Then, a heavy point-like object $P$ is attached to one end of the thread while the other end is pulled with a constant velocity $u$ along $X$. Find the maximum velocity attained by the heavy object.\n\n<image_1>\n\nThe thread is inextendable and flexible. Suppose that the turns of the thread are wound tightly to one another and are placed practically in the same plane, perpendicular to the cylinder axis. Neglect any friction in the system. Do not consider the force of gravity.",
    "options": [
      "Nu",
      "u e^{2\\pi N}",
      "v_{\\max }=u(2 \\pi N+1)",
      "u = (R + N \\cdot d) \\cdot \\omega_{max}"
    ],
    "answer": "C",
    "solution": "['<img_4467>\\n\\nRotating system of reference\\n\\n<img_4329>\\n\\nFigure 2: Mechanical accelerator\\n\\nPart 1: Thread in contact with the cylinder. The velocity of the mass $P$ can be decomposed into longitudinal component $v_{l}$ along the thread, and a transverse component $v_{\\\\perp}$ perpendicular to the thread:\\n\\n$$\\n\\\\vec{v}=v_{l} \\\\vec{e}_{1}+v_{\\\\perp} \\\\vec{e}_{2}\\n$$\\n\\nwhere the unit vectors $\\\\vec{e}_{1}$ and $\\\\vec{e}_{2}$ are parallel and perpendicular to the thread, respectively (see Fig. 2). Since the thread is inextensible, the longitudinal component is constant: $v_{l}=-u$, i.e.\\n\\n$$\\n\\\\vec{v}=-u \\\\vec{e}_{1}+v_{\\\\perp} \\\\vec{e}_{2}\\n$$\\n\\nThe acceleration of $P$ is, respectively:\\n\\n$$\\n\\\\vec{a}=\\\\frac{d \\\\vec{v}}{d t}=-u \\\\frac{d \\\\vec{e}_{1}}{d t}+v_{\\\\perp} \\\\frac{d \\\\vec{e}_{2}}{d t}+\\\\frac{d v_{\\\\perp}}{d t} \\\\vec{e}_{2}\\n$$\\n\\n\\n\\nVectors $\\\\vec{e}_{1}$ and $\\\\vec{e}_{2}$ form a coordinate system, which rotates as a rigid object with an angular velocity:\\n\\n$$\\n\\\\vec{\\\\omega}=\\\\frac{d \\\\phi}{d t} \\\\vec{e}_{3}\\n$$\\n\\nwhere $\\\\vec{e}_{3}=\\\\vec{e}_{1} \\\\times \\\\vec{e}_{2}$ is a unit vector perpendicular to the plane of motion, i.e. along the cylinder axis, and $\\\\phi$ is the angle between the thread and the X-axis. Therefore, the time derivatives of the basis vectors are:\\n\\n$$\\n\\\\frac{d \\\\vec{e}_{1}}{d t}=\\\\vec{\\\\omega} \\\\times \\\\vec{e}_{1}=\\\\frac{d \\\\phi}{d t} \\\\vec{e}_{2}\\n$$\\n\\nand\\n\\n$$\\n\\\\frac{d \\\\vec{e}_{2}}{d t}=\\\\vec{\\\\omega} \\\\times \\\\vec{e}_{2}=-\\\\frac{d \\\\phi}{d t} \\\\vec{e}_{1}\\n$$\\n\\nIn this way, the acceleration of $P$ can be represented in terms of the angular velocity:\\n\\n$$\\n\\\\vec{a}=-v_{\\\\perp} \\\\frac{d \\\\phi}{d t} \\\\vec{e}_{1}+\\\\left(-u \\\\frac{d \\\\phi}{d t}+\\\\frac{d v_{\\\\perp}}{d t}\\\\right) \\\\vec{e}_{2}\\n$$\\n\\nThe only force, acting on $P$, is the tension of the thread. Therefore, the component of the acceleration perpendicular to the tread, i.e. along $\\\\vec{e}_{2}$, is null:\\n\\n$$\\n-u \\\\frac{d \\\\phi}{d t}+\\\\frac{d v_{\\\\perp}}{d t}=0\\n$$\\n\\nAfter integration over time, we obtain a relationship between the transverse velocity, acquired by $P$, and the angle of rotation of the thread:\\n\\n$$\\nv_{\\\\perp}=u \\\\phi\\n$$\\n\\nThe end of the tread turns at a total angle of $2 \\\\pi N$ until the tread detaches from the cylinder completely. Therefore, the transverse component of the velocity of $P$ at the moment of detachment is:\\n\\n$$\\nv_{\\\\perp}=2 \\\\pi N u\\n$$\\n\\nand the magnitude of velocity:\\n\\n$$\\nv=\\\\sqrt{v_{l}^{2}+v_{\\\\perp}^{2}}=u \\\\sqrt{(2 \\\\pi N)^{2}+1}\\n$$\\n\\nPart 2: Thread detached fom the cylinder. This expression, however, still does not represent the maximum velocity attained by $P$. In the frame of reference of the free end of the thread, the mass continues to rotate about the end of the thread. The velocity of $P$, relative to Earth, reaches maximum in the moment when the thread reaches right angle with $\\\\mathrm{X}$-axis, i.e. the transverse component of velocity of $P$ aligns with $\\\\vec{u}$ :\\n\\n$$\\nv_{\\\\max }=u(2 \\\\pi N+1)\\n$$'\n \"<img_4467>\\n\\nRotating system of reference\\n\\n<img_4329>\\n\\nFigure 2: Mechanical accelerator\\n\\nPart 1: Thread in contact with the cylinder. Consider a point $Q$ on the end of the thread being pulled that coincided with $P$ at the moment when it touched the cylinder. Consider motion of the thread in a system of reference (SR), which rotates at angular speed $\\\\omega=u / R$ around the center of the cylinder. In that SR the part of the thread in contact with the cylinder is at rest and the point $Q$ rotates around the cylinder with the angular velocity $\\\\omega_{Q}=-\\\\omega$ (see the figure).\\nSince the middle part of the thread is at rest, energy of the mass $P$ is conserved. For the same reason, the velocity $v_{P}$ of $P$ is perpendicular to the thread. Therefore the kinetic energy acquired by the mass in the rotating frame is equal to the decrease of its centrifugal potential energy:\\n\\n$$\\n\\\\frac{1}{2} m v_{P}^{2}=-\\\\frac{1}{2} m \\\\omega^{2} R^{2}+\\\\frac{1}{2} m \\\\omega^{2} r^{2}=\\\\frac{1}{2} m \\\\omega^{2} l_{P}^{2}\\n$$\\n\\nwhere $l_{P}$ is the length of the unwound part of the thread on the side of the mass $P$ (see the figure). Therefore, the mass $P$ rotates around the fixture point of the thread with a velocity:\\n\\n$$\\nv_{P}=\\\\frac{u}{R} l_{P}\\n$$\\n\\nand a constant angular velocity:\\n\\n$$\\n\\\\omega_{P}=\\\\frac{u}{R}=\\\\omega\\n$$\\n\\nSince $\\\\omega_{P}=-\\\\omega_{Q}$, in the rotating SR the two ends of the thread will unwind symmetrically and the lengths of the two straight parts of the string will be equal at any moment of time. Therefore, at the moment of detachment:\\n\\n$$\\nl_{P}=\\\\frac{1}{2}(2 \\\\pi R N)=\\\\pi N R\\n$$\\n\\nand the detachment velocity of $P$ is, respectively:\\n\\n$$\\nv_{P}=\\\\pi N u\\n$$\\n\\nWhen transforming the velocity of $P$ to the Earth's SR, the velocity $\\\\vec{v}_{P}$ should be added to the rotational velocity $\\\\vec{\\\\omega} \\\\times \\\\vec{r}$. It is easy to establish that the result for the transverse component of $P$ is:\\n\\n$$\\nv_{\\\\perp}=2 v_{P}=2 \\\\pi N u\\n$$\\n\\nPart 2: Thread detached fom the cylinder. This expression, however, still does not represent the maximum velocity attained by $P$. In the frame of reference of the free end of the thread, the mass continues to rotate about the end of the thread. The velocity of $P$, relative to Earth, reaches maximum in the moment when the thread reaches right angle with $\\\\mathrm{X}$-axis, i.e. the transverse component of velocity of $P$ aligns with $\\\\vec{u}$ :\\n\\n$$\\nv_{\\\\max }=u(2 \\\\pi N+1)\\n$$\"\n \"<img_4467>\\n\\nRotating system of reference\\n\\n<img_4329>\\n\\nFigure 2: Mechanical accelerator\\n\\nPart 1: The thread in contact with the cylinder\\n\\nLike in Solution I we decompose the velocity into longitudinal and transverse components, and come to the conclusion that the longitudinal component is $v_{l}=$ $-u$. Afterwards, the acceleration of $P$ is expressed. In this case, however, we consider the longitudinal (centripetal) component of the acceleration:\\n\\n$$\\na_{l}=-v_{\\\\perp}^{2} / l \\\\equiv-v_{\\\\perp} \\\\frac{d \\\\phi}{d t}\\n$$\\n\\nFrom the second Newton's law we obtain the tension $F$ of the thread:\\n\\n$$\\nF=-m v_{\\\\perp} \\\\frac{d \\\\phi}{d t}\\n$$\\n\\nThe rate of change of the kinetic energy of the mass is equal to the power of the tension force:\\n\\n$$\\n\\\\frac{d E_{k}}{d t}=F v_{l}=+m v_{\\\\perp} \\\\frac{d \\\\phi}{d t} u\\n$$\\n\\nTaking into account that:\\n\\n$$\\nE_{k}=\\\\frac{1}{2} m\\\\left(u^{2}+v_{\\\\perp}^{2}\\\\right)\\n$$\\n\\n\\nand taking the first derivative from that expression, we obtain: $m v_{\\\\perp} d v_{\\\\perp} / d t=m v_{\\\\perp} d \\\\phi / d t u$, or:\\n\\n$$\\n\\\\frac{d v_{\\\\perp}}{d t}=u \\\\frac{d \\\\phi}{d t}\\n$$\\n\\nPart 2: Thread detached fom the cylinder. This expression, however, still does not represent the maximum velocity attained by $P$. In the frame of reference of the free end of the thread, the mass continues to rotate about the end of the thread. The velocity of $P$, relative to Earth, reaches maximum in the moment when the thread reaches right angle with $\\\\mathrm{X}$-axis, i.e. the transverse component of velocity of $P$ aligns with $\\\\vec{u}$ :\\n\\n$$\\nv_{\\\\max }=u(2 \\\\pi N+1)\\n$$\"]",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_75": {
    "pid": "phy_75",
    "question": "## T3: Cat eyes\n\nYou may have noticed that in darkness, when a cat is within the light beam of a headlamp, its eyes appear very bright, see the photo below (left). This phenomenon can be modelled by a lens setup, see the photo on right, and the diagram beneath the photos.\n<image_1>\n\nThe photo on right was taken by a digital single-lens reflex camera. The light intensity at the camera sensor pixels marked by a red line (in the photo) is shown in the graph below: the log base 10 of the light intensity (measured as the number of photons caught by each pixel) is plotted against the $x$-coordinate, with the pixels' side length serving as the unit length.\n\n<image_2>\n\nThe lens modelling cat eyes can be treated as an ideal thin lens of focal length $f=55 \\mathrm{~mm}$ and diameter $D=$ $39 \\mathrm{~mm}$; however, you should keep in mind that the given graph shows real measurement data, and the lens has certain non-ideal features. Most importantly, partial reflections of brightly lit areas from the lens surfaces may decrease the contrast: dark areas seen through the lens appear less dark than they actually are; this effect can be neglected for the camera lens, but not so for the lens serving as a model of a cat's eye.\n\nBased on the given data, estimate (with the accuracy of ca 20\\%) the distance $h$ between the axis of the camera and the axis of the lamp (which can be considered as a point source) if the distance of the camera from the paper sheet was $L=4.8 \\mathrm{~m}$.",
    "options": [
      "4.4 \\, \\text{cm}",
      "80",
      "0.0116 \\mathrm{~m}",
      "20"
    ],
    "answer": "B",
    "solution": "['When you look at the photo of the lens and/or the graph provided, four regions with different brightness levels can be distinguished. The brightest region represents the magnified image of the blur spot created by the lamp through the lens. The blur spot is created because the distance from the lens to the white sheet beneath it is slightly larger than the focal distance; as we can see from the graph, the blur spot is of almost constant brightness (a flat plateau at $\\\\log _{10} I=4.4$ ), so we can say that the entire luminous flux falling from the lamp onto the lens is distributed evenly over the blur spot. Note that the blur spot has no sharp edges, though, as you would expect from in such case. This is because the image of this bright disc is situated between the lens and the camera, and is at a fairly big distance away from the plane which is sharp at the image sensor (as seen from the photo, the camera is focused onto the lens). Because of that, the enlarged image of the blur spot has blurred edges in the photo (at the blurred edges, $\\\\log _{10} I$ varies from 3.4 to 4.4). The second-brightest region (with $\\\\log _{10} I=3.4$ ) represents the scattered light from the brightest region: in that region, we are still looking through the lens, and see the area next to the bright blur spot on the sheet. Ideally, its should be darker than the sheet seen in those places where it is not obstructed by the lens, because the lens is shading the light from the lamp. However, the glass elements of this big lens are non-ideal (and there are many glass elements inside the lens!), so the light from the lamp and the bright blur spot is scattered towards the camera giving rise to an increased apparent brightness. In the area where we see the blur spot, this light is insignificant (much weaker than the light from the blur spot), but not so in this dark area: here, the scatteredfrom-the-glass-surfaces dominates heavily over the light coming from the paper sheet. As a matter of fact, this fact could be used to improve the accuracy of the calculations: we could subtract the contribution of the scattered light $\\\\left(10^{3.4}\\\\right)$ from the total intensity of the light at the brightest spot $\\\\left(10^{4.4}\\\\right)$ to obtain the contribution coming from the blur spot on the sheet. The darkest regions (with $\\\\log _{10} I<1.75$ ) represent the interior black painting of the lens seen through the big front glass element of the lens, which absorbs most of the incident light, and the region with $x>420$ and $\\\\log _{10} I=1.95$ represents the white sheet illuminated by the lamp. The ratio between the measured light intensity of the brightest region and that of the region with $x>420$ can be utilized to find the distance of the sheet (the blur spot) from the lens to the paper sheet $d_{0}$, see below.\\n\\nFrom the data given in the problem text we know that $L \\\\gg f$; from the photo of the lens, it is also clear that $d_{0}$ is of the same order of magnitude as $f$. Because of that, the illuminance $E$ (luminous flux per unit area) near the lens can be assumed to be the same as at the paper sheet, The luminous flux per solid angle and unit area of a lightscattering (or radiating) surface is called the luminance $\\\\mathscr{L}$; since all these directions under which the scattered light enters the lens aperture are close to the surface nor$\\\\mathrm{mal}$, we may assume the luminance of the paper sheet to be constant over all these directions. With the small\\n\\n\\n\\nangle approximation, the light intensity $I$ (illuminance, luminous flux $\\\\Phi$ per unit area) at the camera sensor is proportional to $\\\\mathscr{L}$ (see Explanation 1).\\n\\nThe luminance of the blur spot on the sheet $\\\\mathscr{L}_{B S}$ is $1 / k$ larger than the luminance $\\\\mathscr{L}_{s}$ of the paper sheet, where $k$ equals the ratio between the area of the bright dot (the blur spot) on the paper sheet and the area of the lens, because all the light received by the lens is \"compressed\" into the tiny blur spot.\\n\\nSmall angle approximation is also used to show that luminance of the image of the blur spot $\\\\mathscr{L}_{I}$ equals to the luminance of the blur spot $\\\\mathscr{L}_{B S}$ (see Explanation 2). Therefore, the light intensity at the sensor cells corresponding to the brightest area (where we see the image of the blur spot) $I_{I}=I_{s} / k$, where $I_{s}$ stands for the intensity at the cells corresponding to unobscured paper sheet. So, from the graph, we can deduce the value of $k$, and knowing $k$ we can calculate $d_{0}$. Let the distance along the axis between the image of the bright region through the lens and the lens itself be denoted as $d_{S}$; according to the Newton\\'s lens formula, $\\\\left(d_{S}-f\\\\right)\\\\left(d_{0}-f\\\\right)=$ $f^{2}$. Hence,\\n\\n$$\\nd_{S}=f+\\\\frac{f^{2}}{d_{0}-f}=\\\\frac{d_{0} f}{\\\\left(d_{0}-f\\\\right)}\\n$$\\n\\ncan be also determined.\\n\\nHypothesize that $d_{0}-f \\\\ll f$. Let us calculate the diameter of the image of the blur spot\\n\\n$$\\nD_{I}=\\\\frac{D_{B S} d_{S}}{d_{0}}=\\\\frac{D_{B S} f}{d_{0}-f}\\n$$\\n\\nwhere the diameter of the blur spot on the sheet\\n\\n$$\\nD_{B S}=\\\\frac{D\\\\left(d_{0}-f-s\\\\right)}{f+s} \\\\approx \\\\frac{D\\\\left(d_{0}-f-s\\\\right)}{f}\\n$$\\n\\nand $s$ denotes the distance of the image of the point source from the focal plane. Using Newton\\'s lens formula, $s=f^{2} /\\\\left(L-f-d_{0}\\\\right) \\\\approx f^{2} / L$, This leads us to\\n\\n$$\\nD_{B S} \\\\approx D\\\\left(\\\\frac{d_{0}-f}{f}-\\\\frac{f}{L}\\\\right)\\n$$\\n\\nand therefore\\n\\n$$\\nD_{I} \\\\approx D\\\\left[1-\\\\frac{f^{2}}{L\\\\left(d_{0}-f\\\\right)}\\\\right]\\n$$\\n\\nKeeping in mind that $d_{0}-f=\\\\frac{d_{0} f}{d_{S}} \\\\approx \\\\frac{f^{2}}{d_{S}}$, we obtain\\n\\n$$\\nD_{I} \\\\approx D\\\\left(1-\\\\frac{d_{S}}{L}\\\\right)=\\\\frac{D\\\\left(L-d_{S}\\\\right)}{L} .\\n$$\\n\\nThis means that as seen from the position of the camera, the angular size of the image of the blur spot $\\\\theta_{B S}=$ $D_{I} /\\\\left(L-d_{S}\\\\right)$ equals to the angular size of the lens aperture $\\\\theta_{L}=D / L$. This fact is easily confirmed from the photo and is an important observation for two reasons. First, it means that based on the angular diameter of the image of the blur spot on the photo, it is impossible to figure out the distance $d_{0}$ (and hence, $d_{S}$ ). Second, it allows us to measure instead of the angular distance $\\\\theta$ between the centre of the lens and the centre of the image of the blur spot (as seen from the position of the cameraline), the respective distance between the edges of the respective circles. Equality of these two angular sizes is also easily seen from the geometric construction, see the figure. Ineed, consider blue lines $S A G$ and $S B F$ which arrive from the lamp $S$ to the edges of the blur spot. Image of point $F$, denoted by $J$, is now easily found as the intersection point of the ray $S B F$ with the ray $F O$ (passing through the centre of the lens); image $H$ of the other edge of the blur spot is found in the same way. From this construction, it becomes clear that the angular size of the image of the blur spot and the lens, as seen from the camera, are exactly equal, without any approximation. Due to the smallness of the distance $h$, these angular sizes remain almost constant when the observation point is moved from $S$ to $C$.\\n\\nGiven the images are approximately circular, the area ratio $k$ equals $\\\\left(D_{B S} / D\\\\right)^{2}$, or\\n\\n$$\\n\\\\pm \\\\sqrt{k}=\\\\frac{1}{f}\\\\left(d_{0}-\\\\frac{L f}{L-f}\\\\right)=\\\\frac{d_{0}}{f}-\\\\frac{L}{L-f}\\n$$\\n\\nIn the above equation, the \\\\pm sign represents the two cases where the paper sheet is behind or in front of the image of the lamp. From the graph, the ratio between the intensity of the brightest region and the dark region with $x>420$ is $10^{4.4-1.95} \\\\approx 282$, which equals $1 / k$. Then, $d_{0} / f$ can be found to be $\\\\pm \\\\sqrt{k}+1+f / L$, which gives two solutions $d_{0} / f \\\\approx 1.07$ and $d_{0} / f \\\\approx 0.95$. According to the experimental settings given in the problem text, $d_{0}$ is greater than $f$, and thus we obtain $d_{0} / f \\\\approx 1.07$ and $d_{S} \\\\approx 15.03 f \\\\approx 83 \\\\mathrm{~cm}$. This also verifies the hypothesis that $d_{0}-f \\\\ll f$.\\n\\nThe centre of the image of the blur spot is positioned at the height $h^{\\\\prime}=h \\\\frac{d_{S}}{L}$ above the direction to the centre of the lens (this expression from similarity of the triangles $O Q P$ and $O C S$ ) which means that $\\\\theta=h^{\\\\prime} /\\\\left(L-d_{S}\\\\right)$; meanwhile, the angular diameter of the lens $\\\\theta_{L}=D / L$. Therefore,\\n\\n$$\\n\\\\frac{\\\\theta}{\\\\theta_{L}}=\\\\frac{h d_{S}}{D\\\\left(L-d_{S}\\\\right)}\\n$$\\n\\nThe ratio of the angular distances is easily measured from the figure as the ratio of the width $d_{c r}$ of the crescent-shaped second-brightest region to the diameter of the lense\\'s aperture $D^{\\\\prime}$ :\\n\\n$$\\nh=\\\\frac{d_{c r}}{D^{\\\\prime}} \\\\frac{D\\\\left(L-d_{S}\\\\right)}{d_{S}}\\n$$\\n\\nBased on the graph, $d_{c r} \\\\approx 90$ pixels (midpoint of the blurry edge is around $x \\\\approx 120 \\\\mathrm{px}$, and the left edge of the aperture (in the graph) is at $x \\\\approx 30 \\\\mathrm{px}$; the right edge of the lens aperture is at $x \\\\approx 240 \\\\mathrm{px}$ corresponding to $D^{\\\\prime}=210 \\\\mathrm{px}$ and yielding $h \\\\approx 80 \\\\mathrm{~mm}$.\\n\\nRemark 1. In order to obtain the final answer with a reasonably good accuracy, it is not strictly speaking necessary to show that the apparent angular diameters of the lens and of the image of the blur spot are equal. All the other calculations remain the same, just one needs to match a circle with the circular segment of the visible edge of the blur spot, and measure directly $h^{\\\\prime}$, the distance between the centre of the lens and the centre of the blur spot, together with the diameter of the lens aperture $D^{\\\\prime}$ (see the small figure).\\n\\nRemark 2. The width of the crescent-shaped secondbrightest area can be also measured from the photo of\\n\\n\\n\\nthe lens with the required accuracy; however, measuring in pixels from the graph is more accurate.\\n\\nExplanation 1: Consider a small light source of luminance $\\\\mathcal{L}$ and surface area $S$ at a large distance $\\\\uparrow$ from the camera. The illuminance (the luminous flux per unit area) at the position of the camera is proportional to $\\\\uparrow^{-2}$ and so is the total luminous flux received by the whole sensor. Meanwhile, all this light energy is focused onto a small area $S^{\\\\prime}$ on the sensor - onto the image of the light source, and this area is also proportional to $\\\\uparrow^{-2}$. Therefore, the illuminance $I$ at the position of those sensor pixels which are covered by the image is independent of the distance $\\\\uparrow$.\\n\\nExplanation 2: Consider a very narrow cone of light of solid angle $\\\\omega$, starting from a very small area $S$ at the blur spot in a direction close to the surface normal, and carrying a total luminous flux $\\\\Phi$. Since the cone is narrow, this light beam is entirely caught by the lens at distance $d_{0}$, and focused onto the image of surface area $S^{\\\\prime}=S\\\\left(d_{S} / d_{0}\\\\right)^{2}$ at distance $d_{S}$ from the lens. The light rays of this beam traverse the focus and form another light cone of solid angle $\\\\omega^{\\\\prime}$ departing from the image. It is easy to see from similar triangles that $\\\\omega / \\\\omega^{\\\\prime}=\\\\left(d_{S} / d_{0}\\\\right)^{2}$. Then, the luminance of the image $\\\\mathcal{L}_{I}=\\\\Phi /\\\\left(S^{\\\\prime} \\\\omega^{\\\\prime}\\\\right)=\\\\Phi /(S \\\\omega)$, i.e. equal to the luminance of the blur spot.\\n\\n<img_4504>\\n\\n<img_4511>\\n\\nRemark 3: After having derived Explanation 1 and Explanation 2 and calculated $d_{0}$, the geometrical optics aspect can also be tackled by considering the image of the camera through the lens. The region bounded by the darkest ring in the image represents the area on the paper sheet that is observable by the camera through the lens. This area can be approximated by a circular spot with diameter $d$ (represented by $D^{\\\\prime}$ in the graph) depending negligibly on the size of the lens of the camera. Given small angles and that the lamp and the camera have equal distances to the lens, the bright spot on the paper sheet also has a diameter of $d$, which means $d=D \\\\sqrt{k}$. The angular distance between the lamp and the camera as seen from the center of the lens is $h /\\\\left(L-d_{0}\\\\right)$, and therefore, the distances between the two spots\\' centers, and also thus their boundaries (represented by $d_{c r}$ in the graph), on the paper sheet are $d_{0} h /\\\\left(L-d_{0}\\\\right)$. We then obtain an equivalent equation to that above:\\n\\n$$\\n\\\\frac{d_{0} h /\\\\left(L-d_{0}\\\\right)}{D \\\\sqrt{k}}=\\\\frac{d_{c r}}{D^{\\\\prime}} \\\\Leftrightarrow h=\\\\frac{d_{c r}}{D^{\\\\prime}} D \\\\sqrt{k} \\\\frac{L-d_{0}}{d_{0}} \\\\approx 80 \\\\mathrm{~mm} .\\n$$\\n\\nIt should be noted that, compared to the original analysis, the deviation in this calculation caused by $f / L$ (in finding $d_{0}$ and $d_{S}$ ) on the final result reduces drastically (from approximately $20 \\\\%$ down to approximately $1 \\\\%$ ). Even if $d_{0} \\\\approx f$ is assumed, the result is only deviated by approximately $7 \\\\%$.']",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "OlympiadBench",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_76": {
    "pid": "phy_76",
    "question": "A magnetic field $\\vec{B} = B_0\\hat{j}$ exists in the region $a < x < 2a$ and $\\vec{B} = -B_0\\hat{j}$, in the region $2a < x < 3a$, where $B_0$ is a positive constant. A positive point charge moving with a velocity $\\vec{v} = v_0\\hat{i}$, where $v_0$ is a positive constant, enters the magnetic field at $x = a$. The trajectory of the charge in this region can be like,\n\n<image_1><image_2>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_77": {
    "pid": "phy_77",
    "question": "A parallel plate capacitor $C$ with plates of unit area and separation $d$ is filled with a liquid of dielectric constant $K=2$. The level of liquid is $\\frac{d}{3}$ initially. Suppose the liquid level decreases at a constant speed $V$, the time constant as a function of time $t$ is\n<image_1>",
    "options": [
      "$\\frac{6\\epsilon_0R}{5d+3Vt}$",
      "$\\frac{(15d+9Vt)\\epsilon_0R}{2d^2-3dVt-9V^2t^2}$",
      "$\\frac{6\\epsilon_0R}{5d-3Vt}$",
      "$\\frac{(15d-9Vt)\\epsilon_0R}{2d^2+3dVt-9V^2t^2}$"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_78": {
    "pid": "phy_78",
    "question": "A block (B) is attached to two unstretched springs S1 and S2 with spring constants $k$ and $4k$, respectively (see figure I). The other ends are attached to identical supports M1 and M2 not attached to the walls. The springs and supports have negligible mass. There is no friction anywhere. The block B is displaced towards wall 1 by a small distance $x$ (figure II) and released. The block returns and moves a maximum distance $y$ towards wall 2. Displacements $x$ and $y$ are measured with respect to the equilibrium position of the block B. The ratio $\\frac{y}{x}$ is\n<image_1>",
    "options": [
      "4",
      "2",
      "$\\frac{1}{2}$",
      "$\\frac{1}{4}$"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_79": {
    "pid": "phy_79",
    "question": " Two small particles of equal masses start moving in opposite directions from a point A in a horizontal circular orbit. Their tangential velocities are $v$ and $2v$, respectively, as shown in the figure. Between collisions, the particles move with constant speeds. After making how many elastic collisions, other than that at A, these two particles will again reach the point A?\n<image_1>",
    "options": [
      "4",
      "3",
      "2",
      "1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_80": {
    "pid": "phy_80",
    "question": "A thin uniform rod, pivoted at $O$, is rotating in the horizontal plane with constant angular speed $\\omega$, as shown in the figure. At time $t = 0$, a small insect starts from $O$ and moves with constant speed $v$ with respect to the rod towards the other end. It reaches the end of the rod at $t = T$ and stops. The angular speed of the system remains $\\omega$ throughout. The magnitude of the torque $(|\\vec{\\tau}|)$ on the system about $O$, as a function of time is best represented by which plot?\n<image_1><image_2>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_81": {
    "pid": "phy_81",
    "question": "In an aluminum (Al) bar of square cross section, a square hole is drilled and is filled with iron (Fe) as shown in the figure. The electrical resistivities of Al and Fe are $2.7 \\times 10^{-8}$ $\\Omega$ m and $1.0 \\times 10^{-7}$ $\\Omega$ m, respectively. The electrical resistance between the two faces P and Q of the composite bar is\n<image_1>",
    "options": [
      "$\\frac{2475}{64}$ $\\mu\\Omega$",
      "$\\frac{1875}{64}$ $\\mu\\Omega$",
      "$\\frac{1875}{49}$ $\\mu\\Omega$",
      "$\\frac{2475}{132}$ $\\mu\\Omega$"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_82": {
    "pid": "phy_82",
    "question": "A spherically symmetric gravitational system of particles has a mass density\n$\\rho = \\begin{cases} \n\\rho_0 & \\text{for } r \\leq R \\\\\n0 & \\text{for } r > R\n\\end{cases}$\n\nwhere $\\rho_0$ is a constant. A test mass can undergo circular motion under the influence of the gravitational field of particles. Its speed $V$ as a function of distance $r$ $(0 < r < \\infty)$ from the centre of the system is represented by\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_83": {
    "pid": "phy_83",
    "question": "The x-t graph of a particle undergoing simple harmonic motion is shown below. The acceleration of the particle at t = 4/3 s is\n\n<image_1>",
    "options": [
      "$\\frac{\\sqrt{3}}{32}\\pi^2$ cm/s$^2$",
      "$\\frac{-\\pi^2}{32}$ cm/s$^2$",
      "$\\frac{\\pi^2}{32}$ cm/s$^2$",
      "$-\\frac{\\sqrt{3}}{32}\\pi^2$ cm/s$^2$"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_84": {
    "pid": "phy_84",
    "question": "Consider a thin square sheet of side L and thickness t, made of a material of resistivity \u03c1. The resistance between two opposite faces, shown by the shaded areas in the figure is\n<image_1>",
    "options": [
      "directly proportional to L",
      "directly proportional to t",
      "independent of L",
      "independent of t"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_85": {
    "pid": "phy_85",
    "question": "A tennis ball is dropped on a horizontal smooth surface. It bounces back to its original position after hitting the surface. The force on the ball during the collision is proportional to the length of compression of the ball. Which one of the following sketches describes the variation of its kinetic energy $K$ with time $t$ most appropriately? The figures are only illustrative and not to the scale.\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_86": {
    "pid": "phy_86",
    "question": "A block of mass m is on an inclined plane of angle $\\theta$. The coefficient of friction between the block and the plane is $\\mu$ and $\\tan\\theta>\\mu$. The block is held stationary by applying a force P parallel to the plane. The direction of force pointing up the plane is taken to be positive. As P is varied from $P_1= mg(\\sin\\theta - \\mu \\cos\\theta)$ to $P_2= mg(\\sin\\theta + \\mu \\cos\\theta)$, the frictional force f versus P graph will look like\n<image_1><image_2>",
    "options": [
      "A)",
      "B)",
      "C)",
      "D)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_87": {
    "pid": "phy_87",
    "question": "Photoelectric effect experiments are performed using three different metal plates p, q and r having work functions $\\phi_p = 2.0$ eV, $\\phi_q = 2.5$ eV and $\\phi_r = 3.0$ eV, respectively. A light beam containing wavelengths of 550 nm, 450 nm and 350 nm with equal intensities illuminates each of the plates. The correct I-V graph for the experiment is [Take $hc = 1240$eV nm]\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_88": {
    "pid": "phy_88",
    "question": "A light beam is traveling from Region I to Region IV (Refer Figure). The refractive index in Regions I, II, III and IV are $n_0$, $\\frac{n_0}{2}$, $\\frac{n_0}{6}$ and $\\frac{n_0}{8}$, respectively. The angle of incidence $\\theta$ for which the beam just misses entering Region IV is\n<image_1>",
    "options": [
      "$\\sin^{-1}(\\frac{3}{4})$",
      "$\\sin^{-1}(\\frac{1}{8})$",
      "$\\sin^{-1}(\\frac{1}{4})$",
      "$\\sin^{-1}(\\frac{1}{3})$"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "phy_89": {
    "pid": "phy_89",
    "question": "Consider a system of three charges $\\frac{q}{3}$, $\\frac{q}{3}$ and $-\\frac{2q}{3}$ placed at points A, B and C, respectively, as shown in the figure. Take O to be the centre of the circle of radius R and angle CAB = 60\u00b0\n<image_1>",
    "options": [
      "The electric field at point O is $\\frac{q}{8\\pi\\epsilon_0R^2}$ directed along the negative x-axis",
      "The potential energy of the system is zero",
      "The magnitude of the force between the charges at C and B is $\\frac{q^2}{54\\pi\\epsilon_0R^2}$",
      "The potential at point O is $\\frac{q}{12\\pi\\epsilon_0R}$"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_90": {
    "pid": "phy_90",
    "question": "A block of mass 2 kg is free to move along the x-axis. It is at rest and from t = 0 onwards it is subjected to a time-dependent force F(t) in the x direction. The force F(t) varies with t as shown in the figure. The kinetic energy of the block after 4.5 seconds is\n<image_1>",
    "options": [
      "A)",
      "B)",
      "C)",
      "D)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_91": {
    "pid": "phy_91",
    "question": "The figures below depict two situations in which two infinitely long static line charges of constant positive line charge density $\\lambda$ are kept parallel to each other. In their resulting electric field, point charges $q$ and $-q$ are kept in equilibrium between them. The point charges are confined to move in the $x$ direction only. If they are given a small displacement about their equilibrium positions, then the correct statement(s) is(are)\n<image_1>",
    "options": [
      "Both charges execute simple harmonic motion.",
      "Both charges will continue moving in the direction of their displacement.",
      "Charge $+q$ executes simple harmonic motion while charge $-q$ continues moving in the direction of its displacement.",
      "Charge $-q$ executes simple harmonic motion while charge $+q$ continues moving in the direction of its displacement."
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_92": {
    "pid": "phy_92",
    "question": "Which of the field patterns given below is valid for electric field as well as for magnetic field?\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_93": {
    "pid": "phy_93",
    "question": "Consider an electric field $\\vec{E} = E_0 \\hat{x}$, where $E_0$ is a constant. The flux through the shaded area (as shown in the figure) due to this field is\n<image_1>",
    "options": [
      "$2E_0a^2$",
      "$\\sqrt{2}E_0a^2$",
      "$E_0a^2$",
      "$\\frac{E_0a^2}{\\sqrt{2}}$"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_94": {
    "pid": "phy_94",
    "question": "A parallel plate capacitor having plates of area $S$ and plate separation $d$, has capacitance $C_1$ in air. When two dielectrics of different relative permittivities ($\\epsilon_1 = 2$ and $\\epsilon_2 = 4$) are introduced between the two plates as shown in the figure, the capacitance becomes $C_2$. The ratio $\\frac{C_2}{C_1}$ is\n<image_1>",
    "options": [
      "$6/5$",
      "$5/3$",
      "$7/5$",
      "$7/3$"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_95": {
    "pid": "phy_95",
    "question": "A disk of radius $a/4$ having a uniformly distributed charge $6C$ is placed in the $x$-y plane with its centre at $(-a/2, 0, 0)$. A rod of length $a$ carrying a uniformly distributed charge $8C$ is placed on the $x$-axis from $x = a/4$ to $x = 5a/4$. Two point charges $-7C$ and $3C$ are placed at $(a/4, -a/4, 0)$ and $(-3a/4, 3a/4, 0)$, respectively. Consider a cubical surface formed by six surfaces $x = \\pm a/2$, $y = \\pm a/2$, $z = \\pm a/2$. The electric flux through this cubical surface is\n<image_1>",
    "options": [
      "$\\frac{-2C}{\\varepsilon_0}$",
      "$\\frac{2C}{\\varepsilon_0}$",
      "$\\frac{10C}{\\varepsilon_0}$",
      "$\\frac{12C}{\\varepsilon_0}$"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_96": {
    "pid": "phy_96",
    "question": "A transverse sinusoidal wave moves along a string in the positive $x$-direction at a speed of 10 cm/s. The wavelength of the wave is 0.5 m and its amplitude is 10 cm. At a particular time $t$, the snap-shot of the wave is shown in figure. The velocity of point P when its displacement is 5 cm is\n<image_1>",
    "options": [
      "$\\frac{\\sqrt{3}\\pi}{50}\\hat{j}$ m/s",
      "$-\\frac{\\sqrt{3}\\pi}{50}\\hat{j}$ m/s",
      "$\\frac{\\sqrt{3}\\pi}{50}\\hat{i}$ m/s",
      "$-\\frac{\\sqrt{3}\\pi}{50}\\hat{i}$ m/s"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_97": {
    "pid": "phy_97",
    "question": "In the given circuit, a charge of +80 $\\mu$C is given to the upper plate of the 4 $\\mu$F capacitor. Then in the steady state, the charge on the upper plate of the 3 $\\mu$F capacitor is\n<image_1>",
    "options": [
      "+32 $\\mu$C",
      "+40 $\\mu$C",
      "+48 $\\mu$C",
      "+80 $\\mu$C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_98": {
    "pid": "phy_98",
    "question": "To verify Ohm's law, a student is provided with a test resistor $R_T$, a high resistance $R_1$, a small resistance $R_2$, two identical galvanometers $G_1$ and $G_2$, and a variable voltage source V. The correct circuit to carry out the experiment is\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_99": {
    "pid": "phy_99",
    "question": "The distribution of the sound intensity of the whistle as observed by the passengers in train A is best represented by\n<image_1>",
    "options": [
      "(A)",
      "(B)",
      "(C)",
      "(D)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_100": {
    "pid": "phy_100",
    "question": "A small object of uniform density rolls up a curved surface with an initial velocity $v$. It reaches up to a maximum height of $\\frac{3v^2}{4g}$ with respect to the initial position. The object is\n<image_1>",
    "options": [
      "ring",
      "solid sphere",
      "hollow sphere",
      "disc"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_101": {
    "pid": "phy_101",
    "question": "A block of mass \\(m_1 = 1 \\, \\mathrm{kg}\\), another mass \\(m_2 = 2 \\, \\mathrm{kg}\\), are placed together (see figure) on an inclined plane with angle of inclination \\(\\theta\\). Various values of \\(\\theta\\) are given in List I. The coefficient of friction between the block \\(m_1\\) and the plane is always zero. The coefficient of static and dynamic friction between the block \\(m_2\\) and the plane are equal to \\(\\mu = 0.3\\). In List II, expressions for the friction on block \\(m_2\\) are given. Match the correct expression of the friction in List II with the angles given in List I, and choose the correct option. The acceleration due to gravity is denoted by \\(g\\).\n\nUseful information: \\(\\tan(5.5^\\circ) \\approx 0.1, \\tan(11.5^\\circ) \\approx 0.2, \\tan(16.5^\\circ) \\approx 0.3\\)\n\nList I:  \nP. \\(\\theta = 5^\\circ\\)  \nQ. \\(\\theta = 10^\\circ\\)  \nR. \\(\\theta = 15^\\circ\\)  \nS. \\(\\theta = 20^\\circ\\)  \n\nList II:  \n1. \\(m_2 g \\sin \\theta\\)  \n2. \\((m_1 + m_2) g \\sin \\theta\\)  \n3. \\(\\mu m_2 g \\cos \\theta\\)  \n4. \\(\\mu (m_1 + m_2) g \\cos \\theta\\)\n\n<image_1>",
    "options": [
      "\\(P-1, Q-1, R-1, S-3\\) ",
      "\\(P-2, Q-2, R-2, S-3\\)",
      "\\(P-2, Q-2, R-2, S-4\\)",
      "\\(P-2, Q-2, R-3, S-3\\)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_102": {
    "pid": "phy_102",
    "question": "A small object is placed 50 cm to the left of a thin convex lens of focal length 30 cm. A convex spherical mirror of radius of curvature 100 cm is placed to the right of the lens at a distance of 50 cm. The mirror is tilted such that the axis of the mirror is at an angle \u03b8 = 30\u00b0 to the axis of the lens, as shown in the figure.\n\nIf the origin of the coordinate system is taken to be at the centre of the lens, the coordinates (in cm) of the point (x,y) at which the image is formed are\n<image_1>",
    "options": [
      "(0, 0)",
      "(50 - 25\u221a3, 25)",
      "(25, 25\u221a3)",
      "(125/3, 25/\u221a3)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_103": {
    "pid": "phy_103",
    "question": "Two identical glass rods $S_1$ and $S_2$ (refractive index = 1.5) have one convex end of radius of curvature 10 cm. They are placed with the curved surfaces at a distance $d$ as shown in the figure, with their axes (shown by the dashed line) aligned. When a point source of light $P$ is placed inside rod $S_1$ on its axis at a distance of 50 cm from the curved face, the light rays emanating from it are found to be parallel to the axis inside $S_2$. The distance $d$ is\n<image_1>",
    "options": [
      "60 cm",
      "70 cm",
      "80 cm",
      "90 cm"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_104": {
    "pid": "phy_104",
    "question": "An infinite line charge of uniform electric charge density $\\lambda$ lies along the axis of an electrically conducting infinite cylindrical shell of radius $R$. At time $t = 0$, the space inside the cylinder is filled with a material of permittivity $\\epsilon$ and electrical conductivity $\\sigma$. The electrical conduction in the material follows Ohm's law. Which one of the following graphs best describes the subsequent variation of the magnitude of current density $j(t)$ at any point in the material?\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_105": {
    "pid": "phy_105",
    "question": "An infinitely long hollow conducting cylinder with inner radius $R/2$ and outer radius $R$ carries a uniform current density along its length. The magnitude of the magnetic field, $|\\vec{B}|$ as a function of the radial distance $r$ from the axis is best represented by\n<image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_106": {
    "pid": "phy_106",
    "question": "Figure shows three resistor configurations R1, R2 and R3 connected to 3 V battery. If the power dissipated by the configuration R1, R2 and R3 is P1, P2 and P3, respectively, then\n<image_1>",
    "options": [
      "P1 > P2 > P3",
      "P1 > P3 > P2",
      "P2 > P1 > P3",
      "P3 > P2 > P1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_107": {
    "pid": "phy_107",
    "question": "A bob of mass M is suspended by a massless string of length L. The horizontal velocity V at position A is just sufficient to make it reach the point B. The angle $\\theta$ at which the speed of the bob is half of that at A, satisfies\n<image_1>",
    "options": [
      "$\\theta = \\frac{\\pi}{4}$",
      "$\\frac{\\pi}{4} < \\theta < \\frac{\\pi}{2}$",
      "$\\frac{\\pi}{2} < \\theta < \\frac{3\\pi}{4}$",
      "$\\frac{3\\pi}{4} < \\theta < \\pi$"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_108": {
    "pid": "phy_108",
    "question": "The figure shows certain wire segments joined together to form a coplanar loop. The loop is placed in a perpendicular magnetic field in the direction going into the plane of the figure. The magnitude of the field increases with time. $I_1$ and $I_2$ are the currents in the segments ab and cd . Then,\n<image_1>",
    "options": [
      "$I_1 > I_2$",
      "$I_1 < I_2$",
      "$I_1$ is in the direction ba and $I_2$ is in the direction cd",
      "$I_1$ is in the direction ab and $I_2$ is in the direction dc"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_109": {
    "pid": "phy_109",
    "question": "17. Four charges $Q_1$, $Q_2$, $Q_3$ and $Q_4$ of same magnitude are fixed along the $x$ axis at $x = -2a$, $-a$, $+a$ and $+2a$, respectively. A positive charge $q$ is placed on the positive $y$ axis at a distance $b > 0$. Four options of the signs of these charges are given in List I. The direction of the forces on the charge $q$ is given in List II. Match List I with List II and select the correct answer using the code given below the lists.\n\nList I\nP. $Q_1$, $Q_2$, $Q_3$, $Q_4$ all positive\nQ. $Q_1$, $Q_2$ positive; $Q_3$, $Q_4$ negative\nR. $Q_1$, $Q_4$ positive; $Q_2$, $Q_3$ negative\nS. $Q_1$, $Q_3$ positive; $Q_2$, $Q_4$ negative\n\nList II\n1. $+x$\n2. $-x$\n3. $+y$\n4. $-y$\n<image_1>",
    "options": [
      "P-3, Q-1, R-4, S-2",
      "P-4, Q-2, R-3, S-1",
      "P-3, Q-1, R-2, S-4",
      "P-4, Q-2, R-1, S-3"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_110": {
    "pid": "phy_110",
    "question": "There are two Vernier calipers both of which have 1 cm divided into 10 equal divisions on the main scale. The Vernier scale of one of the calipers $(C_1)$ has 10 equal divisions that correspond to 9 main scale divisions. The Vernier scale of the other caliper $(C_2)$ has 10 equal divisions that correspond to 11 main scale divisions. The readings of the two calipers are shown in the figure. The measured values (in cm) by calipers $C_1$ and $C_2$, respectively, are\n<image_1>",
    "options": [
      "2.85 and 2.82",
      "2.87 and 2.83",
      "2.87 and 2.86",
      "2.87 and 2.87"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_111": {
    "pid": "phy_111",
    "question": "A billiard ball rolling across a table in the \\( +x \\) direction at \\( 3 \\, \\text{m/s} \\) hits the edge of the table at a perpendicular angle, and bounces back in the \\( -x \\) direction, now traveling at \\( 2 \\, \\text{m/s} \\) in the opposite direction. The greatest magnitude of acceleration for the billiard ball was at time\n<image_1>",
    "options": [
      "\\( t = 1 \\times 10^{-3} \\, s \\)",
      "\\( t = 2 \\times 10^{-3} \\, s \\)",
      "\\( t = 5 \\times 10^{-3} \\, s \\)",
      "\\( t = 7 \\times 10^{-3} \\, s \\)",
      "\\( t = 9 \\times 10^{-3} \\, s \\)"
    ],
    "answer": "c",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "phy_112": {
    "pid": "phy_112",
    "question": "An object is dropped and accelerates downwards. As it falls, it is affected by air friction, but never reaches terminal velocity during the course of its fall. The graph that could indicate the magnitude of the object's acceleration as a function of time is\n\n<image_1>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_113": {
    "pid": "phy_113",
    "question": "At time \\( t = 0 \\), a red car and a blue car are both located at \\( x = 0 \\), with the red car travelling at a constant speed \\( v \\) along the positive \\( x \\)-axis and the blue car at rest and just beginning to accelerate along a path parallel to the red car. The velocity of both cars from time \\( 0 \\) to \\( 2t \\) is graphed above. At time \\( t \\):\n<image_1>",
    "options": [
      "the blue car has traveled farther, and both cars have the same instantaneous velocity",
      "both cars have traveled the same distance, and the blue car has a greater instantaneous velocity",
      "the red car has traveled farther, and both cars have the same instantaneous velocity",
      "both cars have traveled the same distance, and both cars have the same instantaneous velocity",
      "the blue car has traveled farther, and the blue car has a greater instantaneous velocity"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_114": {
    "pid": "phy_114",
    "question": "The graph above describes the velocity \\( v \\) of an object moving along the \\( x \\)-axis as a function of time \\( t \\). Which graph below is a possible position vs. time graph for this object?\n<image_1><image_2>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_115": {
    "pid": "phy_115",
    "question": "The free-body diagram shows all forces acting on a box supported by a stationary horizontal surface, where the length of each force vector is proportional to its magnitude. Which statement below is correct?\n<image_1>",
    "options": [
      "The box must be moving to the left, due to the Force of friction acting in that direction.",
      "The box must be accelerating to the right, as indicated by the Force of friction in the opposite direction.",
      "The box must be moving to the right, as indicated by the Force of friction in the opposite direction.",
      "The diagram is drawn incorrectly: there can be no Force of friction unless the box is moving.",
      "None of these statements is correct."
    ],
    "answer": "c",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_116": {
    "pid": "phy_116",
    "question": "A billiard ball hits the side of a pool table at an angle \\( \\Theta \\) as shown in the top view above, and bounces away at the same angle, and with the same speed. Which vector indicates the direction of the net change in momentum of the billiard ball?\n\n<image_1><image_2>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_117": {
    "pid": "phy_117",
    "question": "A conductor lying in the \\( xy \\) plane is exposed to a magnetic field in the \\( +z \\) direction, and connected to a source of potential as shown above. Which statement correctly describes the electric field within the conductor?\n<image_1>",
    "options": [
      "There is only an \\( E \\) field in the \\( +x \\) direction",
      "There is only an \\( E \\) field in the \\( -x \\) direction",
      "There are \\( E \\) field components in the \\( +x \\) direction and the \\( +y \\) direction",
      "There are \\( E \\) field components in the \\( -x \\) direction and the \\( +y \\) direction",
      "There are \\( E \\) field components in the \\( +x \\) direction and the \\( -y \\) direction"
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "phy_118": {
    "pid": "phy_118",
    "question": "Two long parallel wires, oriented along the \\( y \\)-axis as shown, contain currents \\( I \\) and \\( 2I \\), flowing in opposite directions. Which of the following statements is true?\n<image_1>",
    "options": [
      "The magnetic field due to \\( I \\) circles that wire in a counterclockwise direction.",
      "The magnetic force from wire \\( 2I \\) on wire \\( I \\) is twice as strong as the force on wire \\( I \\) from wire \\( 2I \\).",
      "The magnetic force between the two wires is proportional to the inverse square of the distance between them.",
      "The force on wire \\( 2I \\) is in the \\( +x \\) direction.",
      "The force on wire \\( 2I \\) is in the \\( -x \\) direction."
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_119": {
    "pid": "phy_119",
    "question": "A square loop of wire, with sides of length \\( L \\), is oriented in the \\( x \\)-\\( y \\) plane, and able to rotate about an axle along the \\( y \\)-axis and running through the middle of the loop, as shown. The loop carries a current \\( I \\) in the direction indicated. In which direction should a magnetic field \\( B \\) be oriented so as to produce a clockwise torque on the current loop?\n<image_1>",
    "options": [
      "In the \\( +x \\) direction",
      "In the \\( -x \\) direction",
      "In the \\( +z \\) direction",
      "In the \\( -z \\) direction",
      "In the \\( +y \\) direction"
    ],
    "answer": "a",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_120": {
    "pid": "phy_120",
    "question": "A long bar magnet is placed above a current loop oriented as shown. In which direction will the North pole of the bar magnet feel a force due to the current loop?\n\n<image_1>",
    "options": [
      "\\( +x \\)",
      "\\( -x \\)",
      "\\( +y \\)",
      "\\( -y \\)",
      "The bar magnet will feel no force due to the current loop."
    ],
    "answer": "a",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_121": {
    "pid": "phy_121",
    "question": "Four charges are placed at the corners of a square with sides of length \\(d\\) as shown above. The electric field at point \\(X\\) in the center of the square is:\n<image_1>",
    "options": [
      "\\( \\frac{4kq}{d^2} \\), to the upper right",
      "\\( \\frac{4kq}{d^2} \\), to the lower left",
      "\\( \\frac{3kq}{d^2} \\), to the upper right",
      "\\( \\frac{2kq}{d^2} \\), to the upper right",
      "\\( \\frac{2kq}{d^2} \\), to the lower left"
    ],
    "answer": "a",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_122": {
    "pid": "phy_122",
    "question": "A light, rigid, insulating rod of length \\( L \\) is free to rotate vertically about a horizontal axis at one end. At the other end of the rod, a charged sphere of mass \\( m \\) and charge \\( -Q \\) is mounted. The rod is released in a horizontal position as shown above while an electric field is applied in the vicinity of the sphere. What magnitude and direction of electric field is required to maintain the sphere-rod in the horizontal orientation?\n<image_1>",
    "options": [
      "\\( \\frac{mg}{Q} \\), up",
      "\\( \\frac{mg}{Q} \\), down",
      "\\( \\frac{mgL}{Q} \\), up",
      "\\( \\frac{mgL}{Q} \\), down",
      "\\( \\frac{mg}{LQ} \\), up"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_123": {
    "pid": "phy_123",
    "question": "Three point charges, of charge \\( +Q \\), \\( -2Q \\), and \\( +3Q \\), are placed equidistant as shown. Which vector best describes the net direction of the electric force acting on the \\( +Q \\) charge?\n<image_1><image_2>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_124": {
    "pid": "phy_124",
    "question": "An asymmetrically shaped conducting shell is uncharged, and contains a point charge \\( +q \\) as shown above. Which of the following statements is true?\n<image_1>",
    "options": [
      "The electric field just above the surface of the conductor is 0.",
      "There are no charges located on the interior of the conducting surface.",
      "The electric field between the charge and the conducting shell is 0.",
      "The electric potential between the charge and the conducting shell is 0.",
      "The electric flux through the asymmetric shell is \\( \\frac{q}{\\epsilon_0} \\)."
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_125": {
    "pid": "phy_125",
    "question": "A non-conducting sphere of uniformly-distributed charge \\( +Q \\) is surrounded by a conducting shell with no net charge. Which of the following statements is false?\n<image_1>",
    "options": [
      "There is an electric field inside the non-conducting sphere.",
      "There is an electric field in the space between the sphere and the shell.",
      "There is an electric field above the outer surface of the conducting shell.",
      "All points in the conducting shell are at the same electric potential.",
      "All points in the non-conducting sphere are at the same potential."
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_126": {
    "pid": "phy_126",
    "question": "A rectangular metal frame, with height \\( 2L \\) and width \\( 4L \\), has a \\( 1L \\)-by-\\( 1L \\) corner section removed, as shown. The center of mass for this shape is located at:\n<image_1>",
    "options": [
      "\\( x = 1.65L, y = 0.85L \\)",
      "\\( x = 1.65L, y = 0.75L \\)",
      "\\( x = 1.425L, y = 0.65L \\)",
      "\\( x = 1.425L, y = 0.75L \\)",
      "\\( x = 1.425L, y = 0.85L \\)"
    ],
    "answer": "a",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_127": {
    "pid": "phy_127",
    "question": "A large Ferris wheel at an amusement park has four seats, located \\(90^\\circ\\) from each other and at a distance \\( R \\) from the axis. Each seat is attached to the wheel by a strong axle. As the Ferris wheel rotates with a constant angular velocity \\( \\omega \\), the seats move past positions \\( A \\), \\( B \\), \\( C \\), and \\( D \\) as shown.\n\nWhat force must an axle provide to keep a seat of mass \\( m \\) moving past position \\( A \\)?\n\n<image_1>",
    "options": [
      "\\( \\frac{1}{2} m \\omega^2 \\)",
      "\\( mg - m r \\omega^2 \\)",
      "\\( mg + m r \\omega^2 \\)",
      "\\( mg - m r \\omega \\)",
      "\\( mg \\)"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_128": {
    "pid": "phy_128",
    "question": "An object travels along a path shown above, with changing velocity as indicated by vectors \\( A \\) and \\( B \\). Which vector best represents the net acceleration of the object from time \\( t_A \\) to \\( t_B \\)?\n<image_1><image_2>",
    "options": [
      "a",
      "b",
      "c",
      "d",
      "e"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_129": {
    "pid": "phy_129",
    "question": "A ride at an amusement park consists of a hollow cylinder with a student placed against the wall as shown. When the cylinder rotates quickly enough, the student is able to lift her feet off the floor and remain stuck to the wall. In terms of the student's mass \\( m \\), the radius of the cylinder \\( r \\), the coefficient of static friction \\( \\mu \\) between the student and the wall, and fundamental quantities, determine the minimum rotational velocity \\( \\omega \\) that the ride can have while still allowing the student to stick to the wall and not slide down.\na. \\( \\sqrt{\\frac{g}{\\mu r}} \\) b. \\( \\mu g \\) c. \\( \\sqrt{rug} \\) d. \\( \\sqrt{\\frac{\\mu g}{r}} \\) e. \\( \\mu r g \\)\n<image_1>",
    "options": [
      "\\( \\sqrt{\\frac{g}{\\mu r}} \\)",
      "\\( \\mu g \\)",
      "\\( \\sqrt{rug} \\)",
      "\\( \\sqrt{\\frac{\\mu g}{r}} \\)",
      "\\( \\mu r g \\)"
    ],
    "answer": "a",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_130": {
    "pid": "phy_130",
    "question": "A block of mass \\( m \\) is placed on a plane inclined at an angle \\( \\theta \\) relative to the horizontal as shown. There is a coefficient of kinetic friction \\( \\mu_k \\) that acts as the block accelerates down the ramp. The acceleration of the mass \\( m \\) is\n<image_1>",
    "options": [
      "\\( mg\\sin\\theta - mg\\cos\\theta \\)",
      "\\( mg\\theta - \\mu mg\\cos\\theta \\)",
      "\\( mg\\sin\\theta - \\mu mg \\)",
      "\\( g\\sin\\theta - g\\cos\\theta \\)",
      "\\( g\\sin\\theta - \\mu g\\cos\\theta \\)"
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_131": {
    "pid": "phy_131",
    "question": "A mass with unknown weight \\( W \\) is suspended from cords as shown above. When the system is in static equilibrium, the tension in the horizontal cord is 10N. The weight \\( W \\) of the mass is:\n<image_1>",
    "options": [
      "\\( 20 \\, \\text{N} \\)",
      "\\( 10 \\, \\text{N} \\)",
      "\\( 10\\sqrt{3} \\, \\text{N} \\)",
      "\\( 5\\sqrt{3} \\, \\text{N} \\)",
      "\\( 20\\sqrt{3} \\, \\text{N} \\)"
    ],
    "answer": "c",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_132": {
    "pid": "phy_132",
    "question": "A mass of 2.0 kg is attached to the end of a light cord to make a pendulum 5.0 meters in length. The mass is raised to an angle of 53\u00b0 relative to the vertical, as shown, and released. The speed of the mass at the bottom of its swing is:\n<image_1>",
    "options": [
      "60 m/s",
      "7.7 m/s",
      "40 m/s",
      "6.3 m/s",
      "10 m/s"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_133": {
    "pid": "phy_133",
    "question": "An ideal solenoid has a current \\( I \\) flowing through it, up in front and down in back, as shown above. Which of the following statements is true?\n<image_1>",
    "options": [
      "The magnetic field inside the solenoid points to the right.",
      "The magnetic field strength is greater outside the solenoid than inside the solenoid.",
      "The magnetic field inside the solenoid is proportional to \\( I \\).",
      "The magnetic field inside the solenoid is proportional to its radius.",
      "The magnetic field inside the solenoid is inversely proportional to its radius."
    ],
    "answer": "c",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_134": {
    "pid": "phy_134",
    "question": "An electron traveling in the negative-\\( x \\) direction passes through a magnetic field, and experiences a magnetic force in the positive-\\( y \\) direction as shown. The magnetic field could be oriented in the\n<image_1>",
    "options": [
      "\\( +x \\) direction",
      "\\( -y \\) direction",
      "\\( +z \\) direction",
      "\\( -x \\) direction",
      "\\( -z \\) direction"
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_135": {
    "pid": "phy_135",
    "question": "Three point charges of \\( +Q \\), \\( +2Q \\), and \\( -Q \\) are each located a distance \\( r \\) away from the origin, as shown above. The magnitude of the electric field at the origin due to these charges is:\n\n<image_1>",
    "options": [
      "\\( \\frac{2kQ}{r^2} \\)",
      "\\( \\frac{2kQ^2}{r^2} \\)",
      "\\( \\frac{2kQ}{r} \\)",
      "\\( \\frac{\\sqrt{2}kQ}{r^2} \\)",
      "\\( \\frac{\\sqrt{2}kQ}{2r^2} \\)"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_136": {
    "pid": "phy_136",
    "question": "The instantaneous velocity and net acceleration for an object moving in a circular path are shown above. At this moment in time, the object is\n<image_1>",
    "options": [
      "speeding up in a clockwise circle",
      "slowing down in a clockwise circle",
      "speeding up in a counterclockwise circle",
      "slowing down in a counterclockwise circle",
      "traveling in a clockwise circle at constant speed"
    ],
    "answer": "d",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_137": {
    "pid": "phy_137",
    "question": "An amusement park ride consists of a large spinning cylinder of radius \\( r \\) with rough walls. At a given angular velocity \\( \\omega \\), the horizontal floor of the cylinder drops, but a rider of mass \\( m \\) remains safely pinned against the walls of the cylinder. What is the minimum coefficient of static friction \\( \\mu \\) necessary for the rider to keep from sliding down the wall?\n<image_1>",
    "options": [
      "\\( \\frac{rg}{\\omega^2} \\)",
      "\\( \\frac{g}{r \\omega^2} \\)",
      "\\( mg \\)",
      "\\( \\frac{mg}{r \\omega^2} \\)",
      "\\( \\frac{rg}{mv^2} \\)"
    ],
    "answer": "b",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "phy_138": {
    "pid": "phy_138",
    "question": "A disk of mass \\( m \\) is placed on a frictionless table, and attached to a vertically-hanging mass \\( M \\) by a string that passes through a frictionless opening in the surface. The disk has a speed \\( v \\) as it travels in a circle with a constant radius \\( R \\). How much work is done on the disk in one half revolution?\n<image_1>",
    "options": [
      "\\( Mg \\cdot \\pi R \\)",
      "\\( mg \\cdot \\pi R \\)",
      "\\( Mg \\cdot \\frac{1}{2} \\pi R^2 \\)",
      "\\( Mg \\cdot 2R \\)",
      "none of these"
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "phy_139": {
    "pid": "phy_139",
    "question": "A wheel consists of three uniform spokes, with length \\( R \\) and mass \\( M \\), mounted 120 degrees apart on a horizontal frictionless axle and connected by a rim of negligible mass. Consider the counterclockwise direction to be positive. When the spokes are oriented as shown in the diagram above, the net Torque on the wheel due to the weight of the spokes is\n<image_1>",
    "options": [
      "\\( +RMg \\)",
      "\\( -2RMg \\)",
      "\\( \\frac{R}{2} Mg (\\sqrt{3} - 1) \\)",
      "\\( \\frac{R}{2} Mg (1 - \\sqrt{3}) \\)",
      "\\( 0 \\)"
    ],
    "answer": "e",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "ap_physics",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": true
  },
  "phy_140": {
    "pid": "phy_140",
    "question": "<image_1>A conducting loop of wire that is initially around a magnet is pulled away from the magnet to the right, as indicated in the figure, inducing a current in the loop. What is the direction of the force on the magnet and the direction of the magnetic field at the center of the loop due to the induced current?Force on the Magnet/Magnetic Field at Center of Loop due To Induced Current",
    "options": [
      "To the right/To the right",
      "To the right/To the left",
      "To the left/To the right",
      "No direction; the force is zero./To the left"
    ],
    "answer": "A",
    "solution": "As the loop is pulled to the right, it loses flu* lines right so current is generated by Lenz law to add more flu* lines right. This newly created field to the right from the loop is in the same direction as the magnetic field so makes an attractive force pulling the magnet right also.",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_141": {
    "pid": "phy_141",
    "question": "<image_1>A light ray enters a block of plastic and travels along the path shown.By considering the behavior of the ray at point P, determine the speed of light in the plastic.(10^8m/s)",
    "options": [
      "0.44",
      "0.88",
      "1.13",
      "2.26"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_142": {
    "pid": "phy_142",
    "question": "<image_1>The uniform rod shown below is held in place by the rope and wall. Suppose you know the weight of the rod and all dimensions. Then you can solve a single equation for the force exerted by the rope, provided you write expressions for the torques about the point:",
    "options": [
      "1",
      "2",
      "3",
      "4",
      "1, 2, or 3"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_143": {
    "pid": "phy_143",
    "question": "<image_1>The graph above shows the velocity versus time for an object moving in a straight line. At what time after t = 0 does the object again pass through its initial position?",
    "options": [
      "1 s",
      "Between 1 and 2 s",
      "2 s",
      "Between 2 and 3 s"
    ],
    "answer": "B",
    "solution": "Area bounded by the curve is the displacement By inspection the negative area between 0 and 1s will be countered by an equal negative area sometime between 1 and 2s.",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_144": {
    "pid": "phy_144",
    "question": "<image_1>A beam of light passes from medium 1 to medium 2 to medium 3 as shown in the diagram. What may be concluded about the speed of light in each medium?",
    "options": [
      "v_3 > v_1 > v_2",
      "v_1 > v_2 > v_3",
      "v_1 > v_3 < v_2",
      "v_2 > v_3 > v_1"
    ],
    "answer": "A",
    "solution": "More-Less dense bend away, Less-More dense bend towards. The more the bend, the bigger the difference in n 's.",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_145": {
    "pid": "phy_145",
    "question": "<image_1>A thin film with index of refraction n_1 separates two materials, each of which has an index of refraction less than nf. A monochromatic beam of light is incident normally on the film, as shown above. If the light has wavelength $\\lambda $ within the film, maximum constructive interference between the incident beam and the reflected beam occurs for which of the following film thicknesses?",
    "options": [
      "2$\\lambda $",
      "$\\lambda $",
      "$\\lambda $/2",
      "$\\lambda $/4"
    ],
    "answer": "D",
    "solution": "The film has a higher n compared to both sides, such as soap surrounded by air. ",
    "subject": "Physics",
    "task": "",
    "category": "Path Tracing",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "phy_146": {
    "pid": "phy_146",
    "question": "<image_1>A circuit is connected as shown. All light bulbs are identical. When the switch in the circuit is closed illuminating bulb #4, which other bulb(s) also become brighter?",
    "options": [
      "Bulb #1 only",
      "Bulb #2 only",
      "Bulbs #2 and #3 only",
      "Bulbs #1, #2, and #3"
    ],
    "answer": "A",
    "solution": "Closing the switch reduces the total resistance of the circuit, increasing the current in the main branch containing bulb 1",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_147": {
    "pid": "phy_147",
    "question": "<image_1>A student performs the photoelectric effect experiment and obtains the data depicted in the accompanying graph of E_{km} (maximum kinetic energy) of photoelectrons v. the frequency of the photons. What is the approximate work function of this material?",
    "options": [
      "1.5 eV",
      "2.0 eV",
      "2.7 eV",
      "3.5 eV"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Graph Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_148": {
    "pid": "phy_148",
    "question": "<image_1>A square loop of wire of side 0.5 meter and resistance 10^{-2} ohm is located in a uniform magnetic field of intensity 0.4 tesla directed out of the page as shown. The magnitude of the field is decreased to zero at a constant rate in 2 seconds. As the field is decreased, what are the magnitude and direction of the current in the loop?",
    "options": [
      "Zero",
      "5 A, counterclockwise",
      "5 A, clockwise",
      "20 A, counterclockwise"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "3d Field Simulation",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_149": {
    "pid": "phy_149",
    "question": "<image_1>What does the ? represent in the nuclear reaction",
    "options": [
      "an alpha particle",
      "an electron",
      "a neutron",
      "a proton"
    ],
    "answer": "C",
    "solution": "For everything to add up properly, we need ... 1/0 which is a neutron.",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_150": {
    "pid": "phy_150",
    "question": "In the circuit shown below, each of the resistors has the same resistance.<image_1>A voltmeter with very high resistance is connected between two points in the circuit.Between which two points of connection would the voltmeter read zero?",
    "options": [
      "Q and U",
      "P and T",
      "Q and W",
      "S and U"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "phy_151": {
    "pid": "phy_151",
    "question": "<image_1>If the ammeter in the circuit above reads zero, what is the resistance R ?",
    "options": [
      "1.5 $\\Omega $",
      "4 $\\Omega $",
      "5 $\\Omega $",
      "6 $\\Omega $"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_152": {
    "pid": "phy_152",
    "question": "A standing wave pattern is established in a string as shown. The wavelength of one of the component traveling waves is:<image_1>",
    "options": [
      "0.25 m",
      "0.5 m",
      "1 m",
      "2 m",
      "4 m"
    ],
    "answer": "E",
    "solution": "T=1/f c=$\\lambda $f",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "phy_153": {
    "pid": "phy_153",
    "question": "<image_1>An object shown in the accompanying figure moves in uniform circular motion. Which arrow best depicts the net force acting on the object at the instant shown?",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "Centripetal force points toward the center of the circle",
    "subject": "Physics",
    "task": "",
    "category": "Visual Decomposition Simulation",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "phy_154": {
    "pid": "phy_154",
    "question": "The diagram below represents a toy car starting from rest and uniformly accelerating across the floor. The time and distance traveled from the start are shown in the diagram.<image_1>What was the instantaneous velocity of the cart at 96 centimeters from the start?",
    "options": [
      "0.6 m/s",
      "4.8 m/s",
      "1.9 m/s",
      "60 m/s",
      "2.4 m/s"
    ],
    "answer": "B",
    "solution": "v = v(i) + at",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "phy_155": {
    "pid": "phy_155",
    "question": "<image_1>For the solenoids shown in the diagram (which are assumed to be close to each other), the resistance of the left-hand circuit is slowly increased. In which direction does the ammeter needle (indicating the direction of conventional current) in the right-hand circuit deflect in response to this change?",
    "options": [
      "The needle deflects to the left.",
      "The needle deflects to the right.",
      "The needle oscillates back and forth.",
      "The needle never moves."
    ],
    "answer": "A",
    "solution": "",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "phy_156": {
    "pid": "phy_156",
    "question": "<image_1>A battery, an ammeter, three resistors, and a switch are connected to form the simple circuit shown above. When the switch is closed what would happen to the potential difference across the 15 ohm resistor?",
    "options": [
      "it would equal the potential difference across the 20 ohm resistor",
      "it would be twice the potential difference across the 30 ohm resistor",
      "it would equal the potential difference across the 30 ohm resistor",
      "it would be half the potential difference across the 30 ohm resistor"
    ],
    "answer": "C",
    "solution": "The 15 \u03a9 resistor would be in parallel with the 30 \u03a9 resistor when the switch is closed. ",
    "subject": "Physics",
    "task": "",
    "category": "Multi-hop Visual Reasoning",
    "source": "MMMU",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1": {
    "pid": "chem_1",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_2": {
    "pid": "chem_2",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_3": {
    "pid": "chem_3",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_4": {
    "pid": "chem_4",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_5": {
    "pid": "chem_5",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_6": {
    "pid": "chem_6",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_7": {
    "pid": "chem_7",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_8": {
    "pid": "chem_8",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_9": {
    "pid": "chem_9",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_10": {
    "pid": "chem_10",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_11": {
    "pid": "chem_11",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_12": {
    "pid": "chem_12",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_13": {
    "pid": "chem_13",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_14": {
    "pid": "chem_14",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_15": {
    "pid": "chem_15",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_16": {
    "pid": "chem_16",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_17": {
    "pid": "chem_17",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_18": {
    "pid": "chem_18",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_19": {
    "pid": "chem_19",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_20": {
    "pid": "chem_20",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_21": {
    "pid": "chem_21",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_22": {
    "pid": "chem_22",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_23": {
    "pid": "chem_23",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_24": {
    "pid": "chem_24",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_25": {
    "pid": "chem_25",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_26": {
    "pid": "chem_26",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_27": {
    "pid": "chem_27",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_28": {
    "pid": "chem_28",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_29": {
    "pid": "chem_29",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_30": {
    "pid": "chem_30",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_31": {
    "pid": "chem_31",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_32": {
    "pid": "chem_32",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_33": {
    "pid": "chem_33",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_34": {
    "pid": "chem_34",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_35": {
    "pid": "chem_35",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_36": {
    "pid": "chem_36",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_37": {
    "pid": "chem_37",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_38": {
    "pid": "chem_38",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_39": {
    "pid": "chem_39",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_40": {
    "pid": "chem_40",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_41": {
    "pid": "chem_41",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_42": {
    "pid": "chem_42",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_43": {
    "pid": "chem_43",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_44": {
    "pid": "chem_44",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_45": {
    "pid": "chem_45",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_46": {
    "pid": "chem_46",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_47": {
    "pid": "chem_47",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_48": {
    "pid": "chem_48",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_49": {
    "pid": "chem_49",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_50": {
    "pid": "chem_50",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_51": {
    "pid": "chem_51",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_52": {
    "pid": "chem_52",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_53": {
    "pid": "chem_53",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_54": {
    "pid": "chem_54",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_55": {
    "pid": "chem_55",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_56": {
    "pid": "chem_56",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_57": {
    "pid": "chem_57",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_58": {
    "pid": "chem_58",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_59": {
    "pid": "chem_59",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_60": {
    "pid": "chem_60",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_61": {
    "pid": "chem_61",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_62": {
    "pid": "chem_62",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_63": {
    "pid": "chem_63",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_64": {
    "pid": "chem_64",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_65": {
    "pid": "chem_65",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_66": {
    "pid": "chem_66",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_67": {
    "pid": "chem_67",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_68": {
    "pid": "chem_68",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_69": {
    "pid": "chem_69",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_70": {
    "pid": "chem_70",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_71": {
    "pid": "chem_71",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_72": {
    "pid": "chem_72",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_73": {
    "pid": "chem_73",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_74": {
    "pid": "chem_74",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_75": {
    "pid": "chem_75",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_76": {
    "pid": "chem_76",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_77": {
    "pid": "chem_77",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_78": {
    "pid": "chem_78",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_79": {
    "pid": "chem_79",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_80": {
    "pid": "chem_80",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_81": {
    "pid": "chem_81",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_82": {
    "pid": "chem_82",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_83": {
    "pid": "chem_83",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_84": {
    "pid": "chem_84",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_85": {
    "pid": "chem_85",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_86": {
    "pid": "chem_86",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_87": {
    "pid": "chem_87",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_88": {
    "pid": "chem_88",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_89": {
    "pid": "chem_89",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_90": {
    "pid": "chem_90",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_91": {
    "pid": "chem_91",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_92": {
    "pid": "chem_92",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_93": {
    "pid": "chem_93",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_94": {
    "pid": "chem_94",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_95": {
    "pid": "chem_95",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_96": {
    "pid": "chem_96",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_97": {
    "pid": "chem_97",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_98": {
    "pid": "chem_98",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_99": {
    "pid": "chem_99",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_100": {
    "pid": "chem_100",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_101": {
    "pid": "chem_101",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_102": {
    "pid": "chem_102",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_103": {
    "pid": "chem_103",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_104": {
    "pid": "chem_104",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_105": {
    "pid": "chem_105",
    "question": "<image_1> An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. The transition-state structure undergoes changes after the electron has been relocated or reacted. Which of the following options shows the structure after the change? Note: Disregard the arrows in the options. The selected option should represent the immediate product of the next step, not the final product of the reaction.",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation Pro",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_106": {
    "pid": "chem_106",
    "question": "The correct statement about the following disaccharide is <image_1>",
    "options": [
      "Ring (a) is pyranose with $\\alpha$-glycosidic link",
      "Ring (a) is furanose with $\\alpha$-glycosidic link",
      "Ring (b) is furanose with $\\alpha$-glycosidic link",
      "Ring (b) is pyranose with $\\beta$-glycosidic link"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_107": {
    "pid": "chem_107",
    "question": "The structure of the intermediate I is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_108": {
    "pid": "chem_108",
    "question": "P is the probability of finding the 1s electron of hydrogen atom in a spherical shell of infinitesimal thickness, dr, at a distance r from the nucleus. The volume of this shell is 4$\\pi r^2$dr. The qualitative sketch of the dependence of P on r is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_109": {
    "pid": "chem_109",
    "question": "The major product H of the given reaction sequence is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_110": {
    "pid": "chem_110",
    "question": "Match the four starting materials (P, Q, R, S) given in List I with the corresponding reaction schemes (I, II, III, IV) provided in List II and select the correct answer using the code given below the lists. <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_111": {
    "pid": "chem_111",
    "question": "The following carbohydrate is <image_1>",
    "options": [
      "a ketohexose",
      "an aldohexose",
      "an \u4f2a-furanose",
      "an \u4f2a-pyranose"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_112": {
    "pid": "chem_112",
    "question": "In the following reaction sequence, the correct structures of E, F and G are <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_113": {
    "pid": "chem_113",
    "question": "Under ambient conditions, the total number of gases released as products in the final step of the reaction scheme shown below is <image_1>",
    "options": [
      "0",
      "1",
      "2",
      "3"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_114": {
    "pid": "chem_114",
    "question": "The major product of the following reaction is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_115": {
    "pid": "chem_115",
    "question": "The structure of D-(+)-glucose is <image_1>. The structure of L-(-)-glucose is <image_2>. <image_1> <image_2>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_116": {
    "pid": "chem_116",
    "question": "The major product of the following reaction sequence is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_117": {
    "pid": "chem_117",
    "question": "The correct stability order of the following resonance structures is H$_2$C=N-N$^{+}$ $^{-}$ & H$_2$C$^{+}$-N=N$^{-}$ & H$_2$C$^{-}$-N$\\equiv$N$^{+}$ & H$_2$C$^{-}$-N=N$^{+}$ <image_1>",
    "options": [
      "(I) > (II) > (IV) > (III)",
      "(I) > (III) > (II) > (IV)",
      "(II) > (I) > (III) > (IV)",
      "(III) > (I) > (IV) > (II)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_118": {
    "pid": "chem_118",
    "question": "Bombardment of aluminum by $\\alpha$-particle leads to its artificial disintegration in two ways, (i) and (ii) as shown. Products X, Y and Z respectively are, <image_1>",
    "options": [
      "proton, neutron, positron",
      "neutron, positron, proton",
      "proton, positron, neutron",
      "positron, proton, neutron"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_119": {
    "pid": "chem_119",
    "question": "The \\%yield of ammonia as a function of time in the reaction N_2(g) + 3H_2(g) \\rightleftharpoons 2NH_3(g), \\Delta H < 0 at (P, T_1) is given below. If this reaction is conducted at (P, T_2), with T_2 > T_1, the \\%yield of ammonia as a function of time is represented by <image_1> <image_2>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_120": {
    "pid": "chem_120",
    "question": "The correct order of acidity for the following compounds is <image_1>",
    "options": [
      "I > II > III > IV",
      "III > I > II > IV",
      "III > IV > II > I",
      "I > III > IV > II"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_121": {
    "pid": "chem_121",
    "question": "Cyclohexene on ozonolysis followed by reaction with zinc dust and water gives compound E. Compound E on further treatment with aqueous KOH yields compound F. Compound F is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_122": {
    "pid": "chem_122",
    "question": "A compound M_pX_q has cubic close packing (ccp) arrangement of X. Its unit cell structure is shown below. The empirical formula of the compound is <image_1>",
    "options": [
      "MX",
      "MX_2",
      "M_2X",
      "M_5X_{14}"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_123": {
    "pid": "chem_123",
    "question": "The correct structure of ethylenediaminetetraacetic acid (EDTA) is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_124": {
    "pid": "chem_124",
    "question": "The number of aldol reaction(s) that occurs in the given transformation is <image_1>",
    "options": [
      "1",
      "2",
      "3",
      "4"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Knowledge-based counting",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_125": {
    "pid": "chem_125",
    "question": "Among the following, the least stable resonance structure is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_126": {
    "pid": "chem_126",
    "question": "The qualitative sketches I, II and III given below show the variation of surface tension with molar concentration of three different aqueous solutions of KCl, CH$_3$OH and CH$_3$(CH$_2$)$_{11}$OSO$_3^-$Na$^+$ at room temperature. The correct assignment of the sketches is <image_1>",
    "options": [
      "I: KCl $\\quad$ II: CH$_3$OH $\\quad$ III: CH$_3$(CH$_2$)$_{11}$OSO$_3^-$Na$^+$",
      "I: CH$_3$(CH$_2$)$_{11}$OSO$_3^-$Na$^+$ $\\quad$ II: CH$_3$OH $\\quad$ III: KCl",
      "I: KCl $\\quad$ II: CH$_3$(CH$_2$)$_{11}$OSO$_3^-$Na$^+$ $\\quad$ III: CH$_3$OH",
      "I: CH$_3$OH $\\quad$ II: KCl $\\quad$ III: CH$_3$(CH$_2$)$_{11}$OSO$_3^-$Na$^+$"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_127": {
    "pid": "chem_127",
    "question": "Match each coordination compound in List-I with an appropriate pair of characteristics from List-II and select the correct answer using the code given below the lists. $\\{en = H_2NCH_2CH_2NH_2; atomic numbers: Ti = 22; Cr = 24; Co = 27; Pt = 78\\}$ <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_128": {
    "pid": "chem_128",
    "question": "In the following reactions, the major product W is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_129": {
    "pid": "chem_129",
    "question": "The major product U in the following reactions is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_130": {
    "pid": "chem_130",
    "question": "KI in acetone, undergoes S_N2 reaction with each of P, Q, R and S. The rates of the reaction vary as <image_1>",
    "options": [
      "P > Q > R > S",
      "S > P > R > Q",
      "P > R > Q > S",
      "R > P > S > Q"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_131": {
    "pid": "chem_131",
    "question": "Different possible thermal decomposition pathways for peroxyesters are shown below. Match each pathway from List I with an appropriate structure from List II and select the correct answer using the code given below the lists. <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_132": {
    "pid": "chem_132",
    "question": "The major product(s) of the following reaction is(are) <image_1>",
    "options": [
      "P",
      "Q",
      "R",
      "S"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_133": {
    "pid": "chem_133",
    "question": "One mole of a monoatomic real gas satisfies the equation $p(V-b)=RT$ where $b$ is a constant. The relationship of interatomic potential $V(r)$ and interatomic distance $r$ for the gas is given by <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_134": {
    "pid": "chem_134",
    "question": "Isomers of hexane, based on their branching, can be divided into three distinct classes as shown in the figure. The correct order of their boiling point is <image_1>",
    "options": [
      "I > II > III",
      "III > II > I",
      "II > III > I",
      "III > I > II"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_135": {
    "pid": "chem_135",
    "question": "The product(s) of the following reaction sequence is(are) <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_136": {
    "pid": "chem_136",
    "question": "The major product in the following reaction is: <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_137": {
    "pid": "chem_137",
    "question": "In the following reaction, the major product is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_138": {
    "pid": "chem_138",
    "question": "The compounds P, Q and S were separately subjected to nitration using HNO_3/H_2SO_4 mixture. The major product formed in each case respectively, is <image_1> <image_2>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_139": {
    "pid": "chem_139",
    "question": "In the reaction <image_1>, the structure of the Product T is: <image_2> <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_140": {
    "pid": "chem_140",
    "question": "AgNO_3 (aq.) was added to an aqueous KCl solution gradually and the conductivity of the solution was measured. The plot of conductance ($\\Lambda$) versus the volume of AgNO_3 is <image_1>",
    "options": [
      "(P)",
      "(Q)",
      "(R)",
      "(S)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_141": {
    "pid": "chem_141",
    "question": "In the reaction shown below, the major products) formed is/are <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_142": {
    "pid": "chem_142",
    "question": "In the following reactions, the product S is <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_143": {
    "pid": "chem_143",
    "question": "In the reaction <image_1> the products are <image_2>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_144": {
    "pid": "chem_144",
    "question": "Which of the following are examples of endothermic reactions? <image_1>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_145": {
    "pid": "chem_145",
    "question": "The major product of the following reaction is <image_1>",
    "options": [
      "a hemiacetal",
      "an acetal",
      "an ether",
      "an ester"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_146": {
    "pid": "chem_146",
    "question": "",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_147": {
    "pid": "chem_147",
    "question": "In the following reaction, <image_1> the structure of the major product 'X' is <image_2>",
    "options": [
      "A",
      "B",
      "C",
      "D"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "EXAMS-V",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_599": {
    "pid": "chem_599",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccccc1N=NC(c2ccccc2)C(C(=O)O[2])C()=NN",
      "c1ccccc1N=NC(c2ccccc2)C(C(=O)O[2*])C(*)=NN*",
      "C1=CC=C(C=C1)N2C=C(C(=O)OC)C3=C2N=C(N3)N",
      "c1ccccc1N=NC(c2ccccc2)C(C(=O)O[1])C()=NN"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_600": {
    "pid": "chem_600",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN1C(=O)NC(C=C2NCCO2)=C1NC3=CC(=O)N(C)C(=O)N3C(=S)C",
      "C1=C(N)N(C)C(=O)CN(C)C1=O.CN1CC(=O)N(C)C(=O)C(=CN2CCOCC2)C1=O",
      "*C1=C(N)N(C)C(=O)CN(C)C1=O.CN1CC(=O)N(C)C(=O)C(=CN2CCOCC2)C1=N",
      "C1=C(N)N(C)C(=O)CN(C)C1=O.CN1CC(=O)N(C)C(=O)C(=CN2CCOCC2)C1N"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_601": {
    "pid": "chem_601",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[B]c1ccccc1.C=C[Sn].Nc1nc(Cl)c(Br)nc1Cl.[Zn]Cc1ccccc1",
      "[B]c1ccccc1.C=C[Sn].Nc1nc(Br)c(Cl)nc1Br.[Zn]Cc1ccccc1",
      "c1cc(c(nc1)N)C(Br)=C(Cl)C=C",
      "[B]c1ccccc1.C=C[Sn].Nc1nc(Cl)c(Br)nc1Br.[Zn]Cc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_602": {
    "pid": "chem_602",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1(O)CC=NC(=O)N1.c1ncnc[nH]1",
      "*C1(O)CC=NC(=O)N1.*c1cnc[nH]1",
      "C1=NC2=C(N1)C(=O)NC(N2)(O)R",
      "C1(O)CC=NC(=O)N1.c1ccnc[nH]1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_603": {
    "pid": "chem_603",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(C)C1CCC2(C)CC=C(C)CCC=C(C)CCC12",
      "C1C(C)CCC2(C)C=C(C)CCC=C(C)CCC12",
      "C[C@H](Ph)C(=O)OC",
      "C(C)C1CC2C(C)CCC=C(C)CCC=C(C)C1C2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_604": {
    "pid": "chem_604",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=OCC(=O)C(C)C(=O)O",
      "C=[O+]CC(=O)C(C)C(=O)O",
      "*C=[O+]CC(=O)C(*)C(=O)O*",
      "C=C(C=O)C(=O)OC[Ru](Por)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_605": {
    "pid": "chem_605",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)[N+]1=CC=CC=C1.C=C(O)OC(=O)C",
      "CC(=O)[N+]1=CC=CC=C1.C=C([O-])C(=O)OC",
      "C(=O)C[n+]1ccccc1.C=",
      "C(=O)OC",
      "CC(=O)[N+]1=CC=CC=C1.C=C([O-])OC(=O)C"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_606": {
    "pid": "chem_606",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=C(C[C@H](C[C@H]1O)O)N=C=S",
      "C=C1[C@H](N=C=S)C=C[C@H](O)[C@H]1O",
      "C=C1[C@H](N=C=S)C=C[C@@H](O)[C@H]1O",
      "C=C1[C@@H](N=C=S)C=C[C@@H](O)[C@@H]1O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_607": {
    "pid": "chem_607",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)OC(=O)C[N+](=O)[O-]",
      "[H]C(=O)C([H])COc1ccc([N+](=O)[O-])cc1",
      "[H]C(=O)C([H])(O)COc1ccc([N+](=O)[O-])cc1",
      "[H]C(=O)C([H])COc1ccc([N+](O)[O-])cc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_608": {
    "pid": "chem_608",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COOC",
      "COCO.C(Cl)=[O+][Zn+2]",
      "CO",
      "C(Cl)=[O+][Zn+2]",
      "COCO",
      "C(Cl)=[O+][Zn+2]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_609": {
    "pid": "chem_609",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC1=CC=CC=C1OC2=CC=CC=C2C=C(CO)C(=O)OC",
      "COC(=O)Cc1ccc(OCc2ccccc2[Pd]Br)c(C#CCCO)c1",
      "COC(=O)Cc1ccc(OCCc2ccccc2[Pd]Br)c(C#CCO)c1",
      "COC(=O)Cc1ccc(OCc2ccccc2[Pd]Cl)c(C#CCCO)c1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_610": {
    "pid": "chem_610",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C)NO",
      "CC(C)N(O)",
      "CC(C)N=O",
      "CC(C)N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_611": {
    "pid": "chem_611",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[Zn]1OC(=O)CC(OCC)O1",
      "[Zn]1OC(=O)CC(OC)CO1",
      "[Zn]1OC(=O)CC(O)CO1",
      "CCOC(=O)C=C(C)[O-].[Zn]X"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_612": {
    "pid": "chem_612",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC(O)[C@@H](OC(*)=O)C(*)N",
      "N[C@@H](C(*)OC(*)=O)C(=O)O*",
      "C1(C(NC(C1)C(=O)OC)Ph)C(=O)OPh",
      "OC(=O)[C@H](N)C(*)OC(*)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_613": {
    "pid": "chem_613",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OCC=O.C1=COCC1",
      "OCC=O.C1COC=C1",
      "OCC=O.C1=COC=C1",
      "C1CC(=O)OC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_614": {
    "pid": "chem_614",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OCC(O)C1C=OCC1",
      "*OCC(O)C1C=[O+]CC1",
      "OCC(O)C1C=[O]CC1",
      "`C1COC=C1[O+]`"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_615": {
    "pid": "chem_615",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[C@H](Ph)C(=O)OC",
      "*C(c1ccccc1)[C@H](OC(=O)c1ccccc1)C(=O)O",
      "*O[C@H](C(=O)OC)[C@H](N)c1ccccc1",
      "C(c1ccccc1)[C@H](OC(=O)c1ccccc1)C(=O)O.C[C@@H](C(=O)OC)[C@H](N)c1ccccc1",
      "C(c1ccccc1)[C@@H](OC(=O)c1ccccc1)C(=O)O",
      "O[C@H](C(=O)OC)[C@@H](N)c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_616": {
    "pid": "chem_616",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`O=C(C)C`",
      "CC(C)=O.B",
      "*CC(*)=O.[B]",
      "C[C](C)=O.[B]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_617": {
    "pid": "chem_617",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=C()[O-].C()=O",
      "/C=C(\\)[O-].C()()=O",
      "`CC(=O)C(=C[O-])OC`",
      "*/C=C(/*)[O-].*C(*)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_618": {
    "pid": "chem_618",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C2=CC=C(C=C2)OC[O-]",
      "OOC(/C=C(\\[O-])c1ccccc1O)c1ccccc1",
      "OOC(/C=C(\\[O-])c1ccc(O)cc1)c1ccccc1",
      "OOC(/C=C(\\[O-])c1ccccc1)c1ccc(O)cc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_619": {
    "pid": "chem_619",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(c1ccccc1)C1OC1c1ccccc1O",
      "O=C(c1ccccc1O)C1OC1c1ccccc1",
      "C1=CC=C2C(=C1)C(=O)OC2[C@@H]1OC[C@H]1C3=CC=CC=C3",
      "O=C(c1ccc(O)cc1)C1OC1c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_620": {
    "pid": "chem_620",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-]C(*)(Cl)C[N+]#N",
      "[R]C[N+](=O)[O-].[Cl-]",
      "[O-]C(Cl)(C)C[N+]#N",
      "[O-]C(C)(Cl)C[N+]#N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_621": {
    "pid": "chem_621",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C)(C)=O",
      "*C(C)=O",
      "O=C1CC1",
      "CC(C)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_622": {
    "pid": "chem_622",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(OOC(=O)c1ccccc1Cl)C1CCCCC1",
      "CC(O)(OOC(=O)c1cc(Cl)ccc1)C1CCCCC1",
      "CC(O)(OOC(=O)c1cccc(Cl)c1)C1CCCCC1",
      "O=C(OC1CCCCC1)Oc1ccccc1Cl"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_623": {
    "pid": "chem_623",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(=O)C3C(O3)([O-])C2C4=CC=CC=C4",
      "O=C1C([O-])(c2ccccc2)Oc2ccccc21",
      "O=C1CC([O-])(c2ccccc2)Oc2ccccc21",
      "O=C1CC([O-])(Oc2ccccc2)c2ccccc21"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_624": {
    "pid": "chem_624",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccccc1N(OC=C)O[Mg]Cl",
      "*c1ccccc1N(OC=C)O[Mg]Br",
      "`C1=CC=C(C=C1)N1C=CO1[Mg]Br`",
      "c1ccccc1N(O[Mg]Br)OC=C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_625": {
    "pid": "chem_625",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C)(C#N)N=NCC(C)(C)C#N",
      "CC(C)(C#N)NN=CC(C)(C)C#N",
      "CC(C)(C#N)N=NC(C)(C)C#N",
      "N#CC(C)(C)N=NC(C)(C)C#N"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_626": {
    "pid": "chem_626",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OCC(=O)[C@H]1CC[C@@]2(C)C3CCC4=CC(=O)CC[C@]4(C)C3[C@@H](O)C[C@@]12",
      "ON=Cl",
      "`CC(=O)O[C@H]1CC[C@@]2([C@H]3CC[C@]4([C@H]2[C@H]1O)CC=C5C(=O)CC[C@]45C)Cl[N+](=O)[O-]`",
      "CC(=O)OCC(=O)[C@H]1CC[C@@]2(C)C3CCC4=CC(=O)CC[C@]4(C)C3[C@@H](O)C[C@]12",
      "O=NCl",
      "CC(=O)OCC(=O)[C@@H]1CC[C@]2(C)C3CCC4=CC(=O)CC[C@@]4(C)C3[C@H](O)C[C@]12",
      "O=NCl"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_627": {
    "pid": "chem_627",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C)OCO",
      "COC(C[N+]([O-])C)OC",
      "COCN(C)O",
      "CNC(OC)OC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_628": {
    "pid": "chem_628",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "Cc1ccccc1[N+](=O)[O-].[O-]C",
      "Cc1ccccc1[N+](=O)O.[O-]C",
      "C1=CC=C(C=C1)C[N+](=O)[O-].[O-]C",
      "Cc1ccccc1[N+](O)[O-].[O-]C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_629": {
    "pid": "chem_629",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C)C1Cc2ccccc2N1",
      "CN(C)C1Cc2ccccn2C1",
      "CN(C)C1Cc2ccccc2C1N",
      "CN(C)C1CN2C=CC=CC2C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_630": {
    "pid": "chem_630",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC([O-])=C(C[N+]12CCN(CC1)C2)C(O)c1ccccc1",
      "C1CN2CC[C@H]1C[C@@H](C2)OC(=O)C3=CC=CC=C3",
      "CC([O-])=C(C[N+]12CCN(CC1)CC2)C(O)c1ccccc1",
      "CC([O-])=C(C[N+]12CCN(CC1)CC2)C(O)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_631": {
    "pid": "chem_631",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=N[OH2+]",
      "C()=N[OH+]",
      "C()=N[O+]",
      "R1C(=O)NR2.O[H2+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_632": {
    "pid": "chem_632",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[ClP](Cl)(Cl)(Cl)[O-][N]=C(R1)R2",
      "C()=NO.ClP(Cl)(Cl)(Cl)Cl",
      "C()=NO.ClP(=Cl)(Cl)Cl",
      "*C(*)=NO.ClP(Cl)(Cl)(Cl)Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_633": {
    "pid": "chem_633",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=NOP(Cl)(Cl)(Cl)",
      "*C(*)=NOP(Cl)(Cl)Cl",
      "[Cl-].O=P(Cl)(Cl)Cl.[R2]C=[N+](R)",
      "*C(*)=NOP(Cl)(Cl)(Cl)Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_634": {
    "pid": "chem_634",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[C+]=N*",
      "*[N+]=C*",
      "[R1]N=C[R2]^+",
      "*[C-]=N*"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_635": {
    "pid": "chem_635",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C#N.O",
      "[R1][N+]=[C]([R2])O",
      "*C#[N+]*.O",
      "C#[N]O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_636": {
    "pid": "chem_636",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R2]C=[N+][R1]",
      "*C#[N+]*",
      "C#N+[R]",
      "C#N"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_637": {
    "pid": "chem_637",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(c1ccccc1)C(=O)c2ccccc2.O",
      "O=C(c1ccccc1)C(=O)(c2ccccc2).[OH-]",
      "O=C(OOC(=O)c1ccccc1)c2ccccc2",
      "O=C(c1ccccc1)C(c2ccccc2)=O.O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_638": {
    "pid": "chem_638",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C)(C(=O)O)NCC1C2C(NC1=O)C3=C(C=CC=C3)C=C2OC(=O)OC",
      "COC(=O)[C@]1([O-])C[C@@H]2C(O)Nc3ccccc3[C@@]21CCN(C(=O)OC(C)(C)C)C(=O)OC(C)(C)C",
      "COC(=O)[C@@]1([O-])C[C@H]2C(O)Nc3ccccc3[C@]21CCN(C(=O)OC(C)(C)C)C(=O)OC(C)(C)C",
      "COC(=O)[C@@]1([O-])C[C@@H]2C(O)Nc3ccccc3[C@@]21CCN(C(=O)OC(C)(C)C)C(=O)OC(C)(C)C"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_639": {
    "pid": "chem_639",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N#CC([O-])(c1ccccc2)C(O)(c2ccccc1)",
      "N#CC(O)(c1ccccc1)C([O-])(c2ccccc2)",
      "N#CC([O-])(c1ccccc1)C(O)(c2ccccc2)",
      "[O-]C(C#N)(C1=CC=CC=C1)(C2=CC=CC=C2)C3=CC=CC=C3"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_640": {
    "pid": "chem_640",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=S1C=CC=C(C=C1)C",
      "C#C\\C=C/C#C",
      "C#CC=CC#C",
      "C#C/C=C\\C#C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_641": {
    "pid": "chem_641",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CCC=C1.c1ccccc1",
      "c1ccc(cc1)[c]2cccc2",
      "C1=CC=CCC1.c1ccccc1",
      "C1=CCC=CC1.c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_642": {
    "pid": "chem_642",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)/C=C(/C)O.O[H+]=Cc1ccccc1",
      "CCOC(=O)C=C(C)O.[OH+]=Cc1ccccc1",
      "CCOC(=O)C=C(O)C1=CC=CC=C1[O+]",
      "CCOC(=O)/C=C(/C)O.[OH+]=Cc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_643": {
    "pid": "chem_643",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)C([O+])O",
      "CCOC(=O)CC(C)=O",
      "CCOC(=O)CC(C)=[OH+]",
      "CCOC(=O)C=C(C)O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_644": {
    "pid": "chem_644",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C1C(c2ccccc2)NC(=O)NC1(C)O",
      "CCOC(=O)C1C(c2ccccc2)NC(=O)NC1(C)[OH]",
      "CCOC(=O)C1C(c2ccccc2)NC(=O)NC1(C)[OH2+]",
      "CCOC(=O)C(C(=O)O)(C[NH2+]C(=O)N)O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_645": {
    "pid": "chem_645",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O.COC1=C[CH-]C=CC1O",
      "*O.COC1=C[CH-]C=CC1",
      "COC1=CC=C(C=C1)[O-]",
      "O.COC1=CC=C[CH-]C1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_646": {
    "pid": "chem_646",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "Nc1ccccc1.O=C(CBr)c1ccccc1",
      "Nc1ccccc1.O=C(CBr)c1ccccn1",
      "C1=CC=C(C=C1)C(=O)C(C2=CC=CC=C2)N",
      "Nc1ccccc1.O=C(CCl)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_647": {
    "pid": "chem_647",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C(=O)N(C2=CC=CC=C2)[H+]",
      "O=C(CNc1ccccc1)c1ccccc1.[H+]",
      "O=C(CNc1ccccn1)c1ccccc1",
      "O=C(CN(c1ccccc1))c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_648": {
    "pid": "chem_648",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)NCc1ccccc1.O=P(Cl)(Cl)Cl",
      "C(=O)NCCc1ccccc1.OP(Cl)(Cl)Cl",
      "*C(=O)NCCc1ccccc1.O=P(Cl)(Cl)Cl",
      "C1=CC=C(C=C1)CC(N)C(=O)OP(=O)(Cl)Cl"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_649": {
    "pid": "chem_649",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=[N+]C=C2C1)[R]C(Cl)(Cl)OP(O)Cl",
      "*C1(OP(=O)(Cl)Cl)NCC[C+]2C=CC=CC21.[Cl-]",
      "C1(OP(=O)(Cl)Cl)NCCC2C=CC=CC1=[C+]2.[Cl-]",
      "C1(OP(=O)(Cl)Cl)NCC[C+]2C=CC=CC12.[Cl-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_650": {
    "pid": "chem_650",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[BrZn][C](R\u00b9)(C(=O)OR\u00b2)C#NR",
      "*C#N.*OC(=O)C(*)[Zn]Br",
      "C#N.OC(=O)C([Zn])Br",
      "C#N.OC(=O)[C]([Zn])Br"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_651": {
    "pid": "chem_651",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC(=O)C(*)C(*)(N)O.[OH3+]",
      "`OC(=O)C()C(N)()O.[OH2+]`",
      "`OC(=O)C(C)(N)C(O)O.[OH3+]`",
      "N[C@@H](C(R1)C(=O)O[R2])R"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_652": {
    "pid": "chem_652",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[C@@H](O)[C@@H](C)N[N-]N[P+](c1ccccc1)(c1ccccc1)c1ccccc1",
      "[R1][C@H](O)[R2]N=[N+]=[N-]P(C1=CC=CC=C1)(C1=CC=CC=C1)C1=CC=CC=C1",
      "C[C@@H](O)[C@H](C)N=N[N-][P+](c1ccccc1)(c1ccccc1)c1ccccc1",
      "C[C@H](O)[C@@H](C)N=N[N-][P+](c1ccccc1)(c1ccccc1)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_653": {
    "pid": "chem_653",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=C(N2CCCC2)C2CCC1C2.c1cnncn1",
      "C1=CC(N2CCCC2)C2CCC1C2.c1nncn1",
      "C1=C(N2CCCC2)C2CC1C2.c1ncnn1",
      "C1CN2C3=NC=NC=C3N=C2C=C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_654": {
    "pid": "chem_654",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "B1C2C3CCN2C4CCCC4C3=NC1",
      "C1=CC2C3CCC(C3)C2(N2CCCC2)C=N1.B",
      "[B].C1=CC2C3CCC(C3)C2(N2CCCN2)C=N1",
      "[B].C1=CC2C3CCC(C3)C2(N2CCCC2)C=N1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_655": {
    "pid": "chem_655",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(OC1CCCCC1)Oc1ccccc1Cl",
      "C(=O)N()",
      "C(N)()=O",
      "*C(*)=O.*N*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_656": {
    "pid": "chem_656",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc(NN=C2CCCCC2)cc1",
      "[H+].c1ccc(NN=C2CCCCC2)cc1",
      "[C+]1=CC=CC=CC1N2C=CC=CC2",
      "[H+].c1ccc(N=C2NNCCC2)cc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_657": {
    "pid": "chem_657",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC(NN=C2C=CC=CC2)CCCC1",
      "C1=C(NN=C2C=CC=CC2)CCCCC1",
      "C1=C(NNc2ccccc2)CCCC1",
      "c1ccc2c(c1)CCN2C3=CC=CC=C3N"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_658": {
    "pid": "chem_658",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R][Al-](R)R.C=C[C](R)=O",
      "C#C[C@@H]()O[AlH]()",
      "*C#C[C@@H](*)O[AlH-](*)*",
      "C#C[C@H]()O[AlH-]()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_659": {
    "pid": "chem_659",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CN2CCC1C2C3=CC=CC=C3[NH3+]",
      "N=C1C=CC=CC1C1CCCCC1N",
      "N=C1C=CC=CC1C1CCCCC1=[NH2+]",
      "N=C1C=CC=CC1C1CCCCC1=[NH+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_660": {
    "pid": "chem_660",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-][C@H]1N=C2C=[N+]3C1=C2N(=C3)C4=CC=CC=C4",
      "[H+].[O-]/C(=N/C1=N[NH+]2c3cccc(c3)CC2C1)c1cnccc1",
      "[H+].[O-]/C(=N/C1=N[NH+]2c3ccccc3CC2C1)c1ccccc1",
      "[H+].[O-]/C(=N/C1=N[NH+]2c3ccccc3CC2C1)c1ccncc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_661": {
    "pid": "chem_661",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C)C=[O-]",
      "*[*-].CN(C)C=O",
      "C[N+](C)C=O",
      "O=CN(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_662": {
    "pid": "chem_662",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C([O-])OC",
      "CCO",
      "C([O-])OC",
      "COE",
      "[O-]CC",
      "C([O-])OC",
      "CCOC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_663": {
    "pid": "chem_663",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)CC(N)C(=O)OP(=O)(Cl)Cl",
      "*C(=[OH+])c1ccccc1Cc1ccccc1",
      "C(=[O])c1ccccc1Cc1ccccc1",
      "C(=[OH+])c1ccccc1Cc1ccccc1O*"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_664": {
    "pid": "chem_664",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1([OH2+])c2ccccc2Cc2ccccc21",
      "C1=CC=C2C(=C1)C(CC2)(R)O[H+]",
      "C1([OH2+])c2ccccc2Cc3ccccc31",
      "C1([OH+])c2ccccc2Cc3ccccc31"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_665": {
    "pid": "chem_665",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[Si]C(*)O(*)",
      "*[Si]C(*)(*)O",
      "[O-][C](R1)(R2)[Si](R3)",
      "*[Si](C)(*)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_666": {
    "pid": "chem_666",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[-].[Si](C)(O)C()",
      "[-].[Si]C(C)(O)()",
      "[*-].*[Si]C(*)(*)O",
      "[R][O-][C](R1)(R2)[Si](R3)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_667": {
    "pid": "chem_667",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O.c1ccc([C-](O[Si](c2ccccc2)(c2ccccc2)c2ccccc2)c2ccccc2)cc1",
      "[O-][C](Ph)(Ph)Ph.[Si](Ph)(Ph)Ph",
      "O.c1ccc([C-](O[Si](c2ccccc2)(c2ccccc2)c2ccccc2)c2ccccc2)cc1",
      "O.c1ccc([C-](O[Si](c2ccccc2)c2ccccc2)c2ccccc2)cc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_668": {
    "pid": "chem_668",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCB().[O-]O[O-]",
      "*CCB(*)*.[O-]O",
      "[R][CH][B](R)(R)O[O-]",
      "CCB().[O-]O[H]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_669": {
    "pid": "chem_669",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC[B-]()(O)OO",
      "*CC[B-](*)(*)OO",
      "C[B-](OC1CO1)O",
      "CC[B-]()()O[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_670": {
    "pid": "chem_670",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(C=C(C2)OS(=O)(=O)O)N=NC1=CC=CC=C1",
      "NNc1ccccc1.O=C1Cc2ccccc2C(OS(=O)O)C1.[H+]",
      "NNc1ccccc1.O=C1Cc2ccccc2C(OS(=O)O)C1",
      "NNc1ccccc1.O=C1Cc2ccccc2C(OS(=O)OH)C1.[H+]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_671": {
    "pid": "chem_671",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(CCC2OS(=O)(=O)O)ONN(c3ccccc3)",
      "O=S(O)OC1CC(O)(NNc2ccccc2)Cc2ccccc1.[H+]",
      "O=S(O)OC1CC(O)(NNc2ccccc2)Cc2ccccc21.[H+]",
      "O=S(O)(O)C1CC(O)(NNc2ccccc2)Cc2ccccc21"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_672": {
    "pid": "chem_672",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`",
      "O=S(O)OC1CC(NNc2ccccn2)=Cc2ccccc21`",
      "[B].O=S(O)OC1CC(NNc2ccccc2)=Cc2ccccc21",
      "B(c1ccc2c(c1)cccc2)NN(c3ccccc3)OS(=O)(=O)",
      "`",
      "O=S(O)OC1CC(NNc2ccccc2)=Cc2ccccn1`"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_673": {
    "pid": "chem_673",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc(NNc2cccc3ccccc23)cc1",
      "c1cc(NNc2ccc3ccccc3c2)ccc1",
      "c1ccc(NNc2ccc3ccccc3c2)cc1",
      "c1ccc2c(c1)ccc3c2[nH]c3"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_674": {
    "pid": "chem_674",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N=[C+]1c2ccccc2Cc3c1cccc3",
      "N=C1C=Cc2ccccc2C1C1C=CC=CC1=[NH2+]",
      "N=C1C=Cc2ccccc2C1C1=CC=CC=C1N",
      "N=C1C=Cc2ccccc2C1=C1C=CC=CC1N"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_675": {
    "pid": "chem_675",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "NC12C=CC=CC1c1c(ccc3ccccc13)N2H",
      "c1ccc2c(c1)cccc2C3=NCCN3",
      "NC12C=CC=CC1c1c(ccc3ccccc13)N2.[H+]",
      "N1C2C=CC=CC1c1c(ccc3ccccc13)N2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_676": {
    "pid": "chem_676",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(=O)C(=C2OS(=O)(=O)[NH4])O",
      "N.NOS(=O)OC1CC(O)Cc2ccccc21",
      "N.NOS(=O)OC1=C(C)Cc2ccccc21",
      "N.NOS(=O)OC1CC(=O)Cc2ccccc21"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_677": {
    "pid": "chem_677",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C=C(C=C2[NH3+])OS(=O)(=O)[NH4+]",
      "NOS(=O)OC1CC(=[NH2+])C2=CCCCC12",
      "NOS(=O)OC1CC(=[NH2+])Cc2ccccc21",
      "NOS(=O)OC1CCC(=[NH2+])c2ccccc21"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_678": {
    "pid": "chem_678",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=O.N",
      "C()=O.NC",
      "C()=O.NH",
      "C(=O)NR"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_679": {
    "pid": "chem_679",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C)(N#C)NC(=O)O",
      "C(C#N)N(C)C(=O)O",
      "N=C(N)C(=O)O assuming R\u00b9 and R\u00b2 are hydrogen",
      "*C(*)(C#N)NC(=O)O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_680": {
    "pid": "chem_680",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C(=O)NC2CC1C(=O)O2 (assuming simple alkyl groups for R1 and R2)",
      "C1()NC(=O)OC1=O",
      "*C1(*)NC(=O)OC1=N",
      "C1()NC(=O)OC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_681": {
    "pid": "chem_681",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(N=C=O)(C(=O)O)N",
      "O=C(O[R])[N](R1)R2",
      "C(C(=O)N)N=C=O.O",
      "*C(*)(N=C=O)C(N)=O.*O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_682": {
    "pid": "chem_682",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C=[Rh].c1ccccc1",
      "COC(=O)C#Rh.c1ccccc1",
      "c1ccccc1C(=C\\[Rh\\])C(=O)OC",
      "COC(=O)C[Rh].c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_683": {
    "pid": "chem_683",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)c1ccccc1",
      "COC(=O)C1C2C=CC=CC21",
      "COC(=O)C1C2=CC=CC=C12",
      "COC1=CC2C=CC=CC2C1=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_684": {
    "pid": "chem_684",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C1=CC2(c3ccccc3)C3=CC=CC=C32C1",
      "CCOC(=O)C1=CC2(c3ccccc3)C3C=CC=C2C3C1",
      "CCOC(=O)C1=CC2(c3ccccc3)C3C=CC=CC32C1",
      "C1=CC=C(C=C1)C2C3CCC(C2C=C3)C(=O)OCC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_685": {
    "pid": "chem_685",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CO.O=C=NS(=O)(O)Cl",
      "CO.O=C=NS(=O)(=O)Cl",
      "CO.O=C=N=S(=O)(=O)Cl",
      "ClN=O.CO"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_686": {
    "pid": "chem_686",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCN(CC)C",
      "CCN(CC)C",
      "COC(=O)NS(=O)(=O)Cl",
      "COC(=O)N(S(=O)(=O)Cl)N",
      "CCN(CC)C",
      "CCN(CC)C",
      "CO[C](=O)NS(=O)(=O)Cl",
      "CCN(CC)C",
      "CCN(CC)C",
      "COC(=O)N[S](=O)(=O)Cl"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_687": {
    "pid": "chem_687",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[C@H](c1ccccc1)[C@@H](O)c1ccccc1.CC[N+](CC)(CC)S(=O)(=O)[N-]C(=O)OC",
      "C[N+](C)(C)S(=O)(=O)[N-]C(=O)OC[C@H](O)[C@H](Ph)Ph",
      "*[C@@H](c1ccccc1)[C@H](O)c1ccccc1.CC[N+](CC)(CC)S(=O)(=O)[N-]C(=O)OC",
      "*[C@H](c1ccccc1)[C@H](O)c1ccccc1.CC[N+](CC)(CC)S(=O)(=O)[N-]C(=O)OC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_688": {
    "pid": "chem_688",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[C@@H](c1ccccc1)[C@H](OS(=O)(=O)[N-]C(=O)OC)c1ccccc1",
      "*[C@@H](c1ccccc1)[C@H](OS(=O)(=O)[N-]C(=O)OC)c1ccccc1",
      "C1C(C2=CC=CC=C2)C(C3=CC=CC=C3)[C@@H](D)N(S(=O)(=O)[O-])C(=O)OC",
      "*[C@H](c1ccccc1)[C@@H](OS(=O)(=O)[N-]C(=O)OC)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_689": {
    "pid": "chem_689",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C=C([O-])c1ccccc1NC(=O)C*",
      "C=C([O-])c1ccccc1NC(=O)C=C",
      "C=C([O-])c1ccccc1N=C(O)C",
      "C1=CC=C2C(=C1)C(=O)N=C2[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_690": {
    "pid": "chem_690",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "/C=C(\\O)Nc1ccccc1C(=O)C",
      "/C=C(\\[O-])Nc1ccccc1C(=O)C",
      "*/C=C(\\[O-])Nc1ccccc1C(=O)C*",
      "c1ccccc1C(=O)N=C[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_691": {
    "pid": "chem_691",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C([O-])=O",
      "C(C=O)O",
      "*C([O-])O.*C=O",
      "RCH(OH)OR"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_692": {
    "pid": "chem_692",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)O",
      "C[O-]",
      "*C(=O)O.*C[O-]",
      "C(=O)O.CCO",
      "[O-]C(=O)R.[O-]R"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_693": {
    "pid": "chem_693",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C=C/O/C(O)=C/C(C)=O",
      "C=CCO/C(O)=C/C(C)=O",
      "CC(=O)OC1=CC=CC=C1C(=O)O",
      "C=CCO/C(O)=C\\C(C)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_694": {
    "pid": "chem_694",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=CCC(C(O)=C)C(=O)O",
      "C(C(=O)O)C(C=O)O",
      "C=CCC(C(C)=O)C(=O)O",
      "C=CC(C(C)=O)C(=O)O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_695": {
    "pid": "chem_695",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1=CC(=O)C2C=CC=CC2C=N1.CCO",
      "CCOC(=O)C1=CC=NC2=CC=CC=C12",
      "CC1=CC(=O)C2C=CC=CC2=N1.CCO",
      "CC1=CC(=O)C2C=CC=CN2=N1.CCO"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_696": {
    "pid": "chem_696",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC1(O)C=C(C)N=C2C=CC=CC21",
      "CCOC1(O)C=C(C)N=C2C=CC=CC12",
      "CCn1cc2ccc(OCC)c(O)c2c1",
      "CCOC1(O)C=C(C)NC2C=CC=CC21"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_697": {
    "pid": "chem_697",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(O)=CC(C)=N/c1ccccc1",
      "c1cc(ccc1O)c2cnc(C)cc2OCC",
      "CCO/C(O)=C/C(C)=Nc1ccccc1",
      "CCO/C(O)=CC(C)=N/c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_698": {
    "pid": "chem_698",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC2=C(C=CC=C2)C(*)([OH2+])N1",
      "*C1=CC(*)([OH2+])C2C=CC=CC2=N1",
      "C1=CC2=C(C=CC=N2)C(*)([OH2+])C1",
      "C1CN2CCC1C2[N+]O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_699": {
    "pid": "chem_699",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc(C2=[N+](c3ccccc3)C3(C[CH-]CCC3)O2)cc1",
      "c1ccc(C2=[N+](c3ccccc3)C3(O2)C[CH-]CCC3)cc1",
      "[O-]c1ccccc1[N+](C=O)(c2ccccc2)c3ccccc3",
      "c1ccc(C2=[N+](c3ccccc3)C3(C[CH-]CCCO2)C3)cc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_700": {
    "pid": "chem_700",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc(/N=C(\\Oc2ccccc2)c2ccccn2)cc1",
      "c1ccc(/N=C(/Oc2ccccc2)c2ccccc2)cc1",
      "c1ccc(/N=C(/Oc2ccccn2)c2ccccc2)cc1",
      "c1ccc(cc1)N=[N+]=[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_701": {
    "pid": "chem_701",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CC(N)O.N",
      "CC(O)N.N",
      "CC(N)O.O",
      "based on the specific structure of the molecule shown"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_702": {
    "pid": "chem_702",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CC=O.N",
      "CC=O.NH",
      "R[C@H](C=O)C=N",
      "C=",
      "O.N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_703": {
    "pid": "chem_703",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R]C(=C[R])[C](=O)[O-]",
      "*/C=C/[O-].*CC=O",
      "/C=C/[O-].C=C=O",
      "/C=C\\[O-].CC=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_704": {
    "pid": "chem_704",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CC(O)C(*)C=O",
      "C1CC(=O)OC1",
      "CC(O)C(C)C=O",
      "CC(C)OC()C=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_705": {
    "pid": "chem_705",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C=C(\\)C=O.CC#N",
      "C1CC(=O)N(C1)C=C",
      "C\\C=C(/C)C=O.CC=N",
      "*C/C=C(\\*)C=O.*CC=N"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_706": {
    "pid": "chem_706",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C/C=N\\C(C*)/C(*)=C/[O-]",
      "C/C=N\\C(C)/C()=C/[OH]",
      "C1=CC(=NO1)(C)C",
      "C/C=N\\C(C)/C()=C/[O]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_707": {
    "pid": "chem_707",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R]C(=O)C([R])([R])N([H])[H]C=C[R]",
      "/C=C/NC(C)C(C)C(C)=O.[NH4+]",
      "/C=C/NC(C)C()C(C)=O.[NH4+]",
      "*/C=C/NC(C*)C(*)C(C)=O.[NH4+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_708": {
    "pid": "chem_708",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CCN2C1C(C(C2)O)R",
      "*CC1N=CC(*)C(O)C1*",
      "CC1N=CC()C(C)C1",
      "CC1N=CC(C)C(O)C1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_709": {
    "pid": "chem_709",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(\\Cc1ccccc1)=C(\\C=C(\\C=N\\Cc1ccccc1)c1ccccc1)c1ccccc1",
      "C(\\Cc1ccccc1)=C(/C=C(\\C=N\\Cc1ccccc1)c1ccccc1)c1ccccc1",
      "c1cc(Cc2ccc([nH]c2)C2=CC=CC=C2)ccc1",
      "C(\\Cc1ccccc1)=C(/C=C(\\C=N\\Cc1ccccc1)c1ccccc1)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_710": {
    "pid": "chem_710",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)SC",
      "*CCOC(=S)SC",
      "C1OSC1=S",
      "CCOC(=S)OC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_711": {
    "pid": "chem_711",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CSC(=O)S",
      "O=C(S)S",
      "CS(=O)SC",
      "C(S)C(=O)S"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_712": {
    "pid": "chem_712",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "ClC(Cl)Cl",
      "Cl[C-](Cl)Cl",
      "ClC(Cl)Cl",
      "[Cl-]C(Cl)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_713": {
    "pid": "chem_713",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "ClC",
      "c1cc[nH]c1",
      "C1=CC(=CN1)CCl2",
      "ClCCl.c1ccc[nH]1",
      "ClCCl.c1cc[nH]c1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_714": {
    "pid": "chem_714",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "R[C@H](B)C(=O)OR",
      "*CC(=O)O*.[B]",
      "CC(=O)OC",
      "CC(=O)CO"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_715": {
    "pid": "chem_715",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/C=C(\\[O-])O*.*OC(*)=O",
      "/C=C(\\[O-])O.OC(=O)",
      "/C=C(\\O)O.OC()=O",
      "R1OC(=O)C(OC)C=C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_716": {
    "pid": "chem_716",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(R)(OC[R\u00b2])C([O-])(C=O)OR\u00b9",
      "*OC(=O)C(*)C(*)(O)O*",
      "*OC(=O)C(*)C(*)([O-])O*",
      "*OC(=O)C(C)([O-])C(*)O*"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_717": {
    "pid": "chem_717",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC([O-])(NO)C(*)C(*)=O",
      "OC([O-])(NO)C()C(=O)",
      "C(C(=O)[R1])C([O-][R])N[OH]",
      "OC([O-])(ON)C()C()=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_718": {
    "pid": "chem_718",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "R1C(=O)C(R2)OC(=O)R",
      "*OC(=O)C(*)C(*)=O.NO",
      "OC(=O)C()C(=O).ON",
      "OC(=O)C()C(=O)O.NHO"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_719": {
    "pid": "chem_719",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC(=O)C()C()ON(O)",
      "*OC(=O)C(*)C(*)(O)NO",
      "O=COC(C(C=NO)O)R",
      "OC(=O)C()C()O(N)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_720": {
    "pid": "chem_720",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC1(ON=*)OC1*",
      "*OC1(O)ON=C(*)C1*",
      "N(=O)C(CO)C(=O)OR",
      "*OC1(O)NC(=O)*C1*"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_721": {
    "pid": "chem_721",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*c1cc(*)ccc1OCC=C",
      "c1cc2ccc(oc2c1)C=C",
      "*c1ccc(OCC=C)cc1",
      "*c1cccc(*)c1OCC=C"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_722": {
    "pid": "chem_722",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1=CC(CC=C)C=C(*)C1=O",
      "C1=CC2C(=O)C=CC2C1 for the core bicyclic enone structure, assuming R groups are unspecified",
      "C1=CC(C=C)C=CC()C1=O",
      "C1=CC(C=C)CC()C1=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_723": {
    "pid": "chem_723",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=CC(C)c1ccccc1O",
      "CCc1oc2ccccc2c1",
      "C=CC(CC)c1ccccc1",
      "C=CC(CC)c1ccccc1O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_724": {
    "pid": "chem_724",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1(C2CCC1(C(=O)C2)C)C",
      "CCC1C(C)C12C=CC=CC2=O",
      "CCC1C(C)C12C=CC=CC2C=O",
      "CC(C)C1C2C=CC=CC2C1=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_725": {
    "pid": "chem_725",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(C)(N(C)C)OC",
      "COC(C)(OC)N(C)C",
      "COC(COC)N(C)C",
      "COC(C)(OC)NC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_726": {
    "pid": "chem_726",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C=C\\C()OC(C)=[N+](C)",
      "C[O-]",
      "*/C=C\\C(*)OC(C)=[N+](C)",
      "C[O-]",
      "[O-]C=C(N(C)C)[C+]=O",
      "C/C=C\\C()OC(C)=[N+](C)",
      "C[OH-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_727": {
    "pid": "chem_727",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=1C=C(OC=C1N(C)C)R",
      "*/C=C/C(*)OC(=C)N(C)C",
      "/C=C\\C()OC(=C)N(C)C",
      "/C=C/C()OC(=O)N(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_728": {
    "pid": "chem_728",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=C(OC/C=C/C)O[Si](C)(C)C=C",
      "C=C(OC\\C=C/C)O[Si](C)(C)C",
      "C=C(OC/C=C/C)O[Si](C)(C)C",
      "COC1=CC=CC=C1[Si](C)(C)C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_729": {
    "pid": "chem_729",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "/C=C/C()OC(=O)C",
      "*/C=C/C(*)OC(=C)O*",
      "/C=C/O()C(=C)O",
      "C1=CC(=CO1)R2R1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_730": {
    "pid": "chem_730",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC([O+][Zn]Cl)c1ccccc1.[Cl-]",
      "CC([OH][Zn+]Cl)c1ccccc1.[Cl-]",
      "[Cl-].[O+](C)(C1=CC=CC=C1)[Zn]Cl",
      "CC([OH+][Zn]Cl)c1ccccc1.[Cl-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_731": {
    "pid": "chem_731",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)C(C)=[OH+].Nc1ccccc1",
      "*C(=O)CC(*)=[OH+].Nc1ccccc1",
      "c1ccccc1N=C([R1])[O+H]C(=O)[R2]",
      "C(=O)CC()=[O+].Nc1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_732": {
    "pid": "chem_732",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1cc2c(cc1)[nH]c([o+]H)c2",
      "*C(=O)/C=C(/*)Nc1ccccc1",
      "*C(=[OH])/C=C(/*)Nc1ccccc1",
      "*C(=[OH+])/C=C(/*)Nc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_733": {
    "pid": "chem_733",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1=CC(*)(O)C2C=CC=CC2=[NH+]1",
      "C1=CC(=O)C2C=CC=CC2[NH+]1",
      "c1cc2c(c(c1)N=CC=[N+]2)O assuming R groups are simple hydrogens",
      "C1=CC(O)(C2=CC=CC=C2)[NH+]1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_734": {
    "pid": "chem_734",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC()[OH2+]C2C=CC=CC2[NH2]1",
      "*C1=CC(*)([OH2+])C2C=CC=CC2[NH2+]1",
      "c1cc2c(cc1)[nH]c2O[H+](H)",
      "C1=CC()[OH2+]C2C=CC=CC2[NH2+]1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_735": {
    "pid": "chem_735",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1c2c(ccc1O)nc[nH+]2 with unspecified R groups",
      "*C(O)=C\\C(*)=[NH+]/c1ccccc1",
      "C(O)=C\\C()=N\\c1ccccc1",
      "C(O)=C/C()=[NH+]/c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_736": {
    "pid": "chem_736",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=C(C)COC[C@H]1CCC[N+]1([O-])CC#N",
      "C=C(C)COC[C@@H]1CCC[N+]1([O-])CC#N",
      "C1C[N+](C2OC1O2)CC#N.C=C",
      "C=C(C)COC[C@@H]1CC[N+]1([O-])C(C)#N"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_737": {
    "pid": "chem_737",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C=C)(CCC)O[K]",
      "[O-]c1ccccc1.[K+]",
      "C(C=C)(CC=C)OK",
      "*C(C=C)(CC=C)O[K]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_738": {
    "pid": "chem_738",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C=C)C(C=C)O[Si]()()",
      "*C(C=C)(CC=C)O[Si](*)(*)*",
      "C(C=C)(C=C)O[Si]()()",
      "c1ccccc1C[Si](R)(R)(R)OR"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_739": {
    "pid": "chem_739",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "B1OC(c2ccccc2)(c2ccccc2)[C@@H]2CCCN2.[BH4-]",
      "*B1OC(c2ccccc2)(c2ccccc2)[C@@H]2CCC[NH+]12.[BH4-]",
      "B1OC(c2ccccc2)(c2ccccc2)[C@H]2CCC[NH+]12.[BH4-]",
      "C1CC[N+](C1)B([O-])(R)C(c2ccccc2)c3ccccc3"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_740": {
    "pid": "chem_740",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=O.[CH2-][S+](C)(C)=O",
      "C()=O.[CH2-][S+](C)(C)O",
      "C[S+](C)C(=O)[C-]R1",
      "C()=O.[CH2-][S+](C)(C)(=O)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_741": {
    "pid": "chem_741",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C)([O-])C[S+](C)(C)O",
      "*C(*)([O-])C[S+](C)(C)=O",
      "C(C)([O-])C[S+](C)(C)=O",
      "C[S+](C)(=O)C([O-])R1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_742": {
    "pid": "chem_742",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(Br)(Br)(Br)Br.c1ccc(P(c2ccccc2)c2ccccc2)cc1",
      "BrC(Br)Br.c1ccc(P(c2ccccc2)c2ccccc2)cc1",
      "C(Br)(Br)Br.P(c1ccccc1)(c1ccccc1)(c1ccccc1)",
      "BrC(Br)(Br)Br.c1ccc(P(c2ccccc2)c2ccccc2)cc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_743": {
    "pid": "chem_743",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Br-][C+](Br)(Br)Br.[P+](c1ccccc1)(c2ccccc2)c3ccccc3",
      "Br[C-](Br)Br.Br[P+](c1ccccc1)(c1ccccc1)c1ccccc1",
      "Br[C-](Br)Br.[P+](c1ccccc1)(c1ccccc1)Br",
      "Br[C-](Br)Br.Br[P+](c1ccccc1)(c1ccccc1)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_744": {
    "pid": "chem_744",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "BrC(Br)(Br)[P+](c1ccccc1)(c1ccccc1)c1ccccc1.[Br-]",
      "BrC(Br)(Br)[P+](c1ccccc1)(c1ccccc1)c1ccccc1.Br",
      "[Br-].Br[P+](Br)(c1ccccc1)(c2ccccc2)c3ccccc3",
      "BrC(Br)(Br)[P+](c1ccccc1)(c1ccccc1)(c1ccccc1).[Br-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_745": {
    "pid": "chem_745",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "R-C#C[Br-].[Bu+]",
      "*C#CBr.[CH2-]CCC",
      "C#CBr.[CH2-]C(C)C",
      "C#CBr.[CH2-]CC(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_746": {
    "pid": "chem_746",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CS",
      "O=C1CCN(=O)C1Cl",
      "CS",
      "O=C1CCC(=O)N1Cl",
      "C1C(=O)NC(=O)C1ClS(C)(=O)=O",
      "CS.COC1CCC(=O)N1Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_747": {
    "pid": "chem_747",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[S+](C)Cl.O=C1CCC(=O)[N-]1",
      "C[S+](Cl)",
      "O=C1CCC(=O)[N-]1",
      "C1C(=O)NC(=O)1.[S+](C)(C)Cl",
      "C[S+](C)(Cl)O=C1CCC(=O)[N-]1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_748": {
    "pid": "chem_748",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C()O.C[S+](C)C1C(=O)CCC1=O.[Cl-]",
      "C()O.C[S+](C)N1C(=O)CC(C)C1=O.[Cl-]",
      "C1C(=O)NC(=O)C1[S+](=O)(C)Cl[O-]C(C)R1R2",
      "*C(*)O.C[S+](C)N1C(=O)CCC1=O.[Cl-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_749": {
    "pid": "chem_749",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)O[S+](C)",
      "CCN(CC)C",
      "[Cl-]",
      "[R1][R2]C[S+](=O)[CH2-]Cl",
      "C(C)O[S+](C)",
      "CCN(CC)C",
      "[Cl-]",
      "C(C)O[S+](C)",
      "CC[N+](CC)C",
      "[Cl-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_750": {
    "pid": "chem_750",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)O[S+]([CH2-])C",
      "*C(*)O[S]([CH2])C",
      "*C(*)O[S+](C)[CH2-]",
      "[S+](=O)(C)[CH-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_751": {
    "pid": "chem_751",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[H+].c1ccc(P(c2ccccc2)c2ccccc2)cc1.c1cc(SSc2ncccc2)cnc1",
      "c1ncccc1S[c2ncccc2][P+](c3ccccc3)(c4ccccc4)c5ccccc5",
      "[H+].c1ccc(P(c2ccccc2)c2ccccc2)cc1.c1ccnc(SSc2ccccn2)c1",
      "[H+].c1ccc(P(c2ccccc2)c2ccccc2)cc1.c1ccc(SSc2ccccn2)nc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_752": {
    "pid": "chem_752",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(O)C(*)O.S=C(n1ccnc1)n1ccnc1",
      "C(O)C(O)",
      "S=C(n1ccnc1)c1nccn1",
      "C1=NN=C(S1)C(CO)(O)R",
      "C(O)C(C)O.S=C(n1cncc1)n1cncc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_753": {
    "pid": "chem_753",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(O)C(*)OC(S)(n1ccnc1)n1ccnc1",
      "C(O)C()OC(S)(n1ccnc1)n1cccc1",
      "C(O)C(OC(S)n1ccnc1)n1ccnc1",
      "C1=CN=CN1C(C(O)(C)R)S"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_754": {
    "pid": "chem_754",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1OC2(OC1)OP2(OC)S",
      "COP(OC)OC",
      "C1OC2(OC1)SP2(OC)O",
      "COP(OC)OC",
      "*C1OC2(OC1*)SP2(OC)(OC)O",
      "COP(OC)OC",
      "[R]C1OC(=O)[R1]S[P+](=O)(OC)O",
      "[P-](OC)(OC)OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_755": {
    "pid": "chem_755",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1O[C-]([P+](OC)(OC)OC)OC1*",
      "C1O[C-]([P+](OC)(OC)OC)CO1",
      "C1OC([P+](OC)(OC)OC)OC1",
      "[R]C1(C[R1])OC1[P+](OC)(OC)OC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_756": {
    "pid": "chem_756",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1OC(=S)SC1.COP(OC)OC",
      "C1OC(=S)OC1P(OC)(OC)OC",
      "*C1OC(=S)OC1*.COP(OC)OC",
      "C1OC(=O)SC1.COP(OC)OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_757": {
    "pid": "chem_757",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1O[C-](SP(OC)(OC)OC)OC1",
      "C1OC(S[P+](OC)(OC)OC)OC1",
      "C1([O-])OC1[R][R1].[P+](OC)(OC)OC",
      "*C1O[C-](S[P+](OC)(OC)OC)OC1*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_758": {
    "pid": "chem_758",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1O[C-]([P+](OC)(OC)OC)OC1*",
      "C1O[C-]([P+](OC)OC)OC1",
      "C1C(OP(OC)OC)O1",
      "C1OC([P+](OC)(OC)OC)OC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_759": {
    "pid": "chem_759",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pb](OC(=O)C)(OC(=O)C)OC(=O)C",
      "C()(O)C()()O.CC(=O)O[Pb](OC(C)=O)(OC(C)=O)C(C)=O",
      "*C(*)(O)C(*)(*)O.CC(=O)O[Pb](OC(C)=O)(OC(C)=O)OC(C)=O",
      "C(C)(O)C(C)(C)O.CC(=O)O[Pb](OC(C)=O)OC(C)=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_760": {
    "pid": "chem_760",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pb](OC(C)=O)(OC(C)=O)OC12CCCCC1(O)CCCCC2.CC(=O)[O-].[H+]",
      "CC(=O)O[Pb](OC(C)=O)(OC(C)=O)OC12CCCCC1(O)C(C)CC2.CC(=O)[O-].[H+]",
      "CC(=O)O[Pb](OC(C)=O)(OC(C)=O)OC12CCCCC1(O)CCCC2.CC(=O)[O-].[H+]",
      "CC(=O)O[Pb](OC(=O)C)OC1C2CCC1C2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_761": {
    "pid": "chem_761",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-][O+]=O",
      "CC(C)=C(C)CO.O=[O+][O-]",
      "CC(C)C=C(C)",
      "O=[O+][O-]",
      "CC(C)=C(C)",
      "O=[O+][O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_762": {
    "pid": "chem_762",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1(C)OOOC(C)(C)O1",
      "CC1(C)OOOC1(C)C",
      "C1(CO1)CO1",
      "C1(C)OOOC1(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_763": {
    "pid": "chem_763",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C)=O.CC(C)O=O",
      "CC(C)=O.CC(C)O[O]",
      "CC(C)=O.CC(C)=[O+][O-]",
      "CC(=O)OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_764": {
    "pid": "chem_764",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)Cl.[N+](=N)[N-]",
      "C(=O)N=[N+]=[N-]Cl",
      "RCOCl.N=[N+]=[N-]",
      "*C(=O)Cl.[N-]=[N+]=[N-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_765": {
    "pid": "chem_765",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C([O-])(Cl)[N3]",
      "*C([O-])(Cl)N=[N+]=[N-]",
      "C([O-])(Cl)N#[N+]=[N-]",
      "C([O-])(Cl)N=[N]=[N-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_766": {
    "pid": "chem_766",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)N=[N]=[N+][O-]",
      "[R]C(=O)N=[N+]=[N-]",
      "C(=O)N#N=[N+]=[N-]",
      "*C(=O)N=[N+]=[N-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_767": {
    "pid": "chem_767",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N[C](=O)O.[B]",
      "O=C(CO)[C@H](N)B",
      "NC(=O)[O].[B]",
      "*NC(=O)O.[B]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_768": {
    "pid": "chem_768",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "RCON=[N+]=[N-]",
      "*C(=O)[N-][N+]#N",
      "C(=O)N=[N+]=[N-]",
      "C(=O)N[N+]=[N-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_769": {
    "pid": "chem_769",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-]C(OO)c1ccc(O)cc1",
      "OC(OO)c1ccc(O)cc1",
      "[O-]C(O)c1ccc(O)cc1",
      "C1=CC(=CC=C1O)C(=O)[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_770": {
    "pid": "chem_770",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1OC(=O)O[C@H](C1)[O-]c2ccc(O)cc2",
      "O=C(O)Oc1ccc(O)cc1",
      "[O-]C(O)Oc1ccc(O)cc1",
      "[O-]C(=O)Oc1ccc(O)cc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_771": {
    "pid": "chem_771",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(NC(C)(O)OC(C)=O)C(=O)OC",
      "O=C(C(O)C1OC(C(=O)OC)C1)N(R)",
      "*C(NC(C)(O)OC(C)=O)C(=O)O",
      "C(NC(C)(O)OC(C)=O)C(=O)OH"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_772": {
    "pid": "chem_772",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1N=C(C)OC1(O)O.CC(=O)O",
      "C1N=C(C)OC1(O)O.CC(=O)OC",
      "*C1N=C(C)OC1(O)O.CC(=O)[O-]",
      "O=C1N(C(=C(O1)O)C)C(=O)OC[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_773": {
    "pid": "chem_773",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC[N+]1(Cc2ccccc2)CN2CNCN(C2)C1",
      "OC[N+]1(Cc2ccccc2)N2CN(C1)CN2",
      "OC[N+]1(Cc2ccccc2)CN2CNCN1C2",
      "C1CN(C2=CN=CN2C1)CO[Ar]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_774": {
    "pid": "chem_774",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C1CCC2C(=O)CC2C1O",
      "COC(=O)C1CC2C(=O)C(O)CCC21",
      "COC(=O)C1CC2C(=O)CCCC21O",
      "C1CC2C(C1C(=O)O2)C(=O)OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_775": {
    "pid": "chem_775",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N=N(O)O",
      "N=N[OH2+].O=NO",
      "O[N+](=O)[O-] for nitrous acid and [OH2][O+]=O for the hydronium ion, but the image represents a reaction, not a single stable structure",
      "N=N[OH+].O=N[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_776": {
    "pid": "chem_776",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CCC1CN[N+](=O)[O-]",
      "NCC1CC1.O=NON=O",
      "NCC1CCC1.O=NON=O",
      "NCC1CCCC1.O=NON=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_777": {
    "pid": "chem_777",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=NNCC1CCC1",
      "O=NNC1CCC1",
      "C1CCCN(C1)C[N+](=O)[O-]",
      "N=NOCC1CCC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_778": {
    "pid": "chem_778",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[OH2+]/N=N\\CC1CCC1",
      "[OH2+]/N=N\\C-C1CCC1",
      "[OH2+]/N=N/CC1CCC1",
      "C1CCC1CN=[N+]=[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_779": {
    "pid": "chem_779",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N#[N+]CC1CCC1.O",
      "C1CCC1CN=[N+]=N.O",
      "N#[N+]CC1CCO1",
      "N#[N+]C1CCC1.O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_780": {
    "pid": "chem_780",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=NO.O=N[OH2+]",
      "O=N(=O)O and [O-][N+](=O)=O",
      "O=N.O=N[OH+]",
      "O=NO.O=N[OH]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_781": {
    "pid": "chem_781",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CCCCC1C(CO[N+](=O)[O-])N",
      "NC1CCCCC1O.O=NON=O",
      "NCC1(O)CCCCC1.N=NO=O",
      "NCC1(O)CCCCC1.O=NON=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_782": {
    "pid": "chem_782",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC1(CN=N/O[H2+])CCCCC1",
      "OC1(CC/N=N/[OH2+])CCCCC1",
      "C1(CCCCC1)C(NO)=N[O+]",
      "OC1(C/N=N/[OH2+])CCCCC1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_783": {
    "pid": "chem_783",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N#[N+]CC1(O)CCCC(C)1",
      "C1CCCCC1C(C[N+](=O)[O-])O",
      "N#[N+]C(C1)OCCCCC1",
      "N#[N+]CC1(O)CCCCC1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_784": {
    "pid": "chem_784",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)CCCCC(=O)OC",
      "[O-]CC",
      "C1CCCC2C1C(=O)C(=C2[O-])OC",
      "CCOC(=O)CCCCC(=O)OC",
      "CC[O]",
      "CCOC(=O)CCCCC(=O)OC",
      "CC[O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_785": {
    "pid": "chem_785",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CC2C(C1)C(OC2)[O-]C(=O)OCC",
      "CCOC(=O)C1CCCC1([O-])OCC",
      "CCOC(=O)C1CCCCC1([O-])OCC",
      "CC(=O)OC1CCCC1([O-])OCC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_786": {
    "pid": "chem_786",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccccc1C(=O)NC2=CC=CN2C(=O)OC",
      "COC(=O)c1cccc(NC(=O)c2cccn2C(=O)OC)c1",
      "COC(=O)c1ccccc1NC(=O)c1cccn1C(=O)OC",
      "COC(=O)c1ccccc1NC(=O)c1cccn1COC(=O)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_787": {
    "pid": "chem_787",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)/C=C\\OC(=O)\\C=C(\\C=C/OC)O[Si](C)(C)C",
      "CCOC(=O)/C=C/OC(=O)/C=C(\\C=C\\OC)O[Si](C)(C)C",
      "COc1cc(C(=C)C(=O)OCC)c(OC(=O)C)c(CO[Si](C)(C)C)c1",
      "CCOC(=O)/C=C/OC(=O)/C=C(\\C=C/OC)O[Si](C)(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_788": {
    "pid": "chem_788",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=COC",
      "CCOC(=O)C(/C=C/c1ccccc1)=N\\S(=O)Oc1ccccc1",
      "C=COC",
      "CCOC(=O)C(/C=C/c1ccccc1)=N\\S(=O)Oc1c(C)cccc1",
      "CCOC1=CN(C(C1)C2=CC=CC=C2)S(=O)(=O)C3=CC=CC=C3",
      "C=COC",
      "CCOC(=O)C(/C=C/c1ccccc1)=N\\S(=O)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_789": {
    "pid": "chem_789",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccccc1C=O",
      "C=CC(=O)O",
      "CCOC(=O)C=C",
      "C=CC(=C)OC",
      "COC(=O)C=O",
      "C=CC(=C)O",
      "CCOC(=O)C=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_790": {
    "pid": "chem_790",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "Nc1ccccc1.[OH+]=Cc1ccccc1",
      "Nc1ccccc1.[OH+]=Cc1ccncc1",
      "Nc1ccccc1O=[C+]c1ccccc1",
      "C1=CC=C(C=C1)CN.C1=CC=CC=C1C=O.O[H+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_791": {
    "pid": "chem_791",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[OH2+]C(Nc1ccccc1)c1ccccc1",
      "OC(Nc1ccccc1)c1ccccc1",
      "C1=CC=C(C=C1)CN(C2=CC=CC=C2)C[O+]",
      "[OH2+]C(Nc1ccccc1)c1c[nH]ccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_792": {
    "pid": "chem_792",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=[NH+]/c1ccccc1)\\c1ccccc1.C=C(O)C(=O)O",
      "C(=[NH+]/c1ccccc1)/c1ccccc1.C=C(O)C(=O)O",
      "c1ccc2[cH-]c3ccccc3[n+]2c1",
      "C(=[NH+]\\c1ccccc1)\\c1ccccc1.C=C(O)C(O)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_793": {
    "pid": "chem_793",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)C(=O)C(Nc1ccccc1)Cc1ccccc1",
      "c1ccc2c(c1)CNC2C(=O)O.O",
      "O=C(O)C(=O)CC(Nc1ccccc1)c1ccccc1.[H+]",
      "O=C(O)C(=O)CC(Nc1ccccc1)c1ccccc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_794": {
    "pid": "chem_794",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)C1(C[NH+]2CC3CC(OC3)C12)c4ccccc4",
      "O=C(O)C1([OH2+])CC(c2ccccc2)Nc2c1cccc2",
      "O=C(O)C1([OH2+])CC(c2ccccc2)Nc2ccccc21",
      "O=C(O)C1([OH2+])CC(c2ccccc2)Nc2ccccc1C2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_795": {
    "pid": "chem_795",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C(CC1(Nc2ccc(C(C)C)cc2)CCCC(C)C1)=N\\c1ccc(C(C)C)cc1",
      "C/C(CC1(Nc2ccc(C(C)C)cc2)CCCC(C)C1)=Nc1ccc(C(C)C)cc1",
      "CC(C)c1ccc(cc1)N=C(C)c2ccc(NC3CCCCC3)cc2C(C)C",
      "C/C(CC1(Nc2ccc(C(C)C)cc2)CCCC1)=N\\c1ccc(C(C)C)cc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_796": {
    "pid": "chem_796",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C1(C)CCCCC1O",
      "C1CCC(=O)C(C1)[C](C(=O)OC)",
      "COC(=O)C1CC(C)CCCC1=O",
      "COC(=O)C1(C)CCCCC1=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_797": {
    "pid": "chem_797",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`C(=O)NCC(=O)O",
      "CC(=O)OC(C)=O`",
      "`C(=O)NCC(=O)O.CC(=O)OCC(=O)`",
      "O=C(C)OC(=O)C(NC(=O)R)CO",
      "*C(=O)NCC(=O)O.CC(=O)OC(C)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_798": {
    "pid": "chem_798",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-]C1=C2CCCCC2(OO)CCC1",
      "C1CC2CCC1C2C3=CO[C-]3O",
      "[O-]C1=C2CCCCC2(OO)CC1C",
      "[O-]C1=C2CCCCC2(O)CCC1O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_799": {
    "pid": "chem_799",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C=CC2C(C1)C[N+](=O)[N-]S(=O)(=O)Ar",
      "O=S(/N=N\\C1=C2CCCCC2([O-])C=C1)Oc1ccccc1",
      "O=S(/N=N\\C1=C2CCCCC2([O])CCC1)Oc1ccccc1",
      "O=S(/N=N\\C1=C2CCCCC2([O-])CCC1)Oc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_800": {
    "pid": "chem_800",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[OH+]",
      "N.C=[OH]",
      "*N.C=[OH+]",
      "N.C=[O+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_801": {
    "pid": "chem_801",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[N+](C)",
      "O=CO",
      "[R]N(=O)C(=O)O",
      "*[N+](=C)",
      "O.C=O",
      "*[N+](=C)",
      "O=CO"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_802": {
    "pid": "chem_802",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=[N+]1CC2CC(C1)c1cc3nccnc3cc12.O=CO",
      "C=N1CC2CC(C1)c1cc3nccnc3cc12.C(=O)O",
      "C=[N+]1CC2CC(C1)c1c3nccnc3cc12.O=C=O",
      "c1cnc2c(c1)ccc3c2c4ccccc4[n+]3C=[N-]C(=O)O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_803": {
    "pid": "chem_803",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OCN1CC2CC(C1)c1cc3nccnc3cc12",
      "C1CC2=C3C(=CC=CN3C1)C(=NC2)C4CN(C5CC4C5)C6CO6",
      "OCN1CC2CC(C1)c1ccc3nccnc3c12",
      "OCN1CC2CC(C1)c1cc3ncccc3cc12"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_804": {
    "pid": "chem_804",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`N().CCC(=O)N1C(=O)OC[C@@H]1C(C)",
      "CCCCB(CCCC)OS(=O)(=O)C(F)(F)Cl`",
      "*N(*)*.CCC(=O)N1C(=O)OC[C@@H]1C(C)",
      "CCCCB(CCCC)OS(=O)(=O)C(F)(F)F",
      "`N().CCC(=O)N1C(=O)OC[C@H]1C(C)",
      "CCCCB(CCCC)OS(=O)(=O)C(F)(F)F`",
      "CC(C(=O)N1CCOC1=O)B(OBu)OBu"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_805": {
    "pid": "chem_805",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`O=C1CCCCC(C1)Cl.[O-]`",
      "*[O-].O=C1CCCCCC1Cl",
      "`[O-]C1=CCCCCC1Cl`",
      "C1CCCC(C(=O)[C-]1)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_806": {
    "pid": "chem_806",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1OC2CCCCC2C1",
      "*O.*OC(=O)C1[CH-]CCCC1",
      "C1CCCC[C-]1C(=O)OC",
      "OC(=O)C1CCCCC1[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_807": {
    "pid": "chem_807",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C(CBr)C(Br)C(=O)C1C(C)(C)[C-]#N",
      "C/C1=C/CC(C)(C)/C=C\\C(=O)C(C)(C)C(Br)CC1.[C-]#N",
      "C/C1=C/CC(C)(C)/C=C\\C(=O)C(C)(Br)C(Br)CC1.[C-]#N",
      "C/C1=C/CC(C)(C)/C=C\\C(=O)C(C)(Br)C(Br)C=C1.[C-]#N"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_808": {
    "pid": "chem_808",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C1=C/CC(C)(C)C(C#N)C2C(=O)C2(C)C(Br)CC1.[C-]#N",
      "C1=CCC2C(C1)CC(C2C#N)C(=O)C3CC3Br",
      "C/C1=C/CC(C)(C)C(C#N)C2C(=O)C2(C)CBrC1.[C-]#N",
      "C1=CC(C)(C)C(C#N)C2C(=O)C2(C)C(Br)CC1.[C-]#N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_809": {
    "pid": "chem_809",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C2C(C1C3C4C2C3C4Br)OC[O-]",
      "CCOC1([O-])C2CCCC1BrCCC2",
      "CCOC1([O-])C2CCCC1(Br)CCC2",
      "CCOC1([O-])C2CCCCC1(Br)CC2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_810": {
    "pid": "chem_810",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C1=C(C)OCC1(C)O",
      "C1=CC2C(C1[O+])OC(=C2)C(=O)OCC",
      "CCOC(=O)C1=C(C)OCC1(C)[OH+]",
      "CCOC(=O)C1=C(C)OCC1(C)[OH2+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_811": {
    "pid": "chem_811",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C#CC(=O)O",
      "COC(=O)C[S-]",
      "C[O-][C@H](=O)S=C(C(=O)OC)OC",
      "COC(=O)C#CC(=O)O",
      "COC(=O)CS",
      "COC(=O)C#CC(=O)O",
      "COC(=O)C[SH]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_812": {
    "pid": "chem_812",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C=C(C(=O)OC)SCC(=O)O",
      "[S-]",
      "COC(=O)/C=C(SCC(=O)OC)C(=O)O",
      "COC(=O)C[S-]",
      "COC(=O)/C=C(\\SCC(=O)OC)C(=O)O",
      "COC(=O)CS",
      "COC(=O)/C=C(/SCC(=O)OC)C(=O)O",
      "COC(=O)C[S-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "chem_813": {
    "pid": "chem_813",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)CSC(CC(=O)OC)(SCC(=O)OC)C(=O)O",
      "C[O-]",
      "COC(=O)C1(SC(=S)C(C(=O)OC)SS1)C(=O)OC",
      "COC(=O)SC(CS(CC(=O)OC)C(=O)OC)C(=O)O",
      "C[O-]",
      "COC(=O)CSC(C(=O)OC)(SCC(=O)OC)C(=O)O.C[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_814": {
    "pid": "chem_814",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C#[O+].Cl[Al-](Cl)(Cl)Oc1ccccc1",
      "C#[O+].Cl[Al-](Cl)(Cl)Oc1ccccc1R",
      "O=C([O-])c1ccccc1",
      "C#[O+].Cl[Al-](Cl)(Cl)Oc1c(Cl)cccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_815": {
    "pid": "chem_815",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=O)C1C=CC(=O)C=C1.[H+]",
      "C1=CC(=O)C=CC1=O.[H+]",
      "C1=CC=C2C(=C1)C(C=O)=C2[O+]",
      "OC(=O)C1=CC=CC(=O)C1.[H+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_816": {
    "pid": "chem_816",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)[Cl][Al](Cl)(Cl)Cl",
      "*C(=O)[Cl+][Al-](Cl)(Cl)Cl",
      "C(=O)[Cl+][Al](Cl)(Cl)Cl",
      "R-C(=O)Cl.[Al](Cl)(Cl)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_817": {
    "pid": "chem_817",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C(=O)C(=O)O.[H+]",
      "C1=CC=C2C(=C1)C(C(=O)OR)=[O+]2",
      "C(=O)C1=CC=CC=C1O.[H+]",
      "*C(=O)C1C=CC=CC1=O.[H+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_818": {
    "pid": "chem_818",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C([R])#O.[Cl-].[Al+3]([Cl-])([Cl-])([Cl-])",
      "*C(=O)C1C=CC=[CH+]C1.Cl[Al-](Cl)(Cl)Cl",
      "*C(=O)C1=CC=C[CH+]C1.Cl[Al-](Cl)ClCl",
      "*C(=O)C1C=CC=C[CH+]1.Cl[Al-](Cl)(Cl)Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_819": {
    "pid": "chem_819",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)O[Si](OC)(OC)OC(=O)c1ccccc1.[OH-]",
      "C[O][Si](C)([O][C](C)C(=O)[Ar])[O-]",
      "C(C)(O)O[Si](OC)(OC)OC(=O)c1ccccc1[OH-]",
      "C(C)O[Si](OC)(OC)OC(=O)c1ccccc1.[OH-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_820": {
    "pid": "chem_820",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=[NH2+])C()c1ccccc1N",
      "*C(=[NH2+])C(*)c1ccccc1N.[H]",
      "C(=[NH2+])C()c1ccccc1[NH3+]",
      "c1ccc2c(c1)ccn2C=[NH2+]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_821": {
    "pid": "chem_821",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C()O[Si](OC)(OC)OC([O-])O(c1ccccc1)",
      "C()O[Si](OC)(OC)OC([O-])(O)c1ccccc1",
      "C[Si](C)(OC(C)(O)C[O-])OC",
      "*C(*)O[Si](OC)(OC)OC([O-])(O)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_822": {
    "pid": "chem_822",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C()O.CC(=O)OI1(OC(C)=O)(OC(C)=O)OC(=O)c1ccccc2",
      "C()O.CC(=O)OI1(OC(C)=O)(OC(C)=O)OC(=O)c2ccccc12",
      "O=C1OC2=CC=CC=C2C1I(OAC)(OAC)OAC",
      "*C(*)O.CC(=O)OI1(OC(C)=O)(OC(C)=O)OC(=O)c2ccccc21"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_823": {
    "pid": "chem_823",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C()OI1(OC(C)=O)(OC(C)=O)OC(=O)c2ccccc21.CC(=O)O",
      "C()OI1(OC(C)=O)(OC(C)=O)OC(=O)c2ccccc21.CC(=O)OC",
      "O=C1C=CC=CC1C(=O)OI(OOC(C)=O)(OC(C)=O)C(C(OC(C)=O)[O-])R1R2",
      "*C(*)OI1(OC(C)=O)(OC(C)=O)OC(=O)c2ccccc21.CC(=O)[O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_824": {
    "pid": "chem_824",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)CSC1(C(=O)OC)CC(=O)C(C(=O)OC)S1.C[O-]",
      "COC(=O)CSC1(C(=O)OC)CC(=O)C(C(=O)OC)O1.C[O-]",
      "COC(=O)CSC1(C(=O)OC)CC(=O)C(C(=O)OC)S1.CO[O-]",
      "C1([C@H]2[C@@H](SC1=O)SC(=C2)C(=O)OC)C(=O)O",
      "[O-]C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_825": {
    "pid": "chem_825",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[Si](*)(F)F.[F-]",
      "F[Si](F)(R)R.[F-]",
      "F[Si](F)(F)R.[F-]",
      "[F-][Si](F)(R)R"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_826": {
    "pid": "chem_826",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Cl-].[Cl-].[Cl-].[Al+3](Cl)(Cl)Cl.C1=CC=[C+](C2=O)C=C1",
      "C(=O)C1=CC=CC[CH+]1.Cl[Al-](Cl)(Cl)Cl",
      "C(=O)C1C=CC=[CH+]C1.Cl[Al-](Cl)(Cl)Cl",
      "*C(=O)C1C=CC=C[CH+]1.Cl[Al-](Cl)(Cl)Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_827": {
    "pid": "chem_827",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=C([O-])",
      "Nc1ccccc1C=O",
      "*/C=C(/*)[O-].Nc1ccccc1C=O",
      "c1ccc(cc1)C(=O)N",
      "/C=C(/[O-])",
      "Nc1ccccc1=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_828": {
    "pid": "chem_828",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(=NO)C=C2(R)R1",
      "C(=O)/C()=C/c1ccccc1\\N",
      "*C(=O)/C(*)=C\\c1ccccc1N",
      "C(=O)\\C()=C/c1ccccc1N"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_829": {
    "pid": "chem_829",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C#[O+].Cl[Al-](Cl)(Cl)Oc1ccccc1",
      "1]([O-])c1ccccc1",
      "*C#[O+].Cl[Al-](Cl)(Cl)Oc1ccccc1",
      "C#[O+].Cl[Al-](Cl)(Cl)Oc1ccncc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_830": {
    "pid": "chem_830",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(Oc1ccccc1)=[O+][Al-](Cl)(Cl)Cl",
      "C(Oc1ccccc1)(=[O+])[Al-](Cl)(Cl)Cl",
      "C1=CC=C(C=C1)C=[O+].[Cl-].[Al](Cl)Cl",
      "C(=O)(Oc1ccccc1)[O+][Al-](Cl)(Cl)Cl"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_831": {
    "pid": "chem_831",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1C=CC=C[CH+]C1C=O",
      "C(=O)C1C=CC(=O)C=C1.[H]",
      "*C(=O)C1C=CC(=O)C=C1.[H+]",
      "C1=CC(=O)C=CC1C=O.[H+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_832": {
    "pid": "chem_832",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N.O=S(=O)(Cl)c1ccc(N(O)=O)cc1N(O)O",
      "*N.O=S(=O)(Cl)c1ccc(N(O)O)cc1N(O)O",
      "N.O=S(=O)(Cl)c1ccc(N(=O)=O)cc1N(=O)=O",
      "c1c(cc(cc1[N+](=O)[O-])[N+](=O)[O-])NS(=O)(=O)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_833": {
    "pid": "chem_833",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*N(*)S(=O)(=O)c1ccc(N(O)O)cc1N(O)O.O=C(O)CS",
      "N()S(=O)(=O)c1ccc(N(O)O)cc1N(O)O.O=C(O)CSO",
      "N()S(=O)(=O)c1ccc(N(O)O)cc1N(O)O.O=C(O)SC",
      "C1=CC(=CC(=C1[N](SCC(=O)O)S(=O)(=O)NR1R2)[N+](=O)[O-])[N+](=O)[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_834": {
    "pid": "chem_834",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=[N+]([O-])c1c(S(=O)(=O)SC(=O)O)c([N+](=O)[O-])ccc1[N+](R1)R2",
      "*N(*)S(=O)(=O)C1(SCC(=O)O)C[CH-]C(N(O)O)CC1N(O)O.[H+]",
      "N()S(=O)(=O)C1(SCC(=O)O)C[CH-]C(N(O)O)CC1N(O)O",
      "N()S(=O)(=O)C1(SCC(=O)O)C[CH-]C(N(O)O)CC1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_835": {
    "pid": "chem_835",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1[N-]C(=O)c2ccccc12.[K+]",
      "O=C1[N-]C(=O)c2ccccc12[K+]",
      "O=C1NC(=O)c2ccccc21.[K+]",
      "O=C1[N-]C(=O)c2ccccc21.[K+].**"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_836": {
    "pid": "chem_836",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1NC(=O)c2ccccc12[O-]O",
      "N1C(=O)c2ccccc2C1=O.O[O-]",
      "*N1C(=O)c2ccccc2C1=O.[O-]",
      "N1C(=O)c2ccccc2C1=O.[OH-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_837": {
    "pid": "chem_837",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1C2=CC=CC=C2NC1C(=O)[O-]",
      "*N1C(O)([O-])c2ccccc2C1=O",
      "N1C(=O)c2ccccc2C1O[O-]",
      "N1C(=O)c2ccccc2C1(O)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_838": {
    "pid": "chem_838",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1C=C(C(=O)[N-]R)OC1[O-]",
      "NC(=O)c1ccccc1C(=O)O.OO",
      "*NC(=O)c1ccccc1C(=O)O.[O-].[O-]",
      "NC(=O)c1ccccc1C(=O)[O-].[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_839": {
    "pid": "chem_839",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N[C@H](C(=O)[O-])c1ccccc1C(=O)[O-]",
      "N[C@@H](C(=O)[O-])c1ccccc1C(=O)[O-]",
      "*NC([O-])(O)c1ccccc1C(=O)[O-]",
      "c1ccccc1C(=O)[O-]N=C=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_840": {
    "pid": "chem_840",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1[N-]C(=O)c2ccccn21.[K+]",
      "O=C1NC(=O)c2ccccc21.[K+]",
      "[K+].[O-]C1=CC=CC2=C1C(=O)N2",
      "O=C1[N-]C(=O)c2ccccc21.[K+].**"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_841": {
    "pid": "chem_841",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*N1C(=O)c2ccccc2C1([O-])NN",
      "O=C1C=2C(C(=O)N1N)C=CC=C2[NH2+]N",
      "N1C(=O)c2ccccc2C1([O-])NNC",
      "N1C(=O)c2ccccc2C1([O-])NNH"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_842": {
    "pid": "chem_842",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*NC1([O-])NNC(=O)c2ccccn12",
      "*NC1([O-])NN=C(c2ccccc21)O",
      "c1ccc2c(c1)C(=O)N(N=N2)N[R]",
      "*NC1([O-])NNC(=O)c2ccccc21"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_843": {
    "pid": "chem_843",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)CN1C(=O)c2ccccc2C1=O.O=C",
      "C(=O)CN1C(=O)c2ccccc2C1=O.CO",
      "*C(=O)CN1C(=O)c2ccccc2C1=O.C[O-]",
      "COC(=O)N1C(=O)c2ccccc2C1=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_844": {
    "pid": "chem_844",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC1=C([O-])N(C(=O)C1=O)CC(=O)R",
      "*C(=O)CN1C(=O)c2ccccc2C1([O-])OC",
      "C(=O)CN1C(=O)c2ccccc2C1(OC)[O-]",
      "C(=O)CN1C(=O)c2ccccc2C1([O-])COC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_845": {
    "pid": "chem_845",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)c1ccccc1C(=O)N[CH2]C(=O)C",
      "COC(=O)c1ccccc1C(=O)NC(=O)C",
      "COC(=O)c1ccccc1C(=O)N[C@H](C(=O)[O-])C",
      "COC(=O)c1ccccc1C(=O)N[CH-]C(C)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_846": {
    "pid": "chem_846",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)C1N=C(O)c2ccccc2C1([O-])OC",
      "*C(=O)C1NC(=O)c2ccccc2C1([O-])OC",
      "O=C1C=C(C(=O)[O-])C2=C(C1)C=CC=C2N(C)C(=O)R",
      "C(=O)C1NC(=O)c2ccccc2C1([O-])CO"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_847": {
    "pid": "chem_847",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)N[S+](C)[C-](=O)R",
      "C(=O)C[S+](C)Nc1ccccc1",
      "C(=O)[CH-][S+](C)Nc1ccccc1",
      "*C(=O)[CH-][S+](C)Nc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_848": {
    "pid": "chem_848",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(=O)N(C2=S)R",
      "*C(=O)C(SC)C1C=CC=CC1=N.CCN(CC)C",
      "CC[NH+](CC)CC",
      "C(=O)C(SC)C1C=CC=CN1.CCN(CC)C",
      "CC[NH+](CC)CC",
      "C(=O)C(SC)C1C=CC=CC1=N.CCN(CC)C",
      "CC[NH+](C)CC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_849": {
    "pid": "chem_849",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN1C(C2=CC=CC=C2SC1=O)C(R)O",
      "*C1(O)Nc2ccccc2C1SC",
      "C1(OH)Nc2ccccc2C1SC",
      "C1(O)Nc2ccccc2C1CS"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_850": {
    "pid": "chem_850",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1=[NH+]c2ccccc2C1S",
      "CCN(CC)CC",
      "C1=[NH+]c2ccccc2C1S.CCN(CC)CC",
      "C1=CC=C2C(=C1)C=[N+](C2)C=S.[Et3N]",
      "C1=[NH2+]c2ccccc2C1S",
      "CCN(CC)CC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_851": {
    "pid": "chem_851",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O+]=[C-]Cl.[Al-3](Cl)(Cl)Cl",
      "C=[O+][Al-](Cl)(Cl)Cl.[Cl-]",
      "C=[O+][Al](Cl)(Cl)Cl.[Cl-]",
      "C=[O-][Al+](Cl)(Cl)Cl.[Cl-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_852": {
    "pid": "chem_852",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Cl-].[Cl+][C](=O)Cl.[Al](Cl)(Cl)Cl",
      "O=C[Cl+][Al-](Cl)(Cl)Cl",
      "O=[Cl+][Al](Cl)(Cl)Cl",
      "O=Cl[Al-](Cl)(Cl)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_853": {
    "pid": "chem_853",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC(=O)C1(=C)C()[S+](SSSSS[S-])C1=N",
      "[R2C(=O)O][C@H](R1)[C@@H](R)[S+]=C1/N=/C1[S-]S2SSSS2",
      "OC(=O)C1=C(S)[S+](SSSSSS[S-])C1=N",
      "*OC(=O)C1=C(*)C(*)[S+](SSSSSS[S-])C1=N"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_854": {
    "pid": "chem_854",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1=C([O-])Oc2ccccc2C1(C)O",
      "C1=C([O-])Oc2ccccc2C1(O)C",
      "O[C@H]1C[C@@H]2OC(=O)C=C2C1[R]",
      "C1=C([O-])Oc2ccccc2C1(C)(O)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_855": {
    "pid": "chem_855",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "not directly deducible from the image",
      "C1C(=O)Oc2ccccc2C1(O)",
      "[B]",
      "C1(C)C(=O)Oc2ccccc2C1O.[B]",
      "*C1C(=O)Oc2ccccc2C1(C)O.[B]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_856": {
    "pid": "chem_856",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=C(C#N)R)C(=O)[O-].S1SSSSSS1",
      "*/C=C(\\*)/C(C#N)=C(\\[O-])O*.S1SSSSS1S.",
      "*/C=C(*)/C(C#N)=C(\\[O-])O*.S1SSSSSSS1",
      "*/C=C(*)/C(C#N)=C(\\[O-])O*.S1SSSSSSSS1."
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_857": {
    "pid": "chem_857",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N#[N+]c1ccccc1.O/N=N/c1ccccc1",
      "c1ccc(cc1)[N+]#N\\N=NO",
      "N#[N+]c1ccccc1.ON=Nc1ccccc1",
      "N#[N+]c1ccccc1.O=N=Nc1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_858": {
    "pid": "chem_858",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N#[N+]c1ccccc1.[OH-]",
      "c1ccc([N+]#N)cc1",
      "N#[N+]c1ccccc1O",
      "N#[N+]c1ccccc1[OH]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_859": {
    "pid": "chem_859",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc(/N=N/O/N=N/c2ccccc2)cc1",
      "c1ccc(/N=N\\O/N=N/c2ccccc2)cc1",
      "C1=CC=CC=C1N=NC1=CC=CC=N1O",
      "c1ccc(/N=N/O\\N=N/c2ccccc2)cc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_860": {
    "pid": "chem_860",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccccc1.c1ccccc",
      "COc1ccccc1.c1ccccc1",
      "COc1ccccc1.c1ccccc1O",
      "C1=CC=C(C=C1)OC2=CC=[C](C=C2)\u2981"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_861": {
    "pid": "chem_861",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC=C(C(=O)OCC)C(=O)OC",
      "Nc1ccccn1",
      "CCOC(=O)C(=C(OCC)C(=O)OCC)NC1=CC=CC=C1",
      "CCOC=C(C(=O)OCC)C(=O)OC",
      "Nc1ccccc",
      "CCOC=C(C(=O)OCC)C(=O)OC",
      "Nc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_862": {
    "pid": "chem_862",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C(=C(\\[O-])OCC)C([NH2+]c1ccccc1)OCC",
      "CCOC(=O)C(C1=CC=CC=C1)[NH3+].C(C(=O)[O-])(OCC)OCC",
      "CCOC(=O)/C(=C(\\[O-])OCC)C([NH2+]c1ccccc1)/OCC",
      "CCOC(=O)/C(=C(\\[O-])OCC)C([NH2+]c1ccccc1)OCC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_863": {
    "pid": "chem_863",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C(=CNc1ccccc1)C(=O)OCC",
      "CCOC(=O)C(=CNc1ccccc1)C(=O)NCC",
      "CCOC(=O)C1=CNC2=CC=CC=C12",
      "CCOC(=O)C(=Cc1ccccc1)NC(=O)OCC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_864": {
    "pid": "chem_864",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C1=CN=C2C=CC=CC2C1=O",
      "CCOC(=O)C1=NC=C2C=CC=CC2C1=O",
      "O=C(OCC)c1c[nH]c2ccccc2c1=O",
      "CCOC(=O)C1=CN=C2C=CC=CC2N1=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_865": {
    "pid": "chem_865",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)C(Cl)C(=CN)N.[NH4+]",
      "CC(=O)CCl.CCOC(=O)/C=C(\\N)",
      "[NH4+]",
      "CC(=O)CCl.CCOC(=O)/C=C(\\C)N.[NH4+]",
      "CC(=O)CCl.CCOC(=O)C=C(\\C)N.[NH4+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_866": {
    "pid": "chem_866",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=C(CCC1(C)C(=O)CCC1=O)N1CCC[C@H]1C(=O)[O-].O=C([O-])[C@@H]1CCC[NH2+]1",
      "O=C1CCCC2(C1)OCCN2C(=O)[C@H]3C(=O)O3",
      "C=C(CCC1(C)C(=O)CCC1=O)N1CCCC[C@H]1C(=O)[O-].O=C([O-])[C@@H]1CCC[NH2+]1",
      "C=C(CCC1(C)C(=O)CCC1=O)N1CCC[C@H]1C(=O)[O-].O=C([O-])[C@H]1CCC[NH2+]1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_867": {
    "pid": "chem_867",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[C@]12CC/C(=[N+]3\\CCC[C@H]3C(=O)O)C[C@@]1(O)CCC2=O.O",
      "C[C@]12CC/C(=[N+]3\\CCC[C@H]3C(=O)[O-])C[C@@]1(O)CCC2=O.O",
      "C[C@]12CC/C(=[N+]3\\CC[C@H]3C(=O)[O-])C[C@@]1(O)CCC2=O.O",
      "C1CC[N+](C1)=C2CCCCC2C(=O)O[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_868": {
    "pid": "chem_868",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[C@]12CCC(O)(N3CCC[C@H]3C(=O)[O-])C[C@@]1(O)CCC2=O",
      "C[C@]12CCC(O)(N3CCCC[C@H]3C(=O)[O-])C[C@@]1(O)CCC2=O",
      "C1CCN(C1)[C@@H]2C[C@H](C(=O)C3CCCCC3O2)C(=O)[O-]",
      "C[C@]12CCC(O)(N3CCC[C@@H]3C(=O)[O-])C[C@@]1(O)CC2=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_869": {
    "pid": "chem_869",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C[C@H]2C(=O)OC[C@@H]2C[C@H]1O",
      "C[C@]12CCC(=O)C[C@]1(O)CCC2=O.[B]",
      "C[C@@]12CCC(=O)C[C@@]1(O)CCC2=O.[B]",
      "C[C@]12CCC(=O)C[C@@]1(O)CCC2=O.[B]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_870": {
    "pid": "chem_870",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C(Cl)C(O)C=C(N)C)=O",
      "CCOC(=O)C(C(C)=N)C(C)(O)CCl.N",
      "CCOC(=O)C(C(C)=N)C(C)(O)CCl.[N]",
      "CCOC(=O)C(C(C)=N)C(C)(O)Cl.[N]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_871": {
    "pid": "chem_871",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)/C(C(C)=N)/C(\\C)=CCl",
      "CC1=CC(=NC=C1Cl)C(=O)OCC",
      "CCOC(=O)C(C(C)=N)=C(\\C)CCl",
      "CCOC(=O)/C(C(C)=N)=C(\\C)CCl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_872": {
    "pid": "chem_872",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C2=CSC=N2.[Pd]I",
      "I[Pd]C1N=CSC1c1ccccc1.",
      "I[Pd]C1N=CSC1c1ccccc1.[B]",
      "I[Pd]C1N=CSC1c1ccccc1.B"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_873": {
    "pid": "chem_873",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "RCC(=O)OP(Br)(Br)Br",
      "CC(=O)O.BrP(=O)Br",
      "CC(=O)O.BrPBr2",
      "*CC(=O)O.BrP(Br)Br"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_874": {
    "pid": "chem_874",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C=O)Br.[Br-]",
      "C([R])(Br)C(=O)Br[Br-]",
      "*CC(=O)Br.[Br-]",
      "CC(=O)Br.Br"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_875": {
    "pid": "chem_875",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)[CH-]SCC(=O)OC",
      "O=C(C(=O)c1ccccc1)c1ccc(C)cc1",
      "C1(=O)C(C(=O)OCC)SC(C(=O)OCC)C1(c2ccccc2)c3ccccc3",
      "CCOC(=O)[CH-]SCC(=O)OC",
      "O=C(C(=O)c1ccccc1)c1ccccc1",
      "CCOC(=O)[CH-]SCC(=O)OC",
      "O=C(C(=O)c1ccccc1)c1cc(O)ccc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "chem_876": {
    "pid": "chem_876",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C(C(=O)OCC)SC([O-])(C(=O)c1ccccc1)c1ccccc1",
      "CCOC(=O)SC(C(=O)OCC)C([O-])(c1ccccc1)C(=O)c1ccccc1",
      "CCOC(=O)CSC(C(=O)OCC)C([O-])(C(=O)c1ccccc1)c1ccccc1",
      "CCOC(=O)C=C(S)C(C(=O)OCC)c1ccccc1C(=O)[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_877": {
    "pid": "chem_877",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCC[NH3+]",
      "CCC[NH2]C",
      "[R1]N1CCCC1[R2]",
      "*CCCC[NH2+]*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_878": {
    "pid": "chem_878",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)CP(=O)(OCC)OCC",
      "CCOC(=O)CP(=O)(OCC)OC",
      "[H-]",
      "CCOC(=O)P(OCC)(OCC)C(OCC)=O",
      "CCOC(=O)CP(OCC)(OCC)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_879": {
    "pid": "chem_879",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=N)C1C=CC(O)=CC1=O.[H+]",
      "O=C(C1=CC=C(C=C1)O)C(N)=C[*]",
      "*C(=N)C1C=CC(=O)C=C1O.[H+]",
      "C(=O)C1C=CC(=N)C=C1O.[H+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_880": {
    "pid": "chem_880",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C#[N+][Al-](Cl)(Cl)Cl.Oc1cc(O)ccc1",
      "Oc1cccc(O)c1C#N[Al]Cl(Cl)Cl",
      "*C#[N+][Al-](Cl)(Cl)Cl.Oc1cccc(O)c1",
      "C#[N+][Al-](Cl)(Cl)Cl.Oc1ccc(O)c1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_881": {
    "pid": "chem_881",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=N)c1ccc(O)cc1O.Cl.O",
      "C(=N)c1ccc(O)cc1O.Br.O",
      "C1=CC(=C(C=C1CCN)O)O.Cl",
      "C(=O)c1ccc(O)cc1O.Cl.O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_882": {
    "pid": "chem_882",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(N)(O)c1ccc(O)cc1O.[H+]",
      "C(N)(O)c1ccc(O)c(O)c1.[H+]",
      "OC1=CC=C(C=C1)C(O)N[H+]",
      "C(O)(N)c1cc(O)cc(O)c1.[H+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_883": {
    "pid": "chem_883",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-]C(=O).Ag+",
      "*C(=O)[O-].[Ag+].**",
      "C(=O)O[Ag+]",
      "[Ag+].[O-]C=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_884": {
    "pid": "chem_884",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC(=O)C(C)(/N=N/c1ccccc1)C(C)([O-])O",
      "OC(=O)C(C)(/N=N/c1ccccc1)C(C)(O)O",
      "OC(=O)C(C)(/N=N/c1ccccc1)C(C)([O+])O",
      "C(C(C(=O)[O-])O)N=NC1=CC=CC=C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_885": {
    "pid": "chem_885",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CS(=O)(=O)c1nnnn1-c1ccccc1.C[Si](C)(C)[N-][Si](C)(C)C",
      "CS(=O)(=O)c1nnnn1-c1ccccc1.C[Si](C)(C)[N-][Si](C)(C)C",
      "CS(=O)(=O)c1nnnn1c1ccccc1.C[Si](C)(C)[N-][Si](C)(C)C",
      "N(C)(C)[Si](C)(C)S(=O)(=O)C1=NN=C(N1)C2=CC=CC=C2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_886": {
    "pid": "chem_886",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(C(=O)C)OC([O-])C(S(=O)(=O)Ar)R",
      "C(C(OC([O-])C)OC(C)=O)C()S(=O)(=O)c1ccccc1",
      "*C(OC(C)([O-])OC(C)=O)C(*)S(=O)(=O)c1ccccc1",
      "C(OC(C)([O-])OC(C)=O)C()S(=O)(=O)c1ccccc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_887": {
    "pid": "chem_887",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CCN(C1)C2CCCC2[NH2+]C[C@@H](C(=O)OR)C(=O)OR",
      "OC(=O)C(C(=O)O)C(NH1)C1CCC1",
      "*OC(=O)C(C(=O)O*)C(*)[NH+]1CCCC1.C1CCNC1",
      "OC(=O)C(C(=O)O)C1[NH+]CCCC1.C1CCNC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_888": {
    "pid": "chem_888",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(O)C1NCCC1",
      "[R]1C=NC2CCCCC2O1",
      "*C(O)N1CCCC1",
      "C1N(C)CCC1O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_889": {
    "pid": "chem_889",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OCc1ccccc1O.CC(=O)C(=O)O",
      "*CC(=O)OC(=O)C*.CC(=O)c1ccccc1O",
      "CC(=O)OC(=O)c1ccccc1.CC(=O)OC",
      "O=C(Oc1ccccc1C(=O)O)C(=O)CR"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_890": {
    "pid": "chem_890",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OC(C)(O)Oc1ccccc1C(=O)C",
      "CC(=O)OC(O)(C)Oc1cccc(C)c1C(=O)C",
      "*CC(=O)OC(O)(C*)Oc1ccccc1C(C)=O",
      "O=C1OC(CO1)C(=O)OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_891": {
    "pid": "chem_891",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R]C(=O)[H+].[CH3COO-].c1ccn[c+]c1.[Br-]",
      "C(=O)C[n+]1ccccc1.CC(=O)[O-].[Br-].[Na+]",
      "C(=O)C[n+]1ccccc1.CC(=O)[O-].[Cl-].[H+]",
      "*C(=O)C[n+]1ccccc1.CC(=O)[O-].[Br-].[H+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_892": {
    "pid": "chem_892",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Br-].C1=CC=[N+](C=C1)C(=O)OC",
      "*/C(O)=C/[n+]1ccccc1.*/C=C/C(*)=O.[Br-]",
      "*/C(O)=C/[n+]1ccccc1.\\*/C=C(C)=O.[Br-]",
      "*/C(O)=C/[n+]1ccccc1.\\*/C=C/C(=O)R.[Br-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_893": {
    "pid": "chem_893",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)C(C*)C(*)C(=O)[n+]1ccccc1.[Br-]",
      "*C(=O)C(C)C(*)C(=O)[n+]1ccccc1.[Br-]",
      "*C(=O)CC(*)C(C(*)=O)[n+]1ccccc1.[Br-]",
      "C1CC(=O)OC1C2=[N+](C=CC=C2)Br"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_894": {
    "pid": "chem_894",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "not directly determinable due to unspecified substituents",
      "*C(=N)C/C(*)=C\\C(*)=O.CC(=O)[O-]",
      "C(=N)C/C()=C\\C()=O.CC(=O)[O+]",
      "C(=N)C/C()=C\\C()=O.CC(=O)[OH]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_895": {
    "pid": "chem_895",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccc(P2(=S)(SP(=S)S2)c3ccc(OC)cc3)cc1",
      "COc1ccccc1P(=S)(S)SP(=S)(c2ccccc2OC)S",
      "COc1ccc(P2(=S)SP(=S)(c3ccc(OC)cc3)S)cc1",
      "COc1ccc(P2(=S)SP(=S)(c3ccc(OC)cc3)S2)cc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_896": {
    "pid": "chem_896",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccc(P(=S)([S-])OC2=[NH+]CCC2)cc1",
      "COc1ccccc1P(=S)(O1)OC2CCN2[O+]1",
      "COc1ccc(P(=S)([S-])OC2=[NH+]CCC2)cc1",
      "COc1ccc(P(=S)([S-])OC2=NC[CH2]C2)cc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_897": {
    "pid": "chem_897",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=[N+](*)*.O=CO",
      "C()=[N+]().OC=O",
      "C()=[N+]().O=C=O",
      "[O+]1CNC=C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_898": {
    "pid": "chem_898",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N()C()O[].[H+]",
      "*N(*)C(*)(*)O.[H+]",
      "N()C()O.[H+]",
      "[O+]1CNC=C1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_899": {
    "pid": "chem_899",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)N(OC(*)=O)O",
      "*C(=O)NOC(*)=O.[OH-]",
      "R1C(=O)N(C(=O)R2)O[O-]",
      "C(=O)NOCO(*)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_900": {
    "pid": "chem_900",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*NC(=O)O.[B]",
      "NC(=O)OB",
      "N[C](O)=O.B",
      "RC(=O)N(C)[B]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_901": {
    "pid": "chem_901",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "Nc1ccccc1.O=C1C2C3C=CC(C3)C2C(=O)N1OS(=O)(=O)c1ccccc1",
      "Nc1ccccc1.O=C1C2C3C=CC(C3)C2C(=O)N1OS(=O)(=O)c1cccn1",
      "O=C1OC2=C(C=CC=C2)N1S(=O)(=O)C3=CC=CC=C3",
      "Nc1ccccc1.O=C1C2C3C=CC(C3)C2C(=O)N1OC(=O)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_902": {
    "pid": "chem_902",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C(=O)N(C2=O)[N-]OS(=O)(=O)C1=CC=CC=C1",
      "O=C([N-]OS(=O)(=O)c1ccccc1)C1C2C=CC(C2)C1C(=O)Nc1ccccc1",
      "O=C([N-]OS(=O)(=O)c1ccccc1)C1C2C=CC(C2)C1C(=O)NC1=CC=CC=C1",
      "O=C([N-]OS(=O)(=O)c1ccccc1)C1C2C=CC(C2)C1C(=O)Nc1ccccn1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_903": {
    "pid": "chem_903",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=O)NNS(=O)(=O)c1ccccc1.[B]",
      "R(C=O)NHS(=O)(=O)c1ccccc1",
      "C(=O)NNC(=O)c1ccccc1.B",
      "C(=O)NNS(=O)(=O)c1ccccc1B"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_904": {
    "pid": "chem_904",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CC(C)(C)C1[O+](S(c1ccccc1)c1ccccc1)[C-](C(F)(F)F)(C(F)(F)F)c1ccccc1",
      "CC(C)(C)O[S+](c1ccccc1)c1ccccc1.[O-]C(c1ccccc1)(C(F)(F)F)C(F)(F)F",
      "CC(C)(C)O[S+](c1ccccc1)c1ccccc1.[O-]C(c1ccccc1)(C(F)(F)Cl)C(F)(F)F",
      "CC(C)(C)O[S+](c1ccccc1)c1ccccc1.[O-]C(c1ccccc1)(C(F)(F)F)C(F)(F)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_905": {
    "pid": "chem_905",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CCC2=NCCCN2CC1.CCOC(=O)C(P(=O)(OCC)OCC)O",
      "C1CCC2=NCCCN2CC1.CCOC(=O)CP(=O)(OCC)OCC",
      "CCOC(=O)C(P(=O)(OCC)OCC)N1CCNCC1",
      "C1CCC2NCCCN2CC1.CCOC(=O)CP(=O)(OCC)OC"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_906": {
    "pid": "chem_906",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)O=[Al](OC(C)C)(OC(C)C)OC(C)C",
      "C()O=[Al](OC(C)C)(OC(C)C)OC(C)C",
      "CC(C)O[Al](OC(C)C)OC(=O)R",
      "C()O=[Al](OC(C)C)(OC(C)C)OC(C)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_907": {
    "pid": "chem_907",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)C([C@@H]([O-])/C=C/C=C/CCOC(C)=O)P(=O)(OCC)OCC",
      "CCOC(=O)C([C@H]([O-])/C=C/C=C/CCOC(C)=O)P(=O)(OCC)OCC",
      "CCOC(=O)C([C@@H]([O-])/C=C/C=C/CCOC(C)=O)P(=O)(OCC)OC",
      "CCOC(=O)C(C=C\\C=C/CCOC(=O)C)[P](=O)(OCC)OCC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_908": {
    "pid": "chem_908",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OC1CCC=CCC=CC(=C1OCC)P(OCC)(OCC)=O.[Li]",
      "CC(=O)OCC/C=C/C=C/C=O.CC=C1=C[PH](OCC)(OCC)=O[Li]O1",
      "CC(=O)OCC/C=C\\C=C/C=O.CC=C1C[PH](OCC)(OCC)O[Li]O1",
      "CC(=O)OCC/C=C/C=C\\C=O.CC=C1CP(=O)(OCC)O[Li]O1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_909": {
    "pid": "chem_909",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)[C@H]1[C@H](/C=C\\C=C/CCOC(C)=O)OP1([O-])(OCC)OCC",
      "CC(=O)OCCCC=CC=C[C@H]1COP(=O)(OCC)O1",
      "CCOC(=O)[C@H]1[C@@H](/C=C/C=C/CCOC(C)=O)OP1([O-])(OCC)OCC",
      "CCOC(=O)[C@H]1[C@H](/C=C/C=C/CCOC(C)=O)OP1([O-])(OCC)OCC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_910": {
    "pid": "chem_910",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R]Nc1cc(F)c(cc1[N+](=O)[O-])[N+](=O)[O-]",
      "N.O=[N+]([O-])c1cc(F)cc([N+](=O)[O-])c1",
      "N.O=[N+]([O-])c1ccc(F)c1[N+](=O)[O-]",
      "*N.O=[N+]([O-])c1ccc(F)c([N+](=O)[O-])c1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_911": {
    "pid": "chem_911",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "NC1(F)C=C(C[N+](=O)[O-])C=C1[N+](=O)[O-]",
      "*NC1(F)C=CC([N+](=O)[O-])=C[C-]1[N+](=O)[O-]",
      "NC1(F)C=CC([N+](=O)[O-])=CC1[N+](=O)[O-]",
      "[R]NC1=C(F)C(=[N+](=O)[O-])C=C1[N+](=O)[O-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_912": {
    "pid": "chem_912",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C#CC(*)(*)[OH2+]",
      "C#CC(C)(O)[OH+]",
      "C#CC(C)(C)[OH2+]",
      "[R]C([R])(O)C#[C][R1]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_913": {
    "pid": "chem_913",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=CC(=O)C",
      "C()=C(C(=O)).",
      "C(=O)C(=C())()",
      "*.*C(=O)C(*)=C(*)*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_914": {
    "pid": "chem_914",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/C([O-])=C(\\*)C(*)(*)*.[H+]",
      "/C([O-])=C(\\)C()()()",
      "C([O-])=C(\\)C()().[H+]",
      "[R]C([R])(O)C#[C][R1]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_915": {
    "pid": "chem_915",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)C[P+](OC)(OC)O",
      "[I-]",
      "COC(=O)COP(OC)(OC)C[Br-]",
      "COC(=O)C[P+](OC)(OC)O",
      "[Cl-]",
      "COC(=O)C[P+](OC)(OC)O",
      "[Br-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_916": {
    "pid": "chem_916",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)N=N/C(=O)OC",
      "c1ccc(P(c2ccccc2)c2ccccc2)cc1",
      "CCOC(=O)/N=N\\C(=O)OC",
      "c1ccc(P(c2ccccc2)c2ccccc2)cc1",
      "CCOC(=O)N=[N+]=[P-](C1=CC=CC=C1)(C2=CC=CC=C2)C3=CC=CC=C3",
      "CCOC(=O)/N=N\\C(=O)OC",
      "c1ccc(P(c2ccccc2)c2ccccc2)cc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_917": {
    "pid": "chem_917",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(=O)N=NN(C(=O)OCC)P(c1ccccc1)(c2ccccc2)c3ccccc3",
      "*C(*)O.O=COCCNN(CCOC=O)[P+](c1ccccc1)(c1ccccc1)c1ccccc1",
      "C()O.O=COCCNN(CCOC=O)[P+](c1ccccc1)(c1ccccc1)c1ccccn1",
      "C()O.O=COCCNN(CCOC=O)[P+](c1ccccc1)(c1ccccn1)c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_918": {
    "pid": "chem_918",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C()O",
      "C[S+](C)OC(=NC1CCCCC1)NC1CCCCC1.[H-]",
      "*C(*)O",
      "C[S+](C)OC(=NC1CCCCC1)NC1CCCCC1.[H+]",
      "C()O",
      "C[S+](C)OC(=NC1CCCCC1)NC1CCCCC1",
      "HN-C=N"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_919": {
    "pid": "chem_919",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)Nc1ccccc1-c1cccc()c1.O=P(Cl)(Cl)Cl",
      "C(=O)Nc1ccccc1-c1ccc()cc1.O=P(Cl)ClCl",
      "C1=CC=C2C(=C1)C(=O)OC3=CC=CC=C3NP(=O)(Cl)Cl",
      "*C(=O)Nc1ccccc1-c1ccc(*)cc1.O=P(Cl)(Cl)Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_920": {
    "pid": "chem_920",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pd]OC(=O)",
      "c1ccc(P(c2ccccc2)c2ccccc2)cc1",
      "O=C([O-])C[Pd](O=C([O-])C)(P(c1ccccc1)c2ccccc2)c3ccccc3",
      "CC(=O)O[Pd](OC(C)=O)P(c1ccccc1)c1ccccc1",
      "CC(=O)O[Pd]OC(C)=O.c1ccc(P(c2ccccc2)c2ccccc2)cc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_921": {
    "pid": "chem_921",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[P+](c1ccccc1)(c1ccccc1)c1ccccc1.CC(=O)[O-]",
      "O=[C-]OC(=O)",
      "C1=CC=C(C=C1)P(C2=CC=CC=C2)C3=CC=CC=C3",
      "CC(=O)O[P+](c1ccccc1)(c1ccccc1)c1ccccc1.CC(=O)O",
      "CC(=O)O[P+](c1ccccc1)(c1ccccc1)c1ccccc1.CC(=O)OC"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_922": {
    "pid": "chem_922",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1cc[n+](cc1)Br.Oc2ccco2.[NBu4].[BF4-]",
      "CCCCN(CCCC)CCC",
      "CC[n+]1ccccc1Br.F[B-](F)(F)F.O=C(O)c1ccco2",
      "CCCCN(CCCC)CCC",
      "CC[n+]1ccccc1Br.F[B-](F)(F)F.O=C(O)c1ccco1",
      "CCCCN(CCCC)CCC",
      "CC[n+]1ccccc1Br.F[B-](F)(F)F.O=C(O)c1ccnco1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_923": {
    "pid": "chem_923",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1OC=CC1O[CH2]C2=[N+](C=CC=C2)",
      "[BF4-]",
      "CC[n+]1ccccc1OC(=O)c1ccco1.F[B-](F)(F)F.OCc1ccccc1",
      "CC[n+]1ccccc1OC(=O)c1ccco1.F[B-](F)(F)F.OCC1=CC=CC=C1",
      "CC[n+]1ccccc1OC(=O)c1ccco1.FB(F)(F)F.OCc1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_924": {
    "pid": "chem_924",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=CC=C1.Cc1ccccc1",
      "C1=CCC=CC1.Cc1ccccc1",
      "c1ccc(cc1)c2ccccc2",
      "C1=CC=CCC1.Cc1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_925": {
    "pid": "chem_925",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/C=C/C(=O)C1=CCCCC1",
      "C/C=C/C(=O)C1=CCCCC1.[H+]",
      "C1=CCCCC1C(=O)C=C",
      "C\\C=C/C(=O)C1=CCCCC1.[H+]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_926": {
    "pid": "chem_926",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1[CH+]C(O)C2CCCCC21",
      "OC1=C2C=CC=CC2=[C+]1",
      "CC1[CH+]C(O)=C2CCCCC21",
      "CC1C(O)=C2CCCCC1C2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_927": {
    "pid": "chem_927",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[N+]1([C@@H]1C)",
      "[O-]S(=O)(=O)c1ccccc1",
      "`C1=NC1.Cc1ccc(S(=O)(O)O)cc1.O`",
      "*C1=NC1*.Cc1ccc(S(=O)(=O)[O-])cc1.O.[H+]",
      "`C1=NC1.Cc1cc(S(=O)(=O)O)cc1.O.[H+]`"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_928": {
    "pid": "chem_928",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1OC=CC1=CC(=O)C=C(NR2)C(=O)OR3",
      "*C1=CC(=O)C=CC1=O.*N/C(C)=C/C(=O)O*",
      "C1=CC(=O)C=CC1=O.NC(C)=C/C(=O)O",
      "C1=CC(=O)C=CC1=O.N/C(C)=C/C(O)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_929": {
    "pid": "chem_929",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/N=C(C)C(C(=O)O*)C1=CC(O)=CC1=O[H+]",
      "*/N=C(\\C)C(C(=O)O*)C1=CC(O)=CC(=O)C1[H+]",
      "*/N=C(\\C)C(C(=O)O*)C1C=C(O)C(*)=CC1=O.[H+]",
      "O=C1C=CC(O)=C(C1=O)N(R2)C(=C)OC(=O)R3"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_930": {
    "pid": "chem_930",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C#CC(*)(*)O*.[O+]#C[Co](C#[O+])(C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])(C#[O+])C#[O+]",
      "C#CC(*)O*.[O+]#C[Co](C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])(C#[O+])C#[O+]",
      "[Co]1(CO)(CO)(CO)(CO)[Co](CO)(CO)(CO)[C]#[C][C](R3)(OR2)R4",
      "C#CC(*)(*)O.[O+]#C[Co](C#[O+])(C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])C#[O+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_931": {
    "pid": "chem_931",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Co]1(CO)(CO)(CO)C(=O)[Co](CO)(CO)(CO)",
      "`OC(C)(C)C1=C(C)[Co]1(C#[O+])(C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])(C#[O+])C#[O+]`",
      "`OC1(CO)C2=C(CO)[Co]2(C#[O+])(C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])(C#[O+])C#[O+]`",
      "*OC(*)(*)C1=C(*)[Co]1(C#[O+])(C#[O+])(C#[O+])[Co](C#[O+])(C#[O+])(C#[O+])C#[O+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_932": {
    "pid": "chem_932",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/C(O)=C/C(*)*.O=C1OI(=O)(O)c2ccccc21",
      "O=C1OC(c2ccccc2)=C1O",
      "/C(O)=C/C().O=C1OO(=O)c2ccccc21",
      "/C(O)=C/C().O=C1OC(=O)c2ccccc21"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_933": {
    "pid": "chem_933",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`/C(=C/C())OI1(O)(O)OC(=O)c2ccccc12`",
      "O=C(C1=CC=CC=C1O)OOC=C(R\u00b9)C(R\u00b2)R\u00b3",
      "*/C(=C/C(*)*)OI1(O)(O)OC(=O)c2ccccc21",
      "`/C(=C\\C())OI1(O)(O)OC(=O)c2ccccc21`"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_934": {
    "pid": "chem_934",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`CC(C)O[Al](OC(C)C)(C)OC(C)C`",
      "CC(C)O[Al](OCC(C)C)(OCC(C)C)OC(C)C",
      "*C(*)O.CC(C)O[Al](OC(C)C)OC(C)C",
      "`C(C)(C)O[Al](OC(C)C)(OC(C)C)O`"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_935": {
    "pid": "chem_935",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(O[Al](C)C)",
      "CC(=O)C(F)(F)F",
      "C(C)O[Al](C)",
      "CC(=O)C(F)(F)F",
      "*C(*)O[Al](C)",
      "CC(=O)C(F)(F)F",
      "C[Al](C)(OC(=O)C(C)C(F)(F)F)OC(R)R1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_936": {
    "pid": "chem_936",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC(CNC([OH2])c1ccccc1)OCC",
      "CCOC(CN(C[OH2+])c1ccccc1)OCC",
      "CCOC(CNC([OH2+])c1ccccc1)OCC",
      "N(C1=CC=CC=C1)(C(COCC)=O)(C(COCC)=O)O[H+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_937": {
    "pid": "chem_937",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Li]c1cc(OC)c(OC)cc1Cn1cccc1C(=O)N(CC)C",
      "[Li]c1cc(OC)c(OC)cc1Cn1cccc1C(=O)N(C)CC",
      "[Li]c1cc(OC)c(OC)cc1Cn1cccc1C(=O)N(CC)CC",
      "COc1ccc2c(c1)nc3c2ccc(c3)O",
      "N(CC)C",
      "[Li]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_938": {
    "pid": "chem_938",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*=C(C)CC=C(C)S",
      "C=C(C)C=C(C)CS",
      "C=C(C)CC=C(C)S",
      "CC=CC(S)=X"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_939": {
    "pid": "chem_939",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`/C=C/[C@H]()OC(=N)C(Cl)(Cl)F`",
      "*/C=C/[C@H](*)OC(=N)C(Cl)(Cl)Cl",
      "`/C=C/[C@@H]()OC(=N)C(Cl)(Cl)Cl`",
      "C(C1=NC(=O)OC1)(CCl)(Cl)Cl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_940": {
    "pid": "chem_940",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OCC1CCN(CC1)O for a piperidine with hydroxyl groups without specifying R groups",
      "*N1C(*)(O)CCC1(*)O",
      "*N1C(*)CCC1(O)O*",
      "*N1C(*)C(O)CC1(*)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_941": {
    "pid": "chem_941",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=[N+](C)(O)CC1",
      "C1=[N+](C)C(O)C1",
      "*C1=[N+](*)C(*)(O)CC1",
      "C1=[N+](C2=C(C1)C(O)(C)C2)C(R1)C(R2)=C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_942": {
    "pid": "chem_942",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1=CCC(*)(O)N1*",
      "C1C=CN(C1)O",
      "C1=CC(O)(N)C1",
      "C1=CC(N)(O)C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_943": {
    "pid": "chem_943",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCN(CC)C1([O-])c2cc(OC)c(OC)cc2Cn2cccc21",
      "CCN(CC)C1([O-])c2cc(OC)c(OC)cc2Nc2cccc12",
      "CCN(CC)C1([O-])c2cc(OC)c(OC)cc2C2=CC=CC=N12",
      "COc1cc2c(cc1OC)c3ccn(CCN(CC)CC)[o+]c3c2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_944": {
    "pid": "chem_944",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C)I.CC([C-])C",
      "[O-]C(C)(C)C",
      "C[C-](C)",
      "CC(C)(C)I",
      "CC(C)(C)I.C[C-](C)C"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_945": {
    "pid": "chem_945",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/N=C1\\OC(*)(O)OC1(*)*.[H+]",
      "/N=C1\\OC()(O)OC1([H]).",
      "/N=C1\\OC()(O)OC1().[H].",
      "C=C(N([H+])R1)C(O)OOR2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_946": {
    "pid": "chem_946",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[C@@H]1O[C@@H]1C[O-]",
      "`[C@H]1O[C@@H]1CO`",
      "`C1OC1C[O-]`",
      "C1COC(O1)CO"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_947": {
    "pid": "chem_947",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)CC(Oc1ccccc1)(OCC)O[Al](Cl)(Cl)Cl",
      "*C(=O)CC(OCC)(Oc1ccccc1)O[Al](Cl)(Cl)Cl",
      "C(=O)C(OCC)(Oc1ccccc1)O[Al](Cl)(Cl)Cl",
      "O=C(C1=CC=CC=C1)C(COC)OC(=O)R.Cl[Al]ClCl"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_948": {
    "pid": "chem_948",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)OC(=O)C(O)OC[O+]",
      "C(=O)C(C(=O)Oc1ccccc1)O.[H+]",
      "C(=O)OC(C(=O)Oc1ccccc1).[H+]",
      "*C(=O)CC(=O)Oc1ccccc1.[H+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_949": {
    "pid": "chem_949",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/C(O)=C\\C(=O)Oc1ccccc1",
      "c1ccc(cc1)OC(=O)R",
      "*/C(O)=C\\C(=O)Oc1ccccc1C",
      "*/C(O)=C\\C(=O)Oc1ccccc1O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_950": {
    "pid": "chem_950",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1(C=[OH2+])C=COc2ccccc12",
      "C1([OH2+])C=COc2cccc1c2",
      "O=[C]1OC=2C=CC=CC2OC1[R]",
      "*C1([OH2+])C=C(O)Oc2ccccc21"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_951": {
    "pid": "chem_951",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(COOC(C)([O-])O)C1=CC=CC=C1",
      "CC1([O-])OC(=O)C(C2=CC=CC=C2)O1",
      "CC1([O-])OC(=O)CC(C2=CC=CC=C2)O1",
      "CC1([O-])OC(=O)CC(c2ccccc2)O1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_952": {
    "pid": "chem_952",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OC(=O)CC(OC(C)=O)c1ccoc1[OH]",
      "CC(=O)OC(=O)CC(OC(C)=O)c1ccccc1.[OH-]",
      "C(C(=O)OC(C(=O)OC)C1=CC=CC=C1)[O-]",
      "CC(=O)OC(=O)CC(OC(C)=O)c1c[OH]ccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_953": {
    "pid": "chem_953",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R1]B(O)(O)C1=N([R2])[R3]C1",
      "*[N+](*)=CCO[B-](*)(O)O",
      "[N+]()=CCOB()(O)O",
      "[N+]()C=CO[B-]()(O)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_954": {
    "pid": "chem_954",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*[C@@H]1C(*)(*)O[Si-]1(*)(*)*",
      "[O-]1[SiR3]C1R2R3R1",
      "*[C@H]1C(*)(*)O[Si-]1(*)(*)*",
      "*[C@H]1C(*)(*)O[Si+]1(*)(*)*"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_955": {
    "pid": "chem_955",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=O)NCC(O)c1ccccc1.O=P(=O)OP(=O)=O",
      "C(=O)NCC(O)c1ccccc1.O=P(=O)OP(O)=O",
      "C(=O)NCC(O)c1ccccc1.O=P(O)(O)P(=O)O",
      "C1=CC=C(C=C1)C(C(=O)N)O[P](=O)(O)[O]P(=O)(O)O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_956": {
    "pid": "chem_956",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=NC(C(OP(=O)O)=O)c2ccccc21",
      "*C1=NCC(OP(=O)=O)c2ccccc21",
      "O=P(O)O[C@H]1CN=Cc2ccccc21",
      "C1=NC(C(O)OP(=O)=O)c2ccccc21"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_957": {
    "pid": "chem_957",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC(=CC=C1CCN)O[R1].[R2]O[H+]",
      "C=[OH+].Oc1ccc(CN)cc1O",
      "*C=[OH+].*Oc1ccc(CCN)cc1O*",
      "C=[OH+].Oc1ccc(CCN)cc1[OH]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_958": {
    "pid": "chem_958",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC1=CC2C[NH+]C(C)C2C=C1O",
      "OC1=CC2CCN(C)C2C=C1O",
      "C1=[C+]C=CC=CC1CCN",
      "*OC1=C[C+]2CCNC(*)C2C=C1O*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_959": {
    "pid": "chem_959",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*OC(*)(N)O.[H+]",
      "OC(N)(O)O.[H+]",
      "[H+].[NH3+][C](O)(OR)OR1",
      "OC(C)(N)O.[H+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_960": {
    "pid": "chem_960",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[C](=O)OC[N+](R)(R1)R2.[O-]",
      "C[N+](C)(C)[O-].CC(=O)OCC(=O)",
      "C[N+](C)(C)O.CC(=O)OC(C)=O",
      "*C[N+](*)(*)[O-].CC(=O)OC(C)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_961": {
    "pid": "chem_961",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "`C(OC(C)=O)[N+](C)(C)C(C)=O.CC([O-])=O`",
      "*C(OC(C)=O)[N+](*)(*)C(C)=O.CC(=O)[O-]",
      "`C(OC(C)=O)[N+](C)(C)C(=O)",
      "CC(=O)[O-]`",
      "[R2]C1OC(=O)C[N+](C1)[R1].[O-]C(=O)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_962": {
    "pid": "chem_962",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C1OC(C)([O-])[N+]1(*)*",
      "[R2]C(=[O-])N([R1+])R",
      "C1OC(C)([O-])N1",
      "C1OC([O-])([N+]1)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_963": {
    "pid": "chem_963",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[N+]1([O-])CCCCC1.O=C(OC(=O)C(F)(F)F)F",
      "C[N+]1([O-])CCCCC1.O=C(OC(=O)C(F)(F)F)C(F)(F)F",
      "C1CCN(C1)[N+]=O.C(=O)(OC(F)(F)F)C(F)(F)F",
      "C[N+]1([O-])CCCCC1.O=C(OC(=O)F)C(F)(F)F"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_964": {
    "pid": "chem_964",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(Oc1ccccn1)C(F)(F)F",
      "CN1C=CCCC1.O=C(OC(=O)C(F)(F)F)C(F)(F)F",
      "CN1C=CCCCC1.O=C(O)C(OC(=O)C(F)(F)F)C(F)(F)F",
      "CN1C=CC=CC1.O=C(OC(=O)C(F)(F)F)C(F)(F)F"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_965": {
    "pid": "chem_965",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C=C[N+](C)[O]C",
      "[O]CC",
      "CCOC(C/N=C/c1ccccc1)[O+]HCC",
      "CCOC(CN=C\\c1ccccc1)[OH+]CC",
      "CCOC(C/N=C\\c1ccccc1)[OH+]CC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_966": {
    "pid": "chem_966",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "Nc1cccc(C(=O)C(=O)O)c1",
      "Nc1ccccc1CC(=O)C(=O)O.[H+]",
      "C1=CC=C2C(=C1)C(=O)C(=[NH2+])C2=O",
      "Nc1ccccc1C(=O)C(=O)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_967": {
    "pid": "chem_967",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)C1=NC2=CC=CC=C2C1",
      "O=C(O)C1=[NH+]c2ccccc2C1",
      "C1=CC=C2C(=C1)[N+]([H])=C(C2)C(=O)O",
      "O=C(O)C1=NC2C=CC=CC2C1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_968": {
    "pid": "chem_968",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[C+](C)(C)(C)O",
      "CC(C)(C)[OH2+]",
      "CC(C)(C)O",
      "CC(C)(C)O[H+]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_969": {
    "pid": "chem_969",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC#[N+]C(C)(C)C",
      "CC#N(C)(C)C",
      "CC#[N+]C(C)C(C)",
      "C[C+](C)C#N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_970": {
    "pid": "chem_970",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C/[C+]=N/C(C)(C)",
      "O",
      "CC(C)[N+](C)=C",
      "C/C=[N+]/C(C)(C)",
      "O",
      "C/[C+]=N\\C(C)(C)",
      "O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_971": {
    "pid": "chem_971",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CCCCC1O.[B]",
      "C1CC2CC(C1)C(=O)C2R",
      "C1CCCCC1O.[B]",
      "*C1CCCCC1=O.[B]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_972": {
    "pid": "chem_972",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "NC(O)C1=CC2=CC=CC=C2N1",
      "c1ccc2c(c1)cc(nc2)C(CO)N",
      "NC(O)(O)c1ccc2c(n1)cccc2",
      "NC(O)(O)c1ccc2ccccc2n1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_973": {
    "pid": "chem_973",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[O-]c1ccccc1C(Cl)(Cl)Cl",
      "[O-]c1ccccc1C(Cl)Cl",
      "O=C(Cl)c1ccccc1Cl",
      "[O-]c1ccccc1C(Cl)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_974": {
    "pid": "chem_974",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=O)N1c2ccccc2C=CC1C#[NH+]",
      "*C(=O)N1c2ccccc2CC=C1C#[NH+]",
      "*C(=O)N1c2ccccc2C=C1C#[NH+]",
      "c1ccc2c(c1)cc([n+]2[O-])N=C=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_975": {
    "pid": "chem_975",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1C=CC=CC1[C-](Cl)Cl",
      "O=C1C=CC=C(C1)[C-](Cl)Cl",
      "O=C1C=CC=CC1[C-](Cl)Cl",
      "O=C([O-])C1=CC=CC=C1CCl2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_976": {
    "pid": "chem_976",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C1C=CC=C\\C1=C\\Cl.OH",
      "C1=CC=C(C=C1)C(=O)C(Cl)O",
      "O=C1C=CC=C\\C1=C\\Cl.[O-]H",
      "O=C1C=CC=C/C1=C/Cl.[OH-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_977": {
    "pid": "chem_977",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CS(=O)(=O)[N-][N+]#N.O=C1CCCC/C1=C\\O",
      "C1CCCCC1C(=O)N=[N+][O-]S(=O)(=O)C",
      "CS(=O)(=O)[N-][N+]=N.O=C1CCCC1=CO",
      "CS(=O)(=O)N=[N+]=[N-].OC1=CCCC\\C1=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_978": {
    "pid": "chem_978",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC(=O)C(/N=N\\[N-]S(=O)(=O)c1ccccc1C)C()=O",
      "C1=NN([N-]1)S(=O)(=O)c1ccccc1C(=O)C(C(=O)OR1)R",
      "*OC(=O)C(/N=N\\[N-]S(=O)(=O)c1cccc(C)c1)C(*)=O",
      "OC(=O)C(/N=N\\[N-]S(=O)(=O)c1ccccc1)C()=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_979": {
    "pid": "chem_979",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "OC(=O)/C=C(\\[O-])[O].Cc1cccc(S(=O)(=O)[N-][N+]#N)c1",
      "OC(=O)/C=C(\\[O-])[R].Cc1cccc(S(=O)(=O)[N-][N+]#N)c1",
      "*OC(=O)/C=C(\\*)[O-].Cc1cccc(S(=O)(=O)[N-][N+]#N)c1",
      "Cc1ccc(cc1)S(=O)(=O)N=[N+]=[N-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_980": {
    "pid": "chem_980",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CS(=O)(=O)[N-]/N=N/C1(C=O)CCCCC1=O",
      "CS(=O)(=O)[N-]N=N/C1(C=O)CCCCC1=O",
      "CS(=O)(=O)N/N=N/C1(C=O)CCCCC1=O",
      "C1CCC(=O)N(N=C1)[N-]S(=O)(=O)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_981": {
    "pid": "chem_981",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CS(=O)(=O)[N+]=[N-]#N.O=C1CCCC\\C1=C/[O-]",
      "CS(=O)(=O)N=[N+]=[N-].O=C1CCCC\\C1=C\\[O-]",
      "CS(=O)(=O)[N-][N+]#N.O=C1CCCC/C1=C/[O-]",
      "C1CCC(=O)CC1C=O[N+](=N)[S-](=O)(=O)C"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_982": {
    "pid": "chem_982",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CS(=O)(=O)N1N=NC2(CCCCC2=O)C1O",
      "CS(=O)(=O)N1N=NC2(C1)CCCCC2=O",
      "C1CCC(=O)C1[C@@H]2N=[N+]=[N-]S(=O)(=O)C",
      "CS(=O)(=O)N1N=NC2(CCCCC2=O)C1[O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_983": {
    "pid": "chem_983",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)\\C(=C\\c1ccccc1/N=N/[OH2+])c1ccccc1",
      "O=C(O)/C(=C/c1ccccc1/N=N/[OH2+])c1ccccc1",
      "C1=CC=C2C(=C1)C=C(C3=CC=CC=C3)C2N=[N+]=[N-]C(=O)O",
      "O=C(O)/C(=C/c1ccccc1/N=N/[O+])c1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_984": {
    "pid": "chem_984",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C[S+](*)[O-].CC(=O)OC(C)=O",
      "C[S+](C)[O-].CC(=O)OC(C)=O",
      "COC(=O)CO[S+](R1)R2.[O-]",
      "C[S+](C)[O-].CC(=O)OC(C)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_985": {
    "pid": "chem_985",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[S+](R1)(R2)C=O.[O-]C(=O)C",
      "C[S+](C)OC(C)=O.CC(=O)[O-]",
      "*C[S+](*)OC(C)=O.CC(=O)[O-]",
      "C[S+](O)OC(C)=O.CC(=O)[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_986": {
    "pid": "chem_986",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CS(=O)(O)C(*)*.[B]",
      "*CS(=O)(=O)C(*)*.[B]",
      "C[S](=O)C",
      "*CS(=O)(=O)C(*)*.[C]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_987": {
    "pid": "chem_987",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C2C(=C1)C=CC=C2C(=O)O",
      "O=C(O)/C(=C\\c1ccccc1)c1ccccc1",
      "O=C(O)/C(=C/c1ccccc1)c1ccccc1",
      "O=C(O)C(=C/c1ccccc1)c1ccccc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_988": {
    "pid": "chem_988",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(CCO)OC",
      "C(CO)O[CH3+]",
      "*C(CCO)O[CH2+]",
      "OC[CH+]([O])R"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_989": {
    "pid": "chem_989",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=N(O)O[H2+]",
      "O=NO.O=N[OH2+]",
      "O=NO.O=NOH2",
      "[O-][N+](=O)=O.O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_990": {
    "pid": "chem_990",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C2=CC(=C(C=C2)C(=O)O)N[N+](=O)[O-]",
      "Nc1ccccc1/C=C(/C(=O)O)c1ccccc1.O=N(=O)N=O",
      "Nc1ccccc1/C=C(/C(=O)O)c1ccccc1.O=NON=O",
      "Nc1ccccc1/C=C(/C(=O)O)c1ccccc1.O=NO[O]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_991": {
    "pid": "chem_991",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)/C(=C/c1ccc(NN=O)cc1)c1ccccc1",
      "O=C(O)/C(=C/c1ccccc1NN=[OH+])c1ccccc1",
      "C1=CC=C2C(=C1)C(=NO2)C3=CC=CC=C3C(=O)O",
      "O=C(O)/C(=C/c1ccccc1)N=N\\c1ccccc1O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_992": {
    "pid": "chem_992",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=C(O)/C(=C/c1ccccc1/N=N/[OH2+])c1ccccc1",
      "O=C(O)/C(=C/c1ccc(N=N[OH])cc1)c1ccccc1",
      "O=C(O)/C(=C/c1ccccc1/N=N/O)C1=CC=CC=C1",
      "C1=CC=C(C=C1)C2=NN([O+](C2)O)C3=CC=CC=C3C(=O)O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_993": {
    "pid": "chem_993",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C(=O)OC1C(=O)C2=CC=CC=C2",
      "CC(C)(C)C(C)(I)OC(=O)c1ccccc1",
      "CC(C)(I)C(C)(C)OC(=O)c1ccccc2",
      "CC(C)(I)C(C)(C)OC(=O)c1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_994": {
    "pid": "chem_994",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1(C)OC(c2ccccc2)=[O+]C1(C)",
      "OOCc1ccccc1",
      "CC1(C)OC(c2ccccc2)=[O+]C1(C)",
      "[O-]OCc1ccccc1",
      "CC1(C)OC(c2ccccc2)=[O+]C1(C)",
      "[O-]OCCc1ccccc1",
      "C1([O-])([O+1])OC(=O)C1C(=O)O(c1ccccc1)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_995": {
    "pid": "chem_995",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[C+](C)(C)(C)O",
      "CC(C)C(C)=",
      "I",
      "C=C(C)C(C)",
      "I",
      "CC(C)=C(C)",
      "II"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_996": {
    "pid": "chem_996",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCO[P+](CCCC)(CCCC)CCC",
      "O=[N+]([O-])c1ccccc1[Te-]",
      "[O-][Se]C1=CC=C(C=C1)[N+](=O)[O-]",
      "*CCO[P+](CCCC)(CCCC)CCC",
      "O=[N+]([O-])c1ccccc1[Se-]",
      "CCO[P+](CCCC)(CCCC)CCC",
      "O=[N+]([O-])c1ccccc1[S-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "chem_997": {
    "pid": "chem_997",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*CCO[P+](CCCC)(CCCC)CCC",
      "N#C[Se]c1ccccc1[N+](=O)[O-]",
      "CCO[P+](CCCC)(CCCC)CCC",
      "N#Cc1ccccc1[N+](=O)[O-][Se]",
      "CCCCP(C)(C)C1=CC=C(C=C1)[N+](=O)[O-]SeC#N",
      "CCO[P+](CCCC)(CCCC)CCC",
      "N#Cc1ccccc1[Se][N+](=O)[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_998": {
    "pid": "chem_998",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=NC()C()O1",
      "*C1=NC(*)C(*)(O)O1",
      "C1COC(=O)N1",
      "C1=NC()C(O)()O1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_999": {
    "pid": "chem_999",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C(CCC=O)C(C(=O)O)C(=O)CC(=O)O)",
      "CNC(CCC=O)C(C(=O)O)C(=O)C(=O)CO",
      "CNC(CCC=O)C(C(=O)O)C(=O)CC(=O)O",
      "O=C1CC(NC1=O)C(C(=O)O)C(=O)O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1000": {
    "pid": "chem_1000",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O[C@@H]1CCCN1C=O",
      "CN(C)OCCC=O",
      "CNC(O)CCCO",
      "CNC(O)CCC=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1001": {
    "pid": "chem_1001",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN.O=CCCC=O",
      "CN.C=OCCC=O",
      "N1CCC(C=O)C1N",
      "CN.O=C(C)CC=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1002": {
    "pid": "chem_1002",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[N+]1=CCCC1C(C(=O)O)/C(O)=C/C(=O)O",
      "C[N+]1=CCCC1C(C(=O)O)C(O)=C/C(=O)O",
      "C1C=CC[N+]1C2=CC(=C(O2)C(=O)O)C(=O)O",
      "C[N+]1=CCCC1C(C(=O)O)/C(O)=C\\C(=O)O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1003": {
    "pid": "chem_1003",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(=O)NC(*)C(*)=O",
      "C1[NH]OC1",
      "*C(=O)NC(*)C(=O)O*",
      "*C(=O)OC(*)C(*)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1004": {
    "pid": "chem_1004",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pd](OC(C)=O).CC1C=CC(O[Si](C)(C)C)CCC1",
      "CC(=O)O[Pd]OC(C)=O.CC1C=C(O[Si](C)(C)C)CCC1",
      "CC(=O)O[Pd]OCC(=O).CC1C=C(OSi(C)(C)C)CCC1",
      "C1=CC=C(C=C1C)O[Si](C)(C)",
      "O=C(C)O[Pd]O=C(C)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_1005": {
    "pid": "chem_1005",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pd]C1C(=O)CCCC1C",
      "CC(=O)O[Pd]C1C(=O)CCCC1O",
      "C1CC(=O)C(C)[C@H]1[Pd](OC(=O)C)",
      "CC(=O)O[Pd]C1C(=O)CCCCC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1006": {
    "pid": "chem_1006",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC([O-])CCC1.C=CC(C)=O",
      "C1=NN([N-]1)S(=O)(=O)c1ccccc1C(=O)C(C(=O)OR1)R",
      "*C1=C([O-])CCCC1.C=CC(C)=O",
      "C1=C([O-])CCCC1.CC=CC=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1007": {
    "pid": "chem_1007",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/C(=N\\[N-]S(=O)(=O)c1ccc(C)cc1)C(*)*.CCC[C-]",
      "`/C(=N\\[N-]S(=O)(=O)c1cc(C)ccc1)C().CCC[C-]`",
      "C1=NN([N-]1)S(=O)(=O)c1ccccc1C(=O)C(C(=O)OR1)R",
      "`/C(=N\\[N-](S(=O)(=O)c1ccc(C)cc1))C().CCCC`"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1008": {
    "pid": "chem_1008",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[C@H]1[C@@H](OC(C)=O)[C@H](C)O[C@@H]2O[C+](C)O[C@@H]21.Oc1ccccc1",
      "CC(=O)O[C@@H]1[C@H](OC(C)=O)[C@H](C)O[C@H]2O[C+](C)O[C@H]21.Oc1ccccc1",
      "CC1C(C(C(OC1OC(C)=O)OC)O)OC(=O)C",
      "CC(=O)O[C@@H]1[C@@H](OC(C)=O)[C@H](C)O[C@@H]2O[C+](C)O[C@@H]21.Oc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1009": {
    "pid": "chem_1009",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CCC2C(C1)C(=O)OC2C=C[O-]",
      "C1(CCC(=C)[O-])CCCCC1O.[BH2]",
      "*C1(CCC(=C)[O-])CCCCC1=O.[BH]",
      "C1(CCCC(=C)[O-])CCCC1=O.[BH]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1010": {
    "pid": "chem_1010",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[Si](C)(C)C[CH2]CC1C=C(O[Ti](Cl)(Cl)Cl)CC1.[Cl-]",
      "C[Si](C)(C)C[CH+]CC1C=C(O[Ti](Cl)(Cl)Cl)CC1.[Cl-]",
      "C[Si](C)(C)C[CH+]CC1C=C(O[Ti](Cl)Cl)CC1.[Cl-]",
      "C1=CC(=CO1)[Ti](Cl)(Cl)Cl.C[Si](C)(C)C[CH2+].[Cl-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1011": {
    "pid": "chem_1011",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[R1][C]([R2])([N+]=[N-]O)[OH+]",
      "*C(*)([OH2+])N=[N+]=[N-]",
      "C()(O)N=[N+]=[N-]",
      "C()([OH2+])N=N#[N-]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1012": {
    "pid": "chem_1012",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)O[Pd]C1C(=[O+][Si](C)(C)C)CCCC1.CC(=O)[O-]",
      "CC(=O)O[Pd]C1C(=[O+][Si](C)(C)C)CCCCC1.CC(=O)[O-]",
      "C[Si](C)(C)O=C1[CH]C(=C(C)C1)",
      "CC(=O)[O-].C[C@H](C(=O)O)[Pd+]",
      "CC(=O)O[Pd]C1C(=[O+][Si](C)(C)C)CCCC1",
      "CC(=O)[O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1013": {
    "pid": "chem_1013",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C(=O)PdH",
      "[Pd]C(=O)R",
      "C(=O)[Pd]H",
      "*C(=O)[PdH]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1014": {
    "pid": "chem_1014",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[Si]()()OC12CCCCC1[O+]2",
      "*[Si](*)(*)OC12CCCCC1[OH+]2",
      "C1CCC(CC1)O[O+][Si](R)(R)R",
      "[Si]()()OC12CCCCC1O2"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1015": {
    "pid": "chem_1015",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CCCCC1O[Si](C)(C)",
      "O=C(O)c1ccccc1",
      "C(=O)OO.[Si]()()OC1=CCCCO1",
      "C(=O)OO.[Si]()()OC1=CCOCC1",
      "*C(=O)OO.*[Si](*)(*)OC1=CCCCC1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1016": {
    "pid": "chem_1016",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN1C2CCC1C(C(=O)O)C(=O)C2(C(=O)O)",
      "CN1C2CCC1C(C(=O)O)C(=O)C2C(=O)O",
      "CN1C2CC(C1C(C(=O)O)C(=O)O)C2C(=O)O",
      "CN1C2C3C1C(=O)OC3C(=O)C2C(=O)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1017": {
    "pid": "chem_1017",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccccc1.C[N+](C)=CBr",
      "C[N+](C)=C(C1=CC=CC=C1OC)Cl",
      "COc1ccccc1.C[N+](C)(C)Cl",
      "COc1ccccc1.C[N+](C)=CCl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1018": {
    "pid": "chem_1018",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(O)OCl.[B]",
      "C(O)O[B-].Cl",
      "C(O)Cl.O[B]",
      "[O-][C@H](R)OC(Cl)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1019": {
    "pid": "chem_1019",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C=O.c1c[n+](Cc2ccccc2)cs1",
      "[R1]C1=CSC=[N+](C1)Cc2ccccc2.[O-]=C-R",
      "*C=O.*c1c[n+](Cc2ccccc2)[c-]s1",
      "C=O.c1c[n+](Cc2ccccc2)[c-]n1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1020": {
    "pid": "chem_1020",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1(O)C(C(=O)OCC)C(=O)C(C(=O)CC)C1()O",
      "*C1(O)C(C(=O)OCC)C(=O)C(C(=O)OCC)C1(*)O",
      "C1C2C(C(C1C(=O)OCC)O)(C(C2O)O)C(=O)OCC",
      "C1(O)C(C(=O)OCC)C(=O)C(C(=O)OCC)C1O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1021": {
    "pid": "chem_1021",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCO.CC[O-].N#CCC1=CCC=CC1C#N",
      "c1cc2ccccc2n1C#NCCOCC",
      "CCO.CC[O-].N#CC1CCCC=C1C#N",
      "CCO.CC[O-].N#CCC1CC=CCC1C=C=N"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1022": {
    "pid": "chem_1022",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1(O)C(O)[NH-]NH2[O+]1",
      "*[C@H]1O[C@@H]1C(*)(O)NN.[H+]",
      "`[C@@H]1O[C@H]1C()(O)NN.[H+]`",
      "`[C@H]1O[C@H]1C()(O)NN.[H+]`"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1023": {
    "pid": "chem_1023",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCOC1=CC2=C(C=C1)C3=C(C2)C(=CN3)C#N",
      "CCO.CC[O-].N#CC1C(=N)CC2C=CC=CC21",
      "CCO.CC[O-].N#CC1C(=N)CC2CC=CCC21",
      "CCO.CC[O-].N#CC1(C=O)CC2CC=CCC21"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1024": {
    "pid": "chem_1024",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C[S+](=O)([O-])C(=O)CCl",
      "C[S+](C)OC([O-])(Cl)C(=O)Cl",
      "C[S+](C)OC(Cl)([O-])C(=O)Cl",
      "C[S+](C)OC([O-])(Cl)C(Cl)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1025": {
    "pid": "chem_1025",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*c1c[n+](Cc2ccccc2)c([C-](*)O)s1.C=CC(C)=O",
      "[R1]C1=C(SC=N1C2=CC=CC=C2)[O-]C(=O)C=C",
      "c1c[n+](Cc2ccccc2)c([C-](C)O)s1.C=CC=C=O",
      "c1c[n+](Cc2ccccc2)c([C-](O)C)s1.CC=C(C)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1026": {
    "pid": "chem_1026",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COc1ccc2c(c1)oc3cccnc3c2C(F)(F)F",
      "O=C(/C(=C\\c1ccccc1Oc1cccc(C(F)(F)F)n1)OC",
      "*O/C(=C\\c1ccccc1Oc1cccc(C(F)(F)F)n1)OC",
      "O/C(=C/c1ccccc1Oc1cccc(C(F)(F)F)n1)/OC"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1027": {
    "pid": "chem_1027",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O1CCN(CC1)C2=NC3=CC=CC=C3S2.O1CCS(=O)N1.O1CCS(=O)N1.SSSSS",
      "C\\C=C(/c1ccncc1)N1CCOCC1.C1CN(SSN2CCOCC2)CCO1.SSSSSS",
      "C/C=C(/c1ccccc1)N1CCOCC1.C1CN(SSN2CCOCC2)CCO1.SSSSSS",
      "C/C=C(/c1ccccc1)N1CCOCC1.C1CN(SSN2CCC2)CCO1.SSSSSS"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1028": {
    "pid": "chem_1028",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1C(=O)N(C)C(=N)O1",
      "/N=C1\\OC()(O)N()C1.[H+]",
      "/N=C1\\OC()N()C1O.[H+]",
      "*/N=C1\\OC(*)([O-])N(*)C1*.[H+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1029": {
    "pid": "chem_1029",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "IC(I)I.[Cr]",
      "[Cr](I)I",
      "I[Cr]I",
      "I[Cr](I)I"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1030": {
    "pid": "chem_1030",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)CP(=O)(OCC(F)(F)F)OCC(F)(F)F.C[Si](C)(C)[N-][Si](C)(C)C",
      "C(F)(F)(F)CCOP(=O)(C1C(=O)OC)OC(C(F)(F)F)C1[N-](Si(C)(C)C)Si(C)(C)C",
      "COC(=O)CP(=O)(OCC(F)(F)F)OCC(F)(F)F.C[Si](C)(C)C[Si](C)(C)N",
      "COC(=O)CP(=O)(OCC(F)(F)F)OCC(F)(F)F.C[Si](C)(C)N[Si](C)(C)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1031": {
    "pid": "chem_1031",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "[c1ncn(c1)C[CH2+][N-]C]Ar",
      "[CH+]N1CN(C2CN(Cc3ccccc3)CN2)C1",
      "[CH+](N1CN2CN(Cc3ccccc3)CN1)C2",
      "[CH+]N1CN2CN(Cc3ccccc3)CN(C1)C2"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1032": {
    "pid": "chem_1032",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1CNCOC1.S1SSSSSS1",
      "C1COCCN1.S1SSSSSS1",
      "C1COCCN1.S1SSSSSSS1",
      "C1COCCN1-S1SSSSSSS1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1033": {
    "pid": "chem_1033",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*/N=C(/OC(*)=O)C(*)N*",
      "`/C=N(/OC()=O)C()N`",
      "C1CNC(=O)O1 for a simple beta-lactam ring without specific R groups",
      "`/N=C(OC()=O)C()N`"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1034": {
    "pid": "chem_1034",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC1(C)CCCC(C)(C)N1O.CC1(C)CCCC(C)(C)N1.[O]Cl",
      "CC1(C)CCCC(C)(C)N1O.CC1(C)CCCC(C)(C)N1O.[O]Cl",
      "CC1(C)CCCC(C)(C)N1O.CC1(C)CCCC(C)(C)N1O.[O-]Cl",
      "CC1(C)CCN(C1(C)C)[O]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1035": {
    "pid": "chem_1035",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC([O-])CP(=O)(OCC(F)(F)F)OCC(F)(F)F.O=CCc1ccccc1",
      "COC(=C(O)CC1=CC=CC=C1)[O-]P(=O)(OCC(C(F)(F)F)C(F)(F)F)OCC(C(F)(F)F)C(F)(F)F",
      "COC([O-])CP(=O)(OCC(F)(F)F)OCC(F)F.O=CCc1cccc1",
      "COC([O-])CP(=O)(OCC(F)(F)F)OCC(F)(F)F.C=CCc1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1036": {
    "pid": "chem_1036",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=[N+](C=CC=C1)",
      "[B-](F)(F)(F)F",
      "[CH2-][N+](C)(C)Cc1ccccc1",
      "[CH2-][N+](C)(C)Cc1ccccc1",
      "[CH2-][N+](C)(C)Cc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "E",
    "extraction": "E",
    "true_false": false
  },
  "chem_1037": {
    "pid": "chem_1037",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O\\C=C\\CNC1=CC=CC=C1.[H+]",
      "c1cc[nH]cc1C=CO",
      "O/C=C/CCNc1ccccc1",
      "O/C=C/CNc1ccccc1.[H+]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1038": {
    "pid": "chem_1038",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(C(SN1CCOCC1)c1ccccc1)=[N]1CCOCC1",
      "CC(C(SN1CCOCC1)c1ccccc1)=N1CCOCC1",
      "C1COCCN1C(S)C2=CC=CC=C2[N+]3(CCOCC3)",
      "CC(C(SN1CCOCC1)c1ccccc1)=[N+]1CCOCC1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1039": {
    "pid": "chem_1039",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C)C=O.O=P(Cl)(Cl)O",
      "CN(C)C=O[P](Cl)(Cl)=O",
      "CN(C)C=O.O=P(Cl)(Cl)Cl",
      "CN(C)C=O.O=P(Cl)ClCl"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1040": {
    "pid": "chem_1040",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CO.CC1(C)CCCC(C)C[N+]1=O",
      "C1(=NO)[N+](=O)C(CCOCC)C1",
      "CO.CC1(C)CCC(C)(C)[N+]1=O",
      "*CO.CC1(C)CCCC(C)(C)[N+]1=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1041": {
    "pid": "chem_1041",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "COC(=O)[C@@H]1[C@H](O[PH+](=O)(OC(CF3)F)OC(CF3)F)C1[O-]C1=CC=CC=C1",
      "COC(=O)[C@H]([C@@H]([O-])Cc1ccccc1)P(=O)(OCC(F)(F)F)OCC(F)(F)F",
      "COC(=O)[C@@H]([C@H]([O-])Cc1ccccc1)P(=O)(OCC(F)(F)F)OCC(F)(F)F",
      "COC(=O)[C@@H]([C@H]([O-])Cc1ccccc1)P(=O)(OCC(F)F)OCC(F)(F)F"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1042": {
    "pid": "chem_1042",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "N.OCCCc1c[n+](Cc2ccccc2)cs1",
      "N.OCCCc1c[n+](Cc2ccccc2)cn1",
      "N.OCCCc1c[n+](Cc2ccccc2)cs2",
      "OCCCCC1=CN(C=C1S)C2=CC=CC=C2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1043": {
    "pid": "chem_1043",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "C1=CC=C(C=C1)C(=O)[O+]N",
      "[OH+]=CCCNc1ccccn1",
      "[OH+]=CCN(C)c1ccccc1",
      "[OH+]=CCCNc1ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1044": {
    "pid": "chem_1044",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "c1ccc2c(c1)CC3C(C2)N(C3)O[H+]",
      "[OH2+]C1CCNc2ccccn21",
      "[OH2+]C1CCNc2ccccc2C1",
      "[OH2+]C1CCNc2ccccc21"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1045": {
    "pid": "chem_1045",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "O=Cc1ccccc1N",
      "C=CCO.Nc1ccccc1.[H+]",
      "C=CC=O.Nc1ccccc1.[H+]",
      "C=CC=O.Nc1ccccc1[H+]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1046": {
    "pid": "chem_1046",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CN(C)c1ccncc1OC(=O)c2c(Cl)cc(Cl)cc2Cl",
      "C(=O)OC(=O)c1c(Cl)cc(Cl)cc1Cl.CN(C)c1cccnc1",
      "C(=O)OC(=O)c1c(Cl)cc(Cl)cc1Cl.CN(C)c1ncccc1",
      "*C(=O)OC(=O)c1c(Cl)cc(Cl)cc1Cl.CN(C)c1ccncc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1047": {
    "pid": "chem_1047",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "NC1C=CC=CN1c1ccc([N+](=O)[O-])cc1[N+](=O)O",
      "NC1C=CC=CN1c1ccc([N+]=O)cc1[N+]([O-])=O",
      "c1cc([N+](=O)[O-])cc(c1)[N+](=O)[O-]n2ncc2",
      "*NC1C=CC=CN1c1ccc([N+](=O)[O-])cc1[N+](=O)[O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1048": {
    "pid": "chem_1048",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)OC(C)(C)C(C)(C)I",
      "CC(=O)OC(C)(C)C(C)(C)Cl",
      "O=C1CC2C(C1)C(=O)OC2",
      "CC(=O)OC(C)(C)C(C)(C)Br"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1049": {
    "pid": "chem_1049",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CCN(CC)C",
      "O=C(Cl)c1c(Cl)cc(Cl)cc1Cl.C(=O)O",
      "O=C(Cl)c1c(Cl)cc(Cl)cc1Cl.CCN(C)C",
      "C(=O)O",
      "Clc1ccc(Cl)c(Cl)c1C(=O)Cl",
      "*C(=O)O.CCN(CC)C",
      "O=C(Cl)c1c(Cl)cc(Cl)cc1Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "chem_1050": {
    "pid": "chem_1050",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "*C(*)=NN.O.[OH-]",
      "*C(*)=NN.O.OH",
      "*C(*)=NN.O.[O-]",
      "R1C=NN(R)H"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1051": {
    "pid": "chem_1051",
    "question": "Please choose the SMILES expression of the transition-state structure shown in the image, ignoring the arrows. <image_1>",
    "options": [
      "CC(=O)[O-].CC1(C)[I]C1(C)C",
      "CC(=O)[O-].CC1(C)[I+]C1(C)C",
      "C1=[C+]C1.[O-]C(=O)C",
      "CC(=O)O.CC1(C)[I+]C1(C)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1052": {
    "pid": "chem_1052",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C=C(/C[O-])C(C)=O",
      "C=C(/C(C)=O)[O-]",
      "C=C(/O)C(C[O-])=O",
      "*/C=C(/*)[O-].*C(*)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1053": {
    "pid": "chem_1053",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(CC([*])([O-])[*])[*]",
      "O=C(C(C([*])([O-])[*])[*])[*]",
      "O=C(CC([*])([O-])[*])O",
      "O=C(CC([*])([O])[O-])[*]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1054": {
    "pid": "chem_1054",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(C1OC1c2ccccc2)c3cc(O)ccc3",
      "O=C(C1OC1c2ccccc2)c3c(O)cccc3",
      "O=C(C1CO1c2ccccc2)c3c(O)cccc3",
      "O=C(C1OC1c2cccc(c2)c3cccc3)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1055": {
    "pid": "chem_1055",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C1c2c(OCC(c3ccccc3)C1O)cccc2",
      "O=C1c2c(OC(c3ccccn3)C1O)cccc2",
      "O=C1c2c(OC(c3ccccc3)C1O)cccc2",
      "O=C1c2c(OC(c3ccccc3)C1C)cccc2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1056": {
    "pid": "chem_1056",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(Cl)OC1CCCCC1.OC(c2cc(Cl)ccc2)=O",
      "O=C(Cl)OC1CCCCC1.OC(c2ccccc2Cl)=O",
      "O=C(Cl)O1CCCCCC1.OC(c2cc(Cl)ccc2)=O",
      "O=C(Cl)OC1CCCCC1.OC(c2ccc(Cl)cc2)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1057": {
    "pid": "chem_1057",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[O-]c1cc(C(CC(c2ccccc2)=O)=O)ccc1",
      "[O-]c1c(C(CC(c2ccccc2)=O)=O)ccnc1",
      "[O-]c1c(C(CC(c2ccccc2)=O)C(=O))cccc1",
      "[O-]c1c(C(CC(c2ccccc2)=O)=O)cccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1058": {
    "pid": "chem_1058",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C=CO[Mg]Br.c1ccccc1N=O.C=C[Mg]Br",
      "C=CO[Mg]Br.[*]c1ccccc1N=O.C=C[Mg]Br",
      "C=CO[Mg]Br.[*]c1ccccc1N=O.CC[Mg]Br",
      "C=CO[Mg]Br.[*]c1ccccc1N(=O)C=C[Mg]Br"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1059": {
    "pid": "chem_1059",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "N#N.C[C](C#N)",
      "C[C](C#N)C",
      "N#N.C[C](C#N)",
      "C[C](C#N)C=C",
      "N#N.C[C](C#N)",
      "CC(C#N)C",
      "N#N.CC(C#N)",
      "C[C](C#N)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_1060": {
    "pid": "chem_1060",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C/[N+](C)=C/O",
      "CO",
      "C/[N+](C)=C\\O.C[O-]",
      "C/[N+](C)=C\\O",
      "C[O-]",
      "C/[N+](C)=C\\OC",
      "C[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "G",
    "extraction": "G",
    "true_false": false
  },
  "chem_1061": {
    "pid": "chem_1061",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "c1(C=CN2)c2cccnc1",
      "c1(C=CN2)c2cccc1",
      "c1(C=CCN2)c2cccc1",
      "c1(C=CN2)c2ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1062": {
    "pid": "chem_1062",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*][C+][N][*]",
      "[*][C+]=N[*]",
      "[*][C]=N[*]",
      "[*][C#N][*]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1063": {
    "pid": "chem_1063",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*][C+]-N[*]",
      "[*][C]=N[*]",
      "[*][C+]=N[*]",
      "[*]C#N[*]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1064": {
    "pid": "chem_1064",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C([OH])=N/[*]",
      "[*]/C([O])/=N/[*]",
      "[*]/C([OH2+])=N/[*]",
      "[*]/C([OH2])/N/[*]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1065": {
    "pid": "chem_1065",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C([C@](c1ccccc1)(O)[O])c2ccccc2",
      "O=C([C@](c1ccccc1)([OH-])[O])c2ccccc2",
      "O=C([C@@](c1ccccc1)([OH-])[O])c2ccccc2",
      "O=C([C@](c1ccccc1)([OH-])O)c2ccccc2"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1066": {
    "pid": "chem_1066",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C1C(O)=C[C@]2([H])C(Nc3c([C@@]12CCN(C(OC(C)(C)C)=O)C(OC(C)(C)C)=O)cccc3)=O",
      "O=C1C(O)=C[C@]2([H])C(Nc3c([C@@]21CCN(C(OC(C)(C)C)=O)C(OC(C)(C)C)=O)cccc3)=O",
      "O=C1C(O)=C[C@]2([H])C(Nc3c([C@@]12CCN(C(OC(C)(C)C)=O)C(OC(C)(C)C)=O)c(Cl)cc3)=O",
      "O=C1C(O)=C[C@@]2([H])C(Nc3c([C@]12CCN(C(OC(C)(C)C)=O)C(OC(C)(C)C)=O)cccc3)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1067": {
    "pid": "chem_1067",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(C(c1ccccc1)O)c2ccccc2.[C-]#N",
      "O=C(C(c1ccccc1)O)c2ccccc2C#N",
      "O=C(C(c1ccccc1)O)c2ccccc2.[C#N]",
      "O=C(C(c1ccccc1)O)c2ccccc2C(=[C-])N"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1068": {
    "pid": "chem_1068",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]C1C=CCC=C1.C2=C[CH]=CHC=C2",
      "[H]C1C=CCC=C1.C2=C[C]=CC=C2",
      "[H]C1C=CCC=C1.C2=C[C]C=CC2",
      "[H]C1C=CC=CC1.C2=CC=CC=C2"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1069": {
    "pid": "chem_1069",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C/C(C(C(c1ccccc1)O)([H])C(OCC)=O)=[O+]\\[H]",
      "C\\C(C(C(c1ccccc1)O)([H])C(OCC)=O)=[O+]\\[H]",
      "C/C(C(C(c1ccccc1)O)([H])C(OCC)=O)=[O-]",
      "C/C(C(C(c1ccccc1)O)(C)C(OCC)=O)=[O+]\\[H]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1070": {
    "pid": "chem_1070",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CCOC(/C=C(O)/C)=O.[OH+]=Cc1cccc(c1)",
      "CCOC(/C=C(O)/C)=O.[OH+]-Cc1ccccc1",
      "CCOC(/C=C(O)/C)=O.[OH+]=Cc1ccccc1",
      "CCOC(/C=C(O)\\C)=O.[OH+]=Cc1ccccc1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1071": {
    "pid": "chem_1071",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC(N1)=C(C(OCC)=O)C(c2ccccc2)NC1O",
      "CC(N1)=C(C(OCC)=O)C(c2ccccc2)NC1=N",
      "CC(N1)=C(C(OCC)=O)C(c2ccccc2)NC1=O",
      "CC(N1)=C(C(OCC)=O)C(c2ccccc2)N(C1)=O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1072": {
    "pid": "chem_1072",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(CNc1ccccc1)c2ccccc2.[H+]",
      "O=C(CNc1ccccc1)c2cccc[nH]2",
      "O=C(CN)c1ccccc1c2cccc[nH]2",
      "O=C(CN)c1ccccc1c2ccccc2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1073": {
    "pid": "chem_1073",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1(C([H])[N]([H])=C2C1([H])C=CC=C2)c3ccccc3",
      "OC1(C([H])[N+]([H])=C2C1([H])C=CC=C2)c3ccccc3",
      "OC1(C([H])[N+]([H])=C2C1([H])C=CC=C2)c4ccccc4",
      "OC1(C([H])[N+]([H])=C2C1([H])C=C(C=C2)c3ccccc3"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1074": {
    "pid": "chem_1074",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C(OP(Cl)(Cl)=O)/N=CCc1ccccc1",
      "[*]/C(OP(Cl)(Cl)=O)=[NH+]/CCc1ccccc1",
      "[*]/C(OP(Cl)(=O)Cl)=[NH+]/CCc1ccccc1",
      "[*]/C(OP(Cl)(Cl)=O)=[NH+]/Cc1ccccc1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1075": {
    "pid": "chem_1075",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[C@H]1(C2)CCC2C3[C@@]1(N4CCCC4)[C@H]5N=C[C@@H]3N=N5",
      "[C@H]1(C2)CCC2C3[C@]1(N4CCCC4)[C@H]5N=C[C@@H]3N=N5",
      "[C@@H]1(C2)CCC2C3[C@@]1(N4CCCC4)[C@H]5N=C[C@@H]3N=N5",
      "[C@H]1(C2)CCC2C3[C@@]1(N4CCCC4)[C@H]5N=C[C@H]3N=N5"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1076": {
    "pid": "chem_1076",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[C@H]1(C2)CCC2C3=CC=NC=C13",
      "[C@H]1(C2)CCC2C3=CC=CN=C13",
      "[C@@H]1(C2)CCC2C3=CC=NC=C13",
      "[C@H]1(C2)CC2C3=CC=NC=C13"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1077": {
    "pid": "chem_1077",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "c1(NNC2=CCCCC2)ccc1",
      "c1(NNC2=CCCCC2)cccc1",
      "c1(NNC2=CCCCCC2)ccccc1",
      "c1(NNC2=CCCCC2)ccccc1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1078": {
    "pid": "chem_1078",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "N=C(CCCC1)C1C2C(C=C)C=CC2=N",
      "N=C(C1CCCC1)C1C2C(C=CC=C2)=C",
      "N=C(C1CCCC1)C1C2C=CC=CC2=N",
      "N=C(CCCC1)C1C2C(C=CC=C2)=N"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1079": {
    "pid": "chem_1079",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C([H])=[C]/[C@@H](O[Al]([*])[*])[*]",
      "[*]/C([H])=[C-]/[C@@H](O[Al]([*])[*])[*]",
      "[*]/C([H])=[C-]/[C@H](O[Al]([*])[*])[*]",
      "[*]/C([H])=[C-]/[C@@H](O[Al]([*])[*])[*]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1080": {
    "pid": "chem_1080",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]C12c3c(NC1(N)CCCC2)cccc3.[H+]",
      "[H]C12c3c(NC1(N)CCCC2)ccccc3.[H+]",
      "[H]C12c3c(NC1)CCCC2cccc3.[H+]",
      "[H]C12c3c(NC1(N)CCC2)cccc3.[H+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1081": {
    "pid": "chem_1081",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(c1ccccc1)NC2=NN(c3ccccc3)C3CC3C2",
      "O=C(c1ccccc1)N=C2NN3c4ccccc4CC3C2",
      "O=C(c1ccccc1)NC2=NN3c4ccccc4C3C2",
      "O=C(c1ccccc1)NC2=NN3c4ccccc4CC3C2"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1082": {
    "pid": "chem_1082",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(OCC)O",
      "[*][C](OCC)O",
      "[*]C(O)OCC",
      "[*]C(OCC)CO"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1083": {
    "pid": "chem_1083",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]C12[C](C=CC=C2)Cc3c(C1(O)[R])cccc3",
      "[H]C12[C+](C=CC=C2)Cc3c(C1(O)[R])cccc3",
      "[H]C12[C+](C=CC=C2)Cc3c(C1(O)R)cccc3",
      "[H]C12[C+](C=CC=C2)Cc3c(C1([R])O)cccc3"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1084": {
    "pid": "chem_1084",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C1=CC=CC=C2C2=CC3=CC=CC=C31",
      "[*]C1=CC2=CC=CC=C3C3=CC=CC12",
      "[*]C1=CC=CC2=CC3=CC=CC=C3C12",
      "[*]C1=C(C=CC=C2)C2=CC3=CC=CC=C31"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1085": {
    "pid": "chem_1085",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]C1C(NNc2ccccc2)=CC3=CC=CC=C3C1OS(O)=O.[B]",
      "[H]C1C(NNc2ccccn2)=CC3=CC=CC=C3C1OS(O)=O",
      "[H]C1C(NNc2ccccc2)=CC3=CC=CC=C3C1OS(=O)O",
      "[H]C1C(NNc2ccccc2)=CC3=CC=CC=C3C1OS(=O)(=O)[O]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1086": {
    "pid": "chem_1086",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C12=CC=CC=C1C=C(NNc3ccccc3)C=C2",
      "C12=CC=CC=C1C=C(NCc3ccccc3)C=C2",
      "C1=CC=C(C=C1)C=C(NNc2ccc(C)cc2)",
      "C12=CC=CC=C1C=C(NNc3ccc(C)cc3)C=C2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1087": {
    "pid": "chem_1087",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "NOS(OC1CC(O)(N)C2c1cccc2)=O",
      "NOS(OC1CC(O)(N)Cc2c1cccc2)=O",
      "NOS(OC1CC(O)(N)Cc2c1ccccc2)=O",
      "NOS(OC1CC(O)(N)Cc2c1cccc3)=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1088": {
    "pid": "chem_1088",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "NC1=CC2=CC=CC=C2C=C1",
      "NC1=CC=CC2=CC=CC=C12",
      "N=C1C=CC2=CC=CC=C2C1",
      "NC1=CC2=CC=CC=C2C=C1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1089": {
    "pid": "chem_1089",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=S(NC(O)=O)(Cl)=O",
      "O=S(NC(OC)=O)(Br)=O",
      "O=S(NC(OC)=O)(Cl)=O",
      "O=S(NC(OC)=O)(Cl)O"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1090": {
    "pid": "chem_1090",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=S([N-]C(OC)=O)([N+](CC)(CCO)CC)=O",
      "O=S([N-]C(OC)=O)([N+](CCCC)(CC)C)=O",
      "O=S([N-]C(OC)=O)([N+](C(CC)CC)(C)=O)=O",
      "O=S([N-]C(OC)=O)([N+](CC)(CC)CC)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1091": {
    "pid": "chem_1091",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C1c2c(NC(C[*])(O)C[*])cccc2",
      "O=C1c2c(NC(C[*])(O)C1)cccc2",
      "O=C1c2c(NC(C[*])C1[*])cccc2",
      "O=C1c2c(NC(C[*])(O)C1[*])cccc2"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1092": {
    "pid": "chem_1092",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(O)=O.[*]C[O-]",
      "[*]C(=O)O.[*]CO",
      "[*]CO.O=[*]C[O-]",
      "[*]C(=O)O.[*]C[OH]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1093": {
    "pid": "chem_1093",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C/C(O)=C\\C=C\\C",
      "C/C(O)=C\\CC=C",
      "C\\C(O)=C\\CC=C",
      "C/C(O)=C/C=C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1094": {
    "pid": "chem_1094",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(N(c1ccccc1)c2ccccc2)c3ccccc3",
      "O=C(N(c1ccccc1)c3ccccc3)c2ccccc2",
      "O=C(N(c1ccccc1)c2ccccc2)c4ccccc4",
      "O=C(N(c1ccccc1)c2ccccc2)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1095": {
    "pid": "chem_1095",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C=C(N)",
      "[*]/C=C(\\N)/H",
      "[*]/C=C(\\N)\\[H]",
      "[*]/C=C(N)\\[H]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1096": {
    "pid": "chem_1096",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C(C(/N=C\\C([H])[*])C[*])=C/[O]",
      "[*]/C(C(/N=C\\C([H])[*])=C[*])/C[O-]",
      "[*]/C(C(/N=C\\C([H])[*])C[*])=C/[O-]",
      "[*]/C(C(/N=C\\C([H])[*])C[*])=C/[OH]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1097": {
    "pid": "chem_1097",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*/C=C/NC(C*)C(*)C(C)=O.[NH4+]",
      "*/C=C/NC(C*)C(C*)C(C)=O.[NH4+]",
      "*/C=C/NC(C*)C(*)C(C)=O.NH4+",
      "\\*/C=C\\NC(C*)C(*)C(C)=O.[NH4+]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1098": {
    "pid": "chem_1098",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H][N+]1=CC([*])C(O[*])C([*])C1C[*]",
      "[H][N+]1=CC([*])C(O)C([*])C1C[*]",
      "[H][N+]1=CC([*])C(O)C([*])C1C[*]",
      "[H][N+]1=CC([*])C(O)C([*])C1[*]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1099": {
    "pid": "chem_1099",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C1([H])C(C[*])([H])N=CC([*])C1",
      "[*]C1([H])C(C[*])([H])N=C(C[*])=C1",
      "[*]C1([H])C(C[*])([H])N=CC([*])=C1",
      "[*]C1([H])C(C[*])([H])N=CC([H])=C1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1100": {
    "pid": "chem_1100",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C=S.CS",
      "O=C=S.C=S",
      "O=C=S.SC",
      "O=C=",
      "CS"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1101": {
    "pid": "chem_1101",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "ClCCl",
      "Cl[C-]Cl",
      "[Cl][C][Cl]",
      "Cl[C]Cl"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1102": {
    "pid": "chem_1102",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]C1C=CC2C1C2(Cl)Cl.[OH]",
      "[H]C1C=CC2C1C2(Cl)Cl.O[H]",
      "[H]C1C=CC2C1C2(Cl)Cl.O",
      "[H]C1C=CC2C1C2(Cl)Cl.[OH-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1103": {
    "pid": "chem_1103",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(O)(C([*])C(O)=O)O[*]",
      "[*]C(O)(C([*])(O[*])C(=O)O)O[*]",
      "[*]C(O)(C([*])C(O[*])=O)O[*]",
      "[*]C(O)(C([*])C(=O)O[*])O[*]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1104": {
    "pid": "chem_1104",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(O[*])C([*])(C(=O)O[*])",
      "O=C(C([*])C(O[*])=O)O[*]",
      "O=C(C([*])C(O[*])O)=O",
      "O=C(C([*])(O[*]))C(=O)O[*]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1105": {
    "pid": "chem_1105",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*OC1(O)C=NOC1*",
      "*OC1(O)ON=C(C)C1*",
      "*OC1(O)N=COC1*",
      "*OC1(O)ON=C(*)C1*"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1106": {
    "pid": "chem_1106",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(C1[*])=NOCC1=O",
      "[*]C(C1[*])=NOC1=O",
      "[*]C(C1[*])=NOC1O",
      "[*]C(C1[*])=NNC1=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1107": {
    "pid": "chem_1107",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*C1=CC(=O)C=C(*)C1=CC=C",
      "*C1=CC(CC=C)CC(*)C1=O",
      "*C1=CC(CCC=C)C=C(*)C1=O",
      "*C1=CC(CC=C)C=C(*)C1=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1108": {
    "pid": "chem_1108",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]c1c(O)c([*])cc(C#C)c1",
      "[*]c1c(O)c([*])cc(CC#C)c1",
      "[*]c1c(O)c([*])cc(C=C)cc1",
      "[*]c1c(O)c([*])cc(CC=C)c1"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1109": {
    "pid": "chem_1109",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CCC1C(C)C12C=CC=CC3=O",
      "CCC1C(C)C12C=CC=CC2=O",
      "CCC1C(C)C12C=CC=CC2O",
      "CCC1C(C)C12C=CC=CC2=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1110": {
    "pid": "chem_1110",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1C(C(/C=C/C)C)C=CC=C1",
      "OC1C(C(C=C)C)C=CC=C1",
      "OC1C(C(/C=C/C)C)CC=CC=C1",
      "OC1C(C(/C=C/C)C)C=CC=C2"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1111": {
    "pid": "chem_1111",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C/C(OC)=[N+](C)\\",
      "[O-]C",
      "C/C(OC)=[N+](C)\\",
      "O=C",
      "C/C(OC)=C(N)\\",
      "[O-]C",
      "C/C(OC)=[N+](C)\\",
      "[O-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1112": {
    "pid": "chem_1112",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC(C=C)C(C)[O]Si(C)(C)C",
      "CC(C=C)C(C)(C)O[Si](C)(C)C",
      "CC(C=C)CC(O[Si](C)(C)C)=N",
      "CC(C=C)CC(O[Si](C)(C)C)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1113": {
    "pid": "chem_1113",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*C1=CC(*)C2C=CC=CC2=[NH+]1",
      "*C1=CC(*)(O)C2C=CC=CC2=[NH+]1",
      "*C1=CC(O)(*)C2C=CC=CC2=[NH+]1",
      "*C1=CC(*)C2C=CC=CC2=N1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1114": {
    "pid": "chem_1114",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1([*])c2c(NC([*])C1)cccc2",
      "OC1([*])c2c(N=C([*])C1)cccc2",
      "OC1([*])c2c(NC([*])=C1)cccc2",
      "OC1([*])c2c(NC([*])=C1)ccccc2"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1115": {
    "pid": "chem_1115",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1([*])C2C=CC=CC2=[N+]([H])C([*])=C1",
      "OC1([*])C2C=CC=CC2[N+]=C([*])C1",
      "OC1([*])C2=CC=CC=C2[N+]([H])C([*])=C1",
      "OC1([*])C2C=CC=CC2[N]C([*])=C1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1116": {
    "pid": "chem_1116",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "ON1CCC[C@H]1COCC(C)=",
      "C=C=C#N",
      "ON1CCC[C@H]1COCC(C)=",
      "C=CC#N",
      "ON1CCC[C@H]1COCC(C)=",
      "C#CC=C",
      "ON1CCC[C@H]1COCC(C)=O.C=CC#N"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1117": {
    "pid": "chem_1117",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C=CCC\\C=C(O[K])\\[*]",
      "C=CCC/C=C(O[K])\\[*]",
      "C=CCC/C=C(O[K])/[*]",
      "C=CC/C=C(O[K])\\[*]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1118": {
    "pid": "chem_1118",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C=CCC/C=C(O[Si]([*])([*])[*])[*]",
      "C=CCC/C=C(O[Si]([*])([*])[*])\\[*]",
      "C=CCC/C=C(O[Si]([*])([*])[*])/[*]",
      "C=CCC/C=C(O[Si]([*])[*][*])\\[*]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1119": {
    "pid": "chem_1119",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*][B@-]1(/[O+]=C(c2ccccc2)\\C)OC(c3ccccc3)(c4ccccc4)[C@@H]5CCC[N@@+]51[BH2-][H]",
      "[*][B@-]1(/[O+]=C(c2ccccc2)\\C)OC(c3ccccc3)(c4ccccc4)[C@H]5CCC[N@+]51[BH2-][H]",
      "[*][B@]1(/[O+]=C(c2ccccc2)\\C)OC(c3ccccc3)(c4ccccc4)[C@@H]5CCC[N@@+]51[BH2-][H]",
      "[*][B@-]1(/[O+]=C(c2ccccc2)\\C)OC(c3ccccc3)(c4ccccc4)[C@@H]5CCC[N@@+]51[BH3-][H]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1120": {
    "pid": "chem_1120",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "Br[C-](Br)Br.Br[P+](c1ccccc1)(c2ccccc2)(c3ccccc3)",
      "Br[C-](Br)(Br)Br.Br[P+](c1ccccc1)(c2ccccc2)c3ccccc3",
      "Br[C-](Br)Br.Br[P+](c1ccccc1)(c2ccccc2)c4ccccc4",
      "Br[C-](Br)Br.Br[P+](c1ccccc1)(c2ccccc2)c3ccccc3"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1121": {
    "pid": "chem_1121",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "Br[C-]([P+](c1ccccc1)(c2ccccc2)c3ccccc3)Br.BrBr",
      "BrC([P+](c1ccccc1)(c2ccccc2)c3ccccc3)Br.BrBr",
      "Br[C-]([P+](c1ccccc1)(c2ccccc2)c3ccccc3)Br.Br",
      "Br[C-](P(c1ccccc1)(c2ccccc2)c3ccccc3)Br.BrBr"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1122": {
    "pid": "chem_1122",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C#[C-]",
      "[*]C#C",
      "[*]C#[CH]",
      "[*]C=C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1123": {
    "pid": "chem_1123",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(CC1)[N-]C1=O.C[S+](Br)C",
      "O=C(CC1)[N-]C1=O.C[S+](Cl)C",
      "O=C(CC1)[N]C1=O.C[S+](Cl)C",
      "O=C(CC1)[N-]C1=O.C[S](Cl)C"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1124": {
    "pid": "chem_1124",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*C(*)O.C[S+](C)N1C(=O)CCC1=O.[Cl-]",
      "*C(*)O.CS(C)N1C(=O)CCC1=O.[Cl-]",
      "*C(*)O.C[S+](C)N1C(=O)CCC1=O.Cl",
      "*C(*)O.C[S+](C)N1C(=O)CCC1O.[Cl-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1125": {
    "pid": "chem_1125",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(CC1)NC1=O.[*]C([*])([H])O[S]",
      "CCN(CC)C",
      "[Cl-]",
      "O=C(CC1)NC1=O.[*]C([*])([H])O[S+](C)",
      "CCN(C)C",
      "[Cl-]",
      "O=C(CC1)NC1=O.[*]C([*])([H])O[S+](C)",
      "CCN(CC)C",
      "[Cl-]",
      "O=C(CC1)NC1=O.[*]C([*])([H])O[S+](C)",
      "CCCN(CC)C",
      "[Cl-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "F",
    "extraction": "F",
    "true_false": false
  },
  "chem_1126": {
    "pid": "chem_1126",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CS",
      "O=C([*])C",
      "CS",
      "O=C([*])[*]",
      "CS",
      "O=C(C)[*]",
      "CS",
      "O=C(O)[*]"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1127": {
    "pid": "chem_1127",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "S=C1NC=CC=C1.O=C(O)CCCO.c2(S[P+](c3ccccc3)(c4ccccc4)c5ccccc5)ccccn",
      "S=C1NC=CC=C1.O=C(O)CCCO.c2(S[P+](c3ccccc3)(c4ccccc4)c5ccccc5)ccccc2",
      "S=C1NC=CC=C1.O=C(O)CC",
      "Oc2(S[P+](c3ccccc3)(c4ccccc4)c5ccccc5)ccccn2",
      "S=C1NC=CC=C1.O=C(O)CCCO.c2(S[P+](c3ccccc3)(c4ccccc4)c5ccccc5)ccccn2"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1128": {
    "pid": "chem_1128",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C1O[C-](OC1[*])[P+](OC)(OC)O",
      "S=P(OC)(OC)O",
      "[*]C1OC(OC1[*])[P+](OC)(OC)O",
      "S=P(OC)(OC)OC",
      "[*]C1O[C-](OC1[*])[P+](OC)(OC)O.S=P(OC)(OC)OC",
      "[*]C1O[C-](OC1[*])[P+](OC)(OC)O",
      "S=P(OC)(OC)OC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1129": {
    "pid": "chem_1129",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "C1O[C-](S[P+](OC)(OC)OC)OCO1",
      "C1O[C-](S[P](OC)(OC)OC)OC1",
      "*C1O[C-](S[P+](OC)(OC)OC)OC1*",
      "C1O[C](S[P+](OC)(OC)OC)OC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1130": {
    "pid": "chem_1130",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "*C1OC2(OC1*)SP2(OC)(OC)O",
      "COPOC",
      "*C1OC2(OC1*)SP2(OC)(OC)O",
      "COP(OC)OC",
      "*C1OC2(OC1*)SP2(OC)(OC)O",
      "COP(O)OC",
      "*C1OC2(OC1*)SP2(O)(OC)O",
      "COP(OC)O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1131": {
    "pid": "chem_1131",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]/C([H])=C([H])\\[*].[O-]C([P+](OC)OC)=O",
      "[*]/C([H])=C([H])/[*].[O-]C([P+](OC)(OC)O)=O",
      "[*]/C([H])=C([H])\\[*].[O-]C([P+](OC)(OC)(OC))=O",
      "[*]/C([H])=C([H])\\[*].[O-]C([P+](OC)(OC)OC)=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "chem_1132": {
    "pid": "chem_1132",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC1(C)OOOC1(C)C",
      "CC1(C)OOOC1C",
      "CC1(C)OOC1(C)C",
      "CC1(C)OOO1(C)C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1133": {
    "pid": "chem_1133",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC(C)=O.CC(C)=O",
      "CC(C)=O.CC(C)=[O+]=O",
      "CC(C)=O.CC(C)(C)=O",
      "CC(C)=O.CC(C)=[O+][O-]"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1134": {
    "pid": "chem_1134",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC1(C)OOC1(C)C",
      "CC1(C)OCC(C)(C)O1",
      "CC1(C)OOC(C)(C)O1",
      "CC1(C)OOCC(C)(C)O1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1135": {
    "pid": "chem_1135",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(N=N=[N+])=O",
      "[*]C(N=[N+]=N)=O",
      "[*]C(N#[N+]=[N-])=O",
      "[*]C(N=[N+]=[N-])=O"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1136": {
    "pid": "chem_1136",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]N.O=C=O",
      "[*]N.O=C-O",
      "[*]N.C#O",
      "[*]N.C=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1137": {
    "pid": "chem_1137",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "Oc1ccc(OC([H])=O)cc1.[OH-]",
      "Oc1ccc(OC=O)cc1.[OH-]",
      "Oc1ccc(O[C-]=O)cc1.[OH-]",
      "Oc1ccc(O=CO)cc1.[OH-]"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1138": {
    "pid": "chem_1138",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "Oc1ccc(OC([H])([O-])O)cc1",
      "Oc1ccc(OC([O-])O)cc1",
      "Oc1ccc(OCO)cc1",
      "Oc1ccc(OC(O)O)cc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1139": {
    "pid": "chem_1139",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(C(O)=O)NC(C)=O.CC([O-])=O",
      "[*]C(C(=O)O)NC(C)=O.CC([O])=O",
      "[*]C(C(O)=O)N(C)C(C)=O.CC([O-])=O",
      "[*]C(C(O)=O)NC(C)=O.CC(O)=O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1140": {
    "pid": "chem_1140",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=NNCC1CCCC1",
      "O=NNC1CCC1",
      "O=NNCC1CCC1",
      "O=NNCC1CC(C)C1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1141": {
    "pid": "chem_1141",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "ON=NCC1CC(C)C1",
      "ON=NC1CC1C",
      "ON=NCC1CCC1",
      "ONN=CC1CCC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1142": {
    "pid": "chem_1142",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OCC1CCC1",
      "OCC2CCC2",
      "OCC1CCCC1",
      "OCC1CC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1143": {
    "pid": "chem_1143",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=N=NO",
      "O=NON=O",
      "O=N-N=O",
      "ON=N=O"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1144": {
    "pid": "chem_1144",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1(CNN)CCCCC1",
      "OC1(CCN=O)CCCCC1",
      "OC1(CNN=O)CCCCC1",
      "OC1(CN=N)CCCCC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1145": {
    "pid": "chem_1145",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC1(C[N+](C)#N)CCCCC1",
      "OC1(CN#N)CCCCC1",
      "OC1(C[N+]#N)CCCCC1",
      "OC1(C[N+]=N)CCCCC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1146": {
    "pid": "chem_1146",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O[C+]1CCCCCC1",
      "OC1CCCCC1",
      "O=C1CCCCCC1",
      "O[C-]1CCCCCC1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1147": {
    "pid": "chem_1147",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(OCCC)CCC/C=C([O-])\\OCC",
      "O=C(OCC)CC/C=C([O-])\\CCCC",
      "O=C(OCC)CCC/C=C(O)\\OCC",
      "O=C(OCC)CCC/C=C([O-])\\OCC"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1148": {
    "pid": "chem_1148",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C1C(CCC(OCC)=O)CCC1",
      "O=C1C(C(OCC)=O)CCC1",
      "O=C1C(C(OCC)=O)CC(C)C1",
      "O=C1C(C(OCC)=O)CCCC1"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1149": {
    "pid": "chem_1149",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(OCC)C1=C[C@@H](c2ccccc2)C[C@@H](OCC)N1S(=O)(c3ccccc3)=O",
      "O=C(OCC)C1=C[C@H](c2ccccc2)C[C@@H](OCC)N1S(=O)(c3ccccc3)=O",
      "O=C(OCC)C1=C[C@@H](c2ccccc2)C[C@H](OCC)N1S(=O)(c3ccccc3)=O",
      "O=C(OCC)C1=C[C@@H](c2ccccc2)C[C@@H](OCC)N1S(=O)(c3ccccc3)O"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1150": {
    "pid": "chem_1150",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[OH2+]C(Nc1ccccc1)c1ccccc1",
      "[OH2+]C(Nc1ccncc1)c1ccccc1",
      "[OH2+]C(Nc1ccccc1)c1ccccn1",
      "[OH2+]C(Nc1ccccn1)c1ccccc1"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1151": {
    "pid": "chem_1151",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H]/[N+](c1ccccc1)=C\\c2ccccc2.OC(C(O)=O)=C",
      "[H]/[N+](c1ccccc1)=C\\c2ccccc2.OC(O)=C(O)",
      "[H]/[N+](c1ccccc1)=C\\c2ccccc2.O=C(O)C(O)=C",
      "[H]/[N+](c1ccccc1)=C\\c2ccccc2.OC(C=O)=C"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1152": {
    "pid": "chem_1152",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[H][N+]1=C2C=CC=CC2([H])C(O)(C(O)=O)C(C)C1c3ccccc3.[B]",
      "[H][N+]1=C2C=CC=CC2([H])C(O)(C(O)=O)CC1c3ccccn3.[B]",
      "[H][N+]1=C2C=CC=CC2([H])C(O)(C(O)=O)CC1c3ccccc3.[B]",
      "[H][N+]1=C2C=CC=CC2([H])C(O)(C(O)=O)CC1c3ccccc3[B]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1153": {
    "pid": "chem_1153",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "O=C(O)C1=CC(c2ccccc2)Nc3ccccc13",
      "O=C(O)C1=C(C2=CC=CC=C2)Nc3ccccc13",
      "O=C(O)C1=CC(c2ccccc2)N=C3C=CC=CC13",
      "O=C(O)C1=CC(c2ccccc2)Nc3ccccc31"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1154": {
    "pid": "chem_1154",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "CC(C)c1cc2c(NC3(CC(C)CCC3)C=C2C)cc1.CC(C)c4ccc(N)cc4",
      "CC(C)c1cc2c(NC3(CC(C)CCC3)C=C2C)cc1.CC(C)c4ccc(Cl)cc4",
      "CC(C)c1cc2c(NC3(CC(C)CCC3)C=C2C)cc1.CC(C)c4ccc(C)cc4",
      "CC(C)c1cc2c(NC3(CC(C)CCC3)C=C2C)cc1.CC(C)c4ccc(O)cc4"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1155": {
    "pid": "chem_1155",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "OC12C(C2)(C(OC)=O)CCCC1",
      "[O]C12(C(C2)C(OC)=O)CCCC1",
      "[O]C12C(C2)(C(OC)=O)CCCC1",
      "[O]C12C(C2)(C(OC)=O)CCCCC1"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "chem_1156": {
    "pid": "chem_1156",
    "question": "An 'arrow-pushing' diagram is a common type of chemical image used to illustrate electron flow in mechanistic steps. Please choose the SMILES expression for the molecules(state) after the electron has been relocated, as depicted in the image. <image_1>",
    "options": [
      "[*]C(NC(C(OC(C)=O)=O)=O)=O.CC([O-])=O",
      "[*]C(NCC(OC(C)=O)=O)=O.CC([O-])O",
      "[*]C(NCC(OC(C)=O)=O)=O.CC([O-])=O",
      "[*]C(NCC(OC(C)=O)=O)=O.CC(=O)[O-]"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "new_annotated",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1158": {
    "pid": "chem_1158",
    "question": "The configuration at C-2 and C-3 of the compound given : <image_1>",
    "options": [
      "2R, 3S",
      "2S, 3R",
      "2S, 3S",
      "2R, 3R"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1159": {
    "pid": "chem_1159",
    "question": "<image_1> Which points correspond to a melting/freezing equilibrium?",
    "options": [
      "1 and 5",
      "1 and 3",
      "2 and 4",
      "6 and 7",
      "7 and 8"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1160": {
    "pid": "chem_1160",
    "question": "The maximum number of stereoisomers that could exist for the compound below ? <image_1>",
    "options": [
      "6",
      "8",
      "10",
      "16"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Knowledge-based counting",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1161": {
    "pid": "chem_1161",
    "question": "When an unsymmetrical alkene such as propene is treated with N-bromosuccinimide in aqueous dimethyl sulfoxide, the major product has the bromine atom bonded to the less highly substituted carbon atom. Is the following one Markovnikov or non-Markovnikov orientation? <image_1>",
    "options": [
      "Markovnikov orientation.",
      "Non-Markovnikov orientation.",
      "Non of the above."
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Reaction Simulation",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "chem_1162": {
    "pid": "chem_1162",
    "question": "<image_1> Figure 29-1: Titration curve. Which of the following matches the titration curve shown in Figure 29-1?",
    "options": [
      "A strong acid is titrated into a weak base.",
      "A strong acid is titrated into a strong base.",
      "A strong base is titrated into a weak acid.",
      "A strong base is titrated into a strong acid.",
      "A weak base is titrated into a weak acid."
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1163": {
    "pid": "chem_1163",
    "question": "Which of the following is the enantiomer of the compound shown below ? <image_1>",
    "options": [
      "<image_2>",
      "<image_3>",
      "<image_4>",
      "<image_5>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1164": {
    "pid": "chem_1164",
    "question": "Choose the word that best describes the geometric shape of the molecule or ion whose Lewis structure is shown below. <image_1>",
    "options": [
      "linear",
      "bent",
      "triangular planar",
      "tetrahedral",
      "square planar",
      "triangular pyramid",
      "triangular bipyramid",
      "octahedral",
      "T-shape"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1165": {
    "pid": "chem_1165",
    "question": "Among the following, the Newmann projections of meso-2, 3-butanediol are : <image_1>",
    "options": [
      "P, Q",
      "P, R",
      "R, S",
      "Q, S"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "chem_1168": {
    "pid": "chem_1168",
    "question": "<image_1> The structural formula of the glycinium cation is shown above. Arrows indicate the $pK_a$ values for the labile protons in the molecule. Which of the following is true about the geometry of the glycinium cation?",
    "options": [
      "The leftmost C atom and all the atoms directly bonded to it lie in the same plane. ",
      "Both C atoms and both O atoms lie in the same plane. ",
      "The N-C-C bond angle is 180\u00b0.",
      "The geometry around the N atom is planar."
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "chem_1170": {
    "pid": "chem_1170",
    "question": "In sets a - d, only one of the set is incorrect regarding basic strength. Select it :",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1171": {
    "pid": "chem_1171",
    "question": "<image_1> Dipole moments of given compound will be :",
    "options": [
      "(A) = 6.87D, (B) = 4.11D",
      "(A) = 4.11 D , (B) = 6.87 D",
      "(A) = 4.11 D , (B) = 4.11 D",
      "(A) = 6.87 D, (B) = 6.87 D"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "chem_1172": {
    "pid": "chem_1172",
    "question": "Among the following, the most stable isomer is :",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1174": {
    "pid": "chem_1174",
    "question": "<image_1> Which point corresponds to the critical point?",
    "options": [
      "1",
      "2",
      "5",
      "7",
      "9"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Graph Reasoning",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "chem_1175": {
    "pid": "chem_1175",
    "question": "How many molecules of the sweetener saccharin can be prepared from 30 $C$ atoms, 25 $H$ atoms, 12 $O$ atoms, 8 $S$ atoms, and 14 $N$ atoms? <image_1>",
    "options": [
      "3",
      "4",
      "5",
      "6"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Knowledge-based counting",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "chem_1176": {
    "pid": "chem_1176",
    "question": "<image_1> Which of the following orders of rotation barrier about the C = C bond, as indicated, is correct ?",
    "options": [
      "I > II > III",
      "III > II > I",
      "III > I > II",
      "II > I > III"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Chemistry",
    "task": "",
    "category": "Structure Recognition",
    "source": "MMMU",
    "type": "Multiple choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_1": {
    "pid": "coding_1",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_2": {
    "pid": "coding_2",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_3": {
    "pid": "coding_3",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_4": {
    "pid": "coding_4",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_5": {
    "pid": "coding_5",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_6": {
    "pid": "coding_6",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_7": {
    "pid": "coding_7",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_8": {
    "pid": "coding_8",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_9": {
    "pid": "coding_9",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_10": {
    "pid": "coding_10",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_11": {
    "pid": "coding_11",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_12": {
    "pid": "coding_12",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_13": {
    "pid": "coding_13",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_14": {
    "pid": "coding_14",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_15": {
    "pid": "coding_15",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_16": {
    "pid": "coding_16",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_17": {
    "pid": "coding_17",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_18": {
    "pid": "coding_18",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_19": {
    "pid": "coding_19",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_20": {
    "pid": "coding_20",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_21": {
    "pid": "coding_21",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_22": {
    "pid": "coding_22",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_23": {
    "pid": "coding_23",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_24": {
    "pid": "coding_24",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_25": {
    "pid": "coding_25",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_26": {
    "pid": "coding_26",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_27": {
    "pid": "coding_27",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_28": {
    "pid": "coding_28",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_29": {
    "pid": "coding_29",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_30": {
    "pid": "coding_30",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_31": {
    "pid": "coding_31",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_32": {
    "pid": "coding_32",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_33": {
    "pid": "coding_33",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_34": {
    "pid": "coding_34",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_35": {
    "pid": "coding_35",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_36": {
    "pid": "coding_36",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_37": {
    "pid": "coding_37",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_38": {
    "pid": "coding_38",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_39": {
    "pid": "coding_39",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_40": {
    "pid": "coding_40",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_41": {
    "pid": "coding_41",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_42": {
    "pid": "coding_42",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_43": {
    "pid": "coding_43",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_44": {
    "pid": "coding_44",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_45": {
    "pid": "coding_45",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_46": {
    "pid": "coding_46",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_47": {
    "pid": "coding_47",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_48": {
    "pid": "coding_48",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_49": {
    "pid": "coding_49",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_50": {
    "pid": "coding_50",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_51": {
    "pid": "coding_51",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_52": {
    "pid": "coding_52",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_53": {
    "pid": "coding_53",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_54": {
    "pid": "coding_54",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_55": {
    "pid": "coding_55",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_56": {
    "pid": "coding_56",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_57": {
    "pid": "coding_57",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_58": {
    "pid": "coding_58",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_59": {
    "pid": "coding_59",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_60": {
    "pid": "coding_60",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_61": {
    "pid": "coding_61",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_62": {
    "pid": "coding_62",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_63": {
    "pid": "coding_63",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_64": {
    "pid": "coding_64",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_65": {
    "pid": "coding_65",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_66": {
    "pid": "coding_66",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_67": {
    "pid": "coding_67",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_68": {
    "pid": "coding_68",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_69": {
    "pid": "coding_69",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_70": {
    "pid": "coding_70",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_71": {
    "pid": "coding_71",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_72": {
    "pid": "coding_72",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_73": {
    "pid": "coding_73",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_74": {
    "pid": "coding_74",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_75": {
    "pid": "coding_75",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_76": {
    "pid": "coding_76",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_77": {
    "pid": "coding_77",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_78": {
    "pid": "coding_78",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_79": {
    "pid": "coding_79",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_80": {
    "pid": "coding_80",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_81": {
    "pid": "coding_81",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_82": {
    "pid": "coding_82",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_83": {
    "pid": "coding_83",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_84": {
    "pid": "coding_84",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_85": {
    "pid": "coding_85",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_86": {
    "pid": "coding_86",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_87": {
    "pid": "coding_87",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_88": {
    "pid": "coding_88",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_89": {
    "pid": "coding_89",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_90": {
    "pid": "coding_90",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_91": {
    "pid": "coding_91",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_92": {
    "pid": "coding_92",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_93": {
    "pid": "coding_93",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_94": {
    "pid": "coding_94",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_95": {
    "pid": "coding_95",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_96": {
    "pid": "coding_96",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_97": {
    "pid": "coding_97",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_98": {
    "pid": "coding_98",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_99": {
    "pid": "coding_99",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_100": {
    "pid": "coding_100",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_101": {
    "pid": "coding_101",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_102": {
    "pid": "coding_102",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_103": {
    "pid": "coding_103",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_104": {
    "pid": "coding_104",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_105": {
    "pid": "coding_105",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_106": {
    "pid": "coding_106",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_107": {
    "pid": "coding_107",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_108": {
    "pid": "coding_108",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_109": {
    "pid": "coding_109",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_110": {
    "pid": "coding_110",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_111": {
    "pid": "coding_111",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_112": {
    "pid": "coding_112",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_113": {
    "pid": "coding_113",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_114": {
    "pid": "coding_114",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_115": {
    "pid": "coding_115",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_116": {
    "pid": "coding_116",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_117": {
    "pid": "coding_117",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_118": {
    "pid": "coding_118",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_119": {
    "pid": "coding_119",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_120": {
    "pid": "coding_120",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_121": {
    "pid": "coding_121",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_122": {
    "pid": "coding_122",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_123": {
    "pid": "coding_123",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_124": {
    "pid": "coding_124",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_125": {
    "pid": "coding_125",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_126": {
    "pid": "coding_126",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_127": {
    "pid": "coding_127",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_128": {
    "pid": "coding_128",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_129": {
    "pid": "coding_129",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_130": {
    "pid": "coding_130",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_131": {
    "pid": "coding_131",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_132": {
    "pid": "coding_132",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_133": {
    "pid": "coding_133",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_134": {
    "pid": "coding_134",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_135": {
    "pid": "coding_135",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_136": {
    "pid": "coding_136",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_137": {
    "pid": "coding_137",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_138": {
    "pid": "coding_138",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_139": {
    "pid": "coding_139",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_140": {
    "pid": "coding_140",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_141": {
    "pid": "coding_141",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_142": {
    "pid": "coding_142",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_143": {
    "pid": "coding_143",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_144": {
    "pid": "coding_144",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_145": {
    "pid": "coding_145",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_146": {
    "pid": "coding_146",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_147": {
    "pid": "coding_147",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_148": {
    "pid": "coding_148",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_149": {
    "pid": "coding_149",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_150": {
    "pid": "coding_150",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_151": {
    "pid": "coding_151",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_152": {
    "pid": "coding_152",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_153": {
    "pid": "coding_153",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_154": {
    "pid": "coding_154",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_155": {
    "pid": "coding_155",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_156": {
    "pid": "coding_156",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_157": {
    "pid": "coding_157",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_158": {
    "pid": "coding_158",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_159": {
    "pid": "coding_159",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_160": {
    "pid": "coding_160",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_161": {
    "pid": "coding_161",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_162": {
    "pid": "coding_162",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_163": {
    "pid": "coding_163",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_164": {
    "pid": "coding_164",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_165": {
    "pid": "coding_165",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_166": {
    "pid": "coding_166",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_167": {
    "pid": "coding_167",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_168": {
    "pid": "coding_168",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_169": {
    "pid": "coding_169",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_170": {
    "pid": "coding_170",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_171": {
    "pid": "coding_171",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_172": {
    "pid": "coding_172",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_173": {
    "pid": "coding_173",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_174": {
    "pid": "coding_174",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_175": {
    "pid": "coding_175",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_176": {
    "pid": "coding_176",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_177": {
    "pid": "coding_177",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_178": {
    "pid": "coding_178",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_179": {
    "pid": "coding_179",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_180": {
    "pid": "coding_180",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_181": {
    "pid": "coding_181",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_182": {
    "pid": "coding_182",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_183": {
    "pid": "coding_183",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_184": {
    "pid": "coding_184",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_185": {
    "pid": "coding_185",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_186": {
    "pid": "coding_186",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_187": {
    "pid": "coding_187",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_188": {
    "pid": "coding_188",
    "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()",
    "options": [
      "<image_1>",
      "<image_2>",
      "<image_3>",
      "<image_4>"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Code Choose Vis",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_189": {
    "pid": "coding_189",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_190": {
    "pid": "coding_190",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_191": {
    "pid": "coding_191",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_192": {
    "pid": "coding_192",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_193": {
    "pid": "coding_193",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_194": {
    "pid": "coding_194",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_195": {
    "pid": "coding_195",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_196": {
    "pid": "coding_196",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_197": {
    "pid": "coding_197",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_198": {
    "pid": "coding_198",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_199": {
    "pid": "coding_199",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_200": {
    "pid": "coding_200",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_201": {
    "pid": "coding_201",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_202": {
    "pid": "coding_202",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_203": {
    "pid": "coding_203",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_204": {
    "pid": "coding_204",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_205": {
    "pid": "coding_205",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_206": {
    "pid": "coding_206",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_207": {
    "pid": "coding_207",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_208": {
    "pid": "coding_208",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_209": {
    "pid": "coding_209",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_210": {
    "pid": "coding_210",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_211": {
    "pid": "coding_211",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_212": {
    "pid": "coding_212",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_213": {
    "pid": "coding_213",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_214": {
    "pid": "coding_214",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_215": {
    "pid": "coding_215",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_216": {
    "pid": "coding_216",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_217": {
    "pid": "coding_217",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_218": {
    "pid": "coding_218",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_219": {
    "pid": "coding_219",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_220": {
    "pid": "coding_220",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_221": {
    "pid": "coding_221",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_222": {
    "pid": "coding_222",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_223": {
    "pid": "coding_223",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_224": {
    "pid": "coding_224",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_225": {
    "pid": "coding_225",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_226": {
    "pid": "coding_226",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_227": {
    "pid": "coding_227",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_228": {
    "pid": "coding_228",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_229": {
    "pid": "coding_229",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_230": {
    "pid": "coding_230",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_231": {
    "pid": "coding_231",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_232": {
    "pid": "coding_232",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_233": {
    "pid": "coding_233",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_234": {
    "pid": "coding_234",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_235": {
    "pid": "coding_235",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_236": {
    "pid": "coding_236",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_237": {
    "pid": "coding_237",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_238": {
    "pid": "coding_238",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_239": {
    "pid": "coding_239",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_240": {
    "pid": "coding_240",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_241": {
    "pid": "coding_241",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_242": {
    "pid": "coding_242",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_243": {
    "pid": "coding_243",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_244": {
    "pid": "coding_244",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_245": {
    "pid": "coding_245",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_246": {
    "pid": "coding_246",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_247": {
    "pid": "coding_247",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_248": {
    "pid": "coding_248",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_249": {
    "pid": "coding_249",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_250": {
    "pid": "coding_250",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_251": {
    "pid": "coding_251",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_252": {
    "pid": "coding_252",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_253": {
    "pid": "coding_253",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_254": {
    "pid": "coding_254",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_255": {
    "pid": "coding_255",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_256": {
    "pid": "coding_256",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_257": {
    "pid": "coding_257",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_258": {
    "pid": "coding_258",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_259": {
    "pid": "coding_259",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_260": {
    "pid": "coding_260",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_261": {
    "pid": "coding_261",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_262": {
    "pid": "coding_262",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_263": {
    "pid": "coding_263",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_264": {
    "pid": "coding_264",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_265": {
    "pid": "coding_265",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_266": {
    "pid": "coding_266",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_267": {
    "pid": "coding_267",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_268": {
    "pid": "coding_268",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_269": {
    "pid": "coding_269",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_270": {
    "pid": "coding_270",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_271": {
    "pid": "coding_271",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_272": {
    "pid": "coding_272",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_273": {
    "pid": "coding_273",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_274": {
    "pid": "coding_274",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_275": {
    "pid": "coding_275",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_276": {
    "pid": "coding_276",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_277": {
    "pid": "coding_277",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_278": {
    "pid": "coding_278",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_279": {
    "pid": "coding_279",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_280": {
    "pid": "coding_280",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_281": {
    "pid": "coding_281",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_282": {
    "pid": "coding_282",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_283": {
    "pid": "coding_283",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_284": {
    "pid": "coding_284",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_285": {
    "pid": "coding_285",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_286": {
    "pid": "coding_286",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_287": {
    "pid": "coding_287",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_288": {
    "pid": "coding_288",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_289": {
    "pid": "coding_289",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_290": {
    "pid": "coding_290",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_291": {
    "pid": "coding_291",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_292": {
    "pid": "coding_292",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_293": {
    "pid": "coding_293",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_294": {
    "pid": "coding_294",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_295": {
    "pid": "coding_295",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_296": {
    "pid": "coding_296",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_297": {
    "pid": "coding_297",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_298": {
    "pid": "coding_298",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_299": {
    "pid": "coding_299",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_300": {
    "pid": "coding_300",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_301": {
    "pid": "coding_301",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_302": {
    "pid": "coding_302",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_303": {
    "pid": "coding_303",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_304": {
    "pid": "coding_304",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_305": {
    "pid": "coding_305",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_306": {
    "pid": "coding_306",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_307": {
    "pid": "coding_307",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_308": {
    "pid": "coding_308",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_309": {
    "pid": "coding_309",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_310": {
    "pid": "coding_310",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_311": {
    "pid": "coding_311",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_312": {
    "pid": "coding_312",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_313": {
    "pid": "coding_313",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_314": {
    "pid": "coding_314",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_315": {
    "pid": "coding_315",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_316": {
    "pid": "coding_316",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_317": {
    "pid": "coding_317",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_318": {
    "pid": "coding_318",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_319": {
    "pid": "coding_319",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_320": {
    "pid": "coding_320",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_321": {
    "pid": "coding_321",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_322": {
    "pid": "coding_322",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_323": {
    "pid": "coding_323",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_324": {
    "pid": "coding_324",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_325": {
    "pid": "coding_325",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_326": {
    "pid": "coding_326",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_327": {
    "pid": "coding_327",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_328": {
    "pid": "coding_328",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_329": {
    "pid": "coding_329",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_330": {
    "pid": "coding_330",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_331": {
    "pid": "coding_331",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_332": {
    "pid": "coding_332",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_333": {
    "pid": "coding_333",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_334": {
    "pid": "coding_334",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_335": {
    "pid": "coding_335",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_336": {
    "pid": "coding_336",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_337": {
    "pid": "coding_337",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_338": {
    "pid": "coding_338",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_339": {
    "pid": "coding_339",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_340": {
    "pid": "coding_340",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_341": {
    "pid": "coding_341",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_342": {
    "pid": "coding_342",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_343": {
    "pid": "coding_343",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_344": {
    "pid": "coding_344",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_345": {
    "pid": "coding_345",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_346": {
    "pid": "coding_346",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_347": {
    "pid": "coding_347",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_348": {
    "pid": "coding_348",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()",
      "import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()",
      "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_349": {
    "pid": "coding_349",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_350": {
    "pid": "coding_350",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_351": {
    "pid": "coding_351",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_352": {
    "pid": "coding_352",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_353": {
    "pid": "coding_353",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()",
      "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_354": {
    "pid": "coding_354",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()",
      "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_355": {
    "pid": "coding_355",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_356": {
    "pid": "coding_356",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()",
      "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_357": {
    "pid": "coding_357",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_358": {
    "pid": "coding_358",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_359": {
    "pid": "coding_359",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_360": {
    "pid": "coding_360",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_361": {
    "pid": "coding_361",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_362": {
    "pid": "coding_362",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_363": {
    "pid": "coding_363",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_364": {
    "pid": "coding_364",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_365": {
    "pid": "coding_365",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_366": {
    "pid": "coding_366",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_367": {
    "pid": "coding_367",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_368": {
    "pid": "coding_368",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_369": {
    "pid": "coding_369",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_370": {
    "pid": "coding_370",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_371": {
    "pid": "coding_371",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_372": {
    "pid": "coding_372",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()",
      "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_373": {
    "pid": "coding_373",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_374": {
    "pid": "coding_374",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_375": {
    "pid": "coding_375",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_376": {
    "pid": "coding_376",
    "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).",
    "options": [
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()",
      "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Vis Choose Code",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_377": {
    "pid": "coding_377",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(1000)\n5\ty = np.random.rand(1000) * 2 - 1\n6\tlabels = np.random.choice([0, 1], size=1000)\n7\tplt.figure(figsize=(8, 8))\n8\tplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n9\tplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n10\tplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\n11\tplt.axvline(0, color='black', linestyle=':', linewidth=1)\n12\tplt.xlabel(r'$P(F_{i+1} | F_i)$')\n13\tplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n14\tplt.legend(title='Boundary')\n15\tplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\n16\tplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\n17\tplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n18\tplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n19\tplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n20\tplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n21\tplt.xlim(-0.1, 1.1)\n22\tplt.ylim(-1.1, 1.1)\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()",
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')",
      "Insert the following between lines 22-23:\nplt.tick_params(axis='both', direction='in')",
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='inout')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_378": {
    "pid": "coding_378",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.gridspec import GridSpec\n5\tx = np.random.rand(1000)\n6\ty = np.random.rand(1000) * 2 - 1\n7\tlabels = np.random.choice([0, 1], size=1000)\n8\tfig = plt.figure(figsize=(8, 8))\n9\tgs = GridSpec(4, 4, figure=fig)\n10\tax_main = fig.add_subplot(gs[1:4, 0:3])\n11\tax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n12\tax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n13\tax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\n14\tax_main.axvline(0, color='black', linestyle=':', linewidth=1)\n15\tax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\n16\tax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n17\tax_main.legend(title='Boundary')\n18\tax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n19\tax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n20\tax_main.set_xlim(-0.1, 1.1)\n21\tax_main.set_ylim(-1.1, 1.1)\n22\tax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\n23\tax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\n24\tax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\n25\tax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\n26\tax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n27\tax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n28\tax_histx.label_outer()\n29\tax_histy.label_outer()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)",
      "Replace lines 3-29 with:\nfrom matplotlib.gridspec import GridSpec\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='in')",
      "Insert the following between lines 29-30:\nax_histy.tick_params(axis='both', direction='in')",
      "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_379": {
    "pid": "coding_379",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.patches as mpatches\n4\tnp.random.seed(0)\n5\tcategories = [\n6\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n7\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n8\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n9\t]\n10\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n11\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n12\tdata = np.random.randint(50, 150, (8, 5, 5))\n13\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n14\taxes = axes.flatten()\n15\tfor i, ax in enumerate(axes[:-1]):\n16\t    for j, level in enumerate(levels):\n17\t        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n18\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n19\t    ax.set_title(categories[i])\n20\t    ax.set_xlim(0, 500)\n21\tfig.delaxes(axes[-1])\n22\thandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\n23\tfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace line 23 with:\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_380": {
    "pid": "coding_380",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tcategories = [\n5\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n6\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n7\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n8\t]\n9\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n10\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n11\tdata = np.random.randint(50, 150, (8, 5, 5))\n12\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n13\taxes = axes.flatten()\n14\tfor i, ax in enumerate(axes[:-1]):\n15\t    for j, level in enumerate(levels):\n16\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n17\t        ax.set_title(categories[i])\n18\t        ax.set_xlim(0, 500)\n19\tfig.delaxes(axes[-1])\n20\tfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n21\tplt.tight_layout()\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 16 with:\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')",
      "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 11-21 with:\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.15)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_381": {
    "pid": "coding_381",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle='--', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle='--', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)",
      "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')",
      "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)",
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_382": {
    "pid": "coding_382",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle=':', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle=':', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)",
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)",
      "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')",
      "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_383": {
    "pid": "coding_383",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tk = np.linspace(0, 20, 100)\n5\tA = np.linspace(0, 20, 100)\n6\tK, A = np.meshgrid(k, A)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\n11\tax.set_xlabel('k')\n12\tax.set_ylabel('|A|')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 4-12 with:\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 10-13 with:\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_384": {
    "pid": "coding_384",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tA = np.linspace(0, 20, 100)\n5\tk = np.linspace(0, 20, 100)\n6\tA, k = np.meshgrid(A, k)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\n11\tax.set_xlabel(r'$k$')\n12\tax.set_ylabel(r'$|A|$')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))",
      "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)",
      "Replace lines 4-13 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')",
      "Replace lines 4-12 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_385": {
    "pid": "coding_385",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor ax, crop in zip(axes.flatten(), crops):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    ax.legend()\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')",
      "Replace line 18 with:\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)",
      "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))",
      "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_386": {
    "pid": "coding_386",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    if index == 2:\n19\t        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)",
      "Replace line 18 with:\n    if index == 3:",
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()",
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_387": {
    "pid": "coding_387",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-.o', label='AD')",
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_388": {
    "pid": "coding_388",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, label='IWCV')",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_389": {
    "pid": "coding_389",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()",
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')",
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=3)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=3)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=3)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=3)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=3)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=3)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=3)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=3)",
      "Replace line 24 with:\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_390": {
    "pid": "coding_390",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-24 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()",
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=5)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=5)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=5)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=5)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=5)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=5)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=5)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=5)",
      "Replace line 24 with:\nplt.legend()",
      "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_391": {
    "pid": "coding_391",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tx1 = np.random.normal(0.85, 0.1, 100)\n7\ty1 = x1 + np.random.normal(0, 0.1, 100)\n8\tx2 = np.random.normal(0.9, 0.1, 100)\n9\ty2 = x2 + np.random.normal(0, 0.1, 100)\n10\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n11\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n13\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n14\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n15\taxes[0].axhline(0.85, color='red', linestyle='--')\n16\taxes[0].axhline(0.55, color='red', linestyle='--')\n17\taxes[0].set_title('BO03 trial')\n18\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n19\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n20\taxes[1].axhline(0.85, color='red', linestyle='--')\n21\taxes[1].axhline(0.55, color='red', linestyle='--')\n22\taxes[1].set_title('BO06 trial')\n23\tplt.tight_layout()\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-21 with:\naxes[0].axhline(0.55, color='red', linestyle='-.')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='-.')",
      "Replace lines 6-22 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)",
      "Replace lines 6-18 with:\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)",
      "Replace lines 6-18 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_392": {
    "pid": "coding_392",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tsns.set(style=\"whitegrid\")\n7\tx1 = np.random.normal(0.85, 0.1, 100)\n8\ty1 = x1 + np.random.normal(0, 0.1, 100)\n9\tx2 = np.random.normal(0.9, 0.1, 100)\n10\ty2 = x2 + np.random.normal(0, 0.1, 100)\n11\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n13\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n14\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n15\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n16\taxes[0].axhline(0.85, color='red', linestyle='--')\n17\taxes[0].axhline(0.55, color='red', linestyle='--')\n18\taxes[0].set_title('BO03 trial')\n19\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n20\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n21\taxes[1].axhline(0.85, color='red', linestyle='--')\n22\taxes[1].axhline(0.55, color='red', linestyle='--')\n23\taxes[1].set_title('BO06 trial')\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 6 with:\nsns.set(style=\"ggplot2\")",
      "Replace lines 6-23 with:\nsns.set(style=\"classic\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)",
      "Replace lines 6-19 with:\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})",
      "Replace lines 6-23 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_393": {
    "pid": "coding_393",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n7\t    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n8\t    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n9\t    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n11\t    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n12\t}\n13\tfig, ax = plt.subplots(figsize=(10, 6))\n14\tax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\n15\tax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\n16\tax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\n17\tax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\n18\tax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\n19\tax.set_xlabel('Percentage')\n20\tax.set_xlim(-100, 100)\n21\tax.set_xticks([-100, -50, 0, 50, 100])\n22\tax.set_xticklabels([100, 50, 0, 50, 100])\n23\tax.axvline(0, color='black', linewidth=0.8)\n24\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n25\tplt.tight_layout()\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-24 with:\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')",
      "Replace lines 3-24 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_394": {
    "pid": "coding_394",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport pandas as pd\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n8\t    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n9\t    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n11\t    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n12\t    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n13\t}\n14\tfig, ax = plt.subplots(figsize=(10, 6))\n15\tax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\n16\tax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\n17\tax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\n18\tax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\n19\tax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\n20\tax.set_xlabel('Percentage')\n21\tax.set_xlim(-100, 100)\n22\tax.set_xticks([-100, -50, 0, 50, 100])\n23\tax.set_xticklabels([100, 50, 0, 50, 100])\n24\tax.axvline(0, color='black', linewidth=0.8)\n25\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n26\tplt.tight_layout()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-25 with:\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace line 5 with:\nsns.set(style=\"classic\")",
      "Replace lines 3-25 with:\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace lines 3-19 with:\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_395": {
    "pid": "coding_395",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)",
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace lines 11-17 with:\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))",
      "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_396": {
    "pid": "coding_396",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"classic\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tax.set_xlim(-1, 1)\n19\tax.set_ylim(-1, 1)\n20\tax.set_xticks(np.linspace(-1, 1, 5))\n21\tax.set_yticks(np.linspace(-1, 1, 5))\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-21 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)",
      "Replace lines 5-21 with:\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)",
      "Replace lines 5-21 with:\nsns.set(style=\"white\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)",
      "Replace lines 5-17 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_397": {
    "pid": "coding_397",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)",
      "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_398": {
    "pid": "coding_398",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)",
      "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)",
      "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_399": {
    "pid": "coding_399",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\n32\tax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\n33\tax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\n34\tax.tick_params(which=\"minor\", size=0)\n35\tcbar = ax.figure.colorbar(cax, ax=ax)\n36\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 31-34 with:\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)",
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])",
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])",
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_400": {
    "pid": "coding_400",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\n32\tcbar = ax.figure.colorbar(cax, ax=ax)\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 30-31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)",
      "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)",
      "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])",
      "Replace line 31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_401": {
    "pid": "coding_401",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport seaborn as sns\n3\timport pandas as pd\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n7\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n8\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n9\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n10\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n11\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n12\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n13\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n14\t}\n15\tdf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n16\t                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\n17\tcorrelation_matrix = df.corr()\n18\tplt.figure(figsize=(8, 8))\n19\tsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n20\t            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n21\t            mask=None, annot_kws={\"size\": 12},\n22\t            xticklabels=df.columns, yticklabels=df.columns)\n23\tfor i in range(len(correlation_matrix.columns)):\n24\t    for j in range(len(correlation_matrix.columns)):\n25\t        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n26\t                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n27\t                                        alpha=0.6))\n28\tplt.xticks(rotation=45, ha='right', color=\"red\")\n29\tplt.yticks(rotation=0, color=\"red\")\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()",
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()",
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()",
      "Replace lines 2-29 with:\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_402": {
    "pid": "coding_402",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport numpy as np\n3\timport matplotlib.pyplot as plt\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n8\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n9\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n10\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n11\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n12\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n13\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n14\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n15\t}\n16\tdf = pd.DataFrame(data, index=[\n17\t    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n18\t    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n19\t])\n20\tfig, ax = plt.subplots(figsize=(10, 8))\n21\tcmap = sns.diverging_palette(220, 10, as_cmap=True)\n22\tnorm = plt.Normalize(vmin=-1, vmax=1)\n23\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n24\tsm.set_array([])\n25\tfor i, col in enumerate(df.columns):\n26\t    for j, row in enumerate(df.index):\n27\t        corr = df.at[row, col]\n28\t        ax.scatter(\n29\t            i + 0.5, j + 0.5,\n30\t            s=abs(corr) * 1500,\n31\t            color=cmap(norm(corr)),\n32\t            alpha=0.9,\n33\t            edgecolors='none'\n34\t        )\n35\tax.set_xticks(np.arange(0.5, len(df.columns), 1))\n36\tax.set_xticklabels(df.columns, rotation=90, color=\"red\")\n37\tax.set_yticks(np.arange(0.5, len(df.index), 1))\n38\tax.set_yticklabels(df.index, rotation=0, color=\"red\")\n39\tax.set_xlim(0, len(df.columns))\n40\tax.set_ylim(0, len(df.index))\n41\tcbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\n42\tcbar.set_ticks(np.linspace(-1, 1, 5))\n43\tcbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\n44\tax.invert_yaxis()\n45\tplt.tight_layout()\n46\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")",
      "Replace line 29 with:\n            i, j,",
      "Replace lines 1-44 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)",
      "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"whitegrid\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(9, 9))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=0.5, linecolor='gray', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 10},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.5))\nplt.xticks(ha='right', color=\"darkred\")\nplt.yticks(rotation=0, color=\"darkred\")"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_403": {
    "pid": "coding_403",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\tfig, ax = plt.subplots(figsize=(10, 3))\n11\ttask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n12\tprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\n13\tfor i, color in enumerate(colors):\n14\t    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\n15\tax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\n16\tax.set_xlabel('Time')\n17\tax.set_ylabel('Progress')\n18\tax.set_xticks([])\n19\tax.set_yticks(np.arange(0.5, 10.5, 1))\n20\tax.set_yticklabels(tasks)\n21\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n22\tplt.tight_layout()\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-20 with:\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)",
      "Replace lines 11-20 with:\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))",
      "Replace lines 10-20 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)",
      "Replace lines 4-21 with:\nsns.set(style=\"white\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)\nplt.legend(tasks, loc='lower left', bbox_to_anchor=(1, 0.5))"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_404": {
    "pid": "coding_404",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\ttask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n11\tprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\n12\ttask_blocks = [\n13\t    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n14\t    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n15\t    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n16\t    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n17\t]\n18\tfig, ax = plt.subplots(figsize=(10, 3))\n19\tfor i, row in enumerate(task_blocks):\n20\t    for j, task_index in enumerate(row):\n21\t        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\n22\tax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\n23\tax.set_xlabel('Time')\n24\tax.set_ylabel('Progress')\n25\tax.set_yticks(np.arange(0, 5, 1))\n26\tax.set_xticks([])\n27\tax.grid(False)\n28\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n29\tplt.tight_layout()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-22 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)",
      "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))",
      "Replace lines 10-28 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)\nplt.legend(tasks)",
      "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_405": {
    "pid": "coding_405",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\n11\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)",
      "Insert the following between lines 10-11:\ng.plot_marginals(sns.kdeplot, fill=True)",
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)",
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_joint.grid(True)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_406": {
    "pid": "coding_406",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\n11\tg.ax_marg_x.grid(True)\n12\tg.ax_marg_y.grid(True)\n13\tg.ax_joint.grid(True)\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Remove lines 11-12",
      "Remove line 6",
      "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')",
      "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_407": {
    "pid": "coding_407",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')",
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 16-19 with:\nplt.fill_between(remaining_inventory, y1, y2, color='blue')\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Green stars')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_408": {
    "pid": "coding_408",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='o', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')",
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_409": {
    "pid": "coding_409",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')",
      "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')",
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace line 17 with:\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_410": {
    "pid": "coding_410",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace lines 15-17 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')",
      "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')",
      "Replace lines 14-15 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_411": {
    "pid": "coding_411",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\")\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tax_inset.legend(fontsize=6)\n26\tax.legend()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()",
      "Replace lines 14-25 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)",
      "Replace line 14 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')",
      "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_412": {
    "pid": "coding_412",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-24 with:\nax.plot(utilization, rate_before, label='Compound (before)', color='red', linestyle='--')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple', linestyle='-.')\nax.set_xlabel('Utilization')\nax.set_ylabel('Rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nax.legend(loc='upper left')\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"35%\", height=\"35%\", loc='upper right')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)', linestyle=':')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)', linestyle='--')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.3, 0.6, 0.9])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('Utilization', fontsize=8)\nax_inset.set_ylabel('Rate', fontsize=8)\nax_inset.legend(fontsize=6)",
      "Insert the following between lines 24-25:\nax_inset.legend(fontsize=6)\nax.legend()",
      "Insert the following between lines 24-25:\nax.legend()",
      "Insert the following between lines 24-25:\nax_inset.legend()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_413": {
    "pid": "coding_413",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (1, 1))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])",
      "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_414": {
    "pid": "coding_414",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (3, 10, 1, 10))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_415": {
    "pid": "coding_415",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\n5\terror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\n6\tplt.figure(figsize=(8, 6))\n7\tcolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\n8\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\n9\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n10\tplt.ylabel('Intersite Distance', fontsize=12)\n11\tplt.ylim(0, 0.6)\n12\tplt.xticks(rotation=45)\n13\tplt.tight_layout()\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))",
      "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))",
      "Replace lines 6-8 with:\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)",
      "Replace line 8 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_416": {
    "pid": "coding_416",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\n5\terror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\n6\tplt.figure(figsize=(8, 6))\n7\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\n8\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n9\tplt.ylabel('Intersite Distance', fontsize=12)\n10\tplt.ylim(0, 0.6)\n11\tplt.xticks(rotation=45)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)",
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)",
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)",
      "Replace line 7 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_417": {
    "pid": "coding_417",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=0, azim=0)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 21 with:\nax.view_init(elev=90, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=180, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=90, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=90)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_418": {
    "pid": "coding_418",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=90, azim=90)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 21 with:\nax.view_init(elev=90, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=180, azim=90)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_419": {
    "pid": "coding_419",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdx = dy = np.ones_like(zpos) * 0.4\n13\tdz = detected_fraction_vals.flatten()\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\n17\tsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\n18\tax.set_xlabel('Log. Negativity')\n19\tax.set_ylabel('No. Measurements')\n20\tax.set_zlabel('Detected Fraction')\n21\tlevels = np.linspace(dz.min(), dz.max(), 8)\n22\tcmap = plt.get_cmap('viridis')\n23\tnorm = colors.BoundaryNorm(levels, cmap.N)\n24\tfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-17 with:\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)",
      "Replace lines 12-24 with:\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)",
      "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_420": {
    "pid": "coding_420",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdz = detected_fraction_vals.flatten()\n13\tdx = dy = 0.3\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tlevels = np.linspace(dz.min(), dz.max(), 8)\n17\tcmap = plt.get_cmap('viridis')\n18\tnorm = colors.BoundaryNorm(levels, cmap.N)\n19\tcolors_discrete = cmap(norm(dz))\n20\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\n21\tax.set_xlabel('Log. Negativity')\n22\tax.set_ylabel('No. Measurements')\n23\tax.set_zlabel('Detected Fraction')\n24\tmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n25\tmappable.set_array(dz)\n26\tfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)",
      "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_421": {
    "pid": "coding_421",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2])\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\nax2 = fig.add_subplot(gs[2], sharex=ax1)",
      "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()",
      "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')",
      "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_422": {
    "pid": "coding_422",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2], sharex=ax1)\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()",
      "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')",
      "Replace line 14 with:\nax2 = fig.add_subplot(gs[2])",
      "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_423": {
    "pid": "coding_423",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure()\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n13\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n14\tax.set_xlabel(r'$\\epsilon_1$')\n15\tax.set_ylabel(r'$\\epsilon_2$')\n16\tax.set_zlabel('Infidelity')\n17\tax.set_zscale('log')\n18\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n19\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)",
      "Replace lines 10-19 with:\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n                color='magenta', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n                color='black', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)",
      "Replace lines 12-13 with:\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)",
      "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_424": {
    "pid": "coding_424",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure(figsize=(10, 8))\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n13\t                color='magenta', alpha=1,\n14\t                rstride=100, cstride=100,\n15\t                edgecolor='k', linewidth=0.5)\n16\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n17\t                color='black', alpha=1,\n18\t                rstride=100, cstride=100,\n19\t                edgecolor='k', linewidth=0.5)\n20\tax.set_xlabel(r'$\\epsilon_1$')\n21\tax.set_ylabel(r'$\\epsilon_2$')\n22\tax.set_zlabel('Infidelity')\n23\tax.set_zscale('log')\n24\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n25\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n26\tax.xaxis.pane.fill = False\n27\tax.yaxis.pane.fill = False\n28\tax.zaxis.pane.fill = False\n29\tax.xaxis.pane.set_edgecolor('black')\n30\tax.yaxis.pane.set_edgecolor('black')\n31\tax.zaxis.pane.set_edgecolor('black')\n32\tax.xaxis.pane.set_linewidth(1.0)\n33\tax.yaxis.pane.set_linewidth(1.0)\n34\tax.zaxis.pane.set_linewidth(1.0)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_425": {
    "pid": "coding_425",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-11 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)",
      "Replace line 9 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),",
      "Replace line 11 with:\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)",
      "Replace lines 11-20 with:\nax.fill_between([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 20))\nax.spines['bottom'].set_position(('outward', 20))"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_426": {
    "pid": "coding_426",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-10 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))",
      "Replace lines 9-11 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)",
      "Replace lines 2-20 with:\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(8, 5))\ny_positions = [4, 3, 2, 1, 0]\nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 4.5], -0.5, 1.5, color=\"gray\", alpha=0.3)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(-1, 30)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 15))\nax.spines['bottom'].set_position(('outward', 15))\nplt.tight_layout()",
      "Replace line 11 with:\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_427": {
    "pid": "coding_427",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-23 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)",
      "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Replace lines 13-23 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_428": {
    "pid": "coding_428",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Remove line 23",
      "Replace lines 13-14 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)",
      "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_429": {
    "pid": "coding_429",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 2))\n7\tax.set_yticks(np.arange(0, 11, 2))\n8\tax.grid(True, which='major', color='red', linewidth=2)\n9\tax.set_xticks(np.arange(2, 9, 1))\n10\tax.set_yticks(np.arange(2, 9, 1))\n11\tax.grid(True, which='minor', color='blue', linewidth=2)\n12\tmain_diag = np.linspace(0, 10, 100)\n13\tax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\n14\tax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\n15\tsolution_x = np.linspace(0, 10, 100)\n16\tsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\n17\tax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\n18\tax.set_xlabel('Query', fontsize=12)\n19\tax.set_ylabel('Reference', fontsize=12)\n20\tax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n21\tax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\n22\tax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)",
      "Replace lines 6-22 with:\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 8-11 with:\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)",
      "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_430": {
    "pid": "coding_430",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 1))\n7\tax.set_yticks(np.arange(0, 11, 1))\n8\tax.grid(True, color=\"blue\", linewidth=2)\n9\tmain_diag = np.linspace(0, 10, 100)\n10\tax.plot(main_diag, main_diag, color='lightgray', zorder=1)\n11\tax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\n12\tsolution_x = np.linspace(0, 10, 100)\n13\tsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\n14\tax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\n15\tax.set_xlabel('Query', fontsize=12)\n16\tax.set_ylabel('Reference', fontsize=12)\n17\tax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n18\tax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\n19\tax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_431": {
    "pid": "coding_431",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n12\ttheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\n13\twidth = 2 * np.pi / len(data[0])\n14\touter_radius = 1.5\n15\tsize = 0.3\n16\tfor i, ring_data in enumerate(data):\n17\t    radii = np.array(ring_data)\n18\t    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n19\t    outer_radius -= size\n20\tax.set_aspect('equal', 'box')\n21\tax.set_xticks([])\n22\tax.set_yticks([])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-18 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)",
      "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")",
      "Replace line 12 with:\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice",
      "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_432": {
    "pid": "coding_432",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6,6))\n12\tsize = 0.3\n13\touter_radius = 1.5\n14\tfor i in range(len(data)):\n15\t    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n16\t    outer_radius -= size\n17\tax.set(aspect=\"equal\")\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])",
      "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])",
      "Replace line 15 with:\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))",
      "Replace lines 3-17 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_433": {
    "pid": "coding_433",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\tx = np.linspace(0, 1, 50)\n5\ty = np.linspace(0, np.sqrt(3)/2, 50)\n6\tX, Y = np.meshgrid(x, y)\n7\tmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\n8\tX_tri = X[mask]\n9\tY_tri = Y[mask]\n10\ttriang = tri.Triangulation(X_tri, Y_tri)\n11\tZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\n12\tplt.tricontourf(triang, Z, levels=12, cmap='viridis')\n13\tcorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\n14\ttriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\n15\trefiner = tri.UniformTriRefiner(triangle)\n16\ttrimesh = refiner.refine_triangulation(subdiv=4)\n17\tplt.triplot(trimesh, '--', color='black')\n18\tplt.gca().set_aspect('equal', adjustable='box')\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 12-17 with:\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')",
      "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]\nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\nplt.triplot(T, 'k-', marker='x', markersize=8)",
      "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')",
      "Remove lines 13-17"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_434": {
    "pid": "coding_434",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\ttest_data = np.array([[0,0,1,0],\n5\t                      [0,1,0,0],\n6\t                      [1,0,0,0],\n7\t                      [0.25,0.25,0.5,1],\n8\t                      [0.25,0.5,0.25,1],\n9\t                      [0.5,0.25,0.25,1]])\n10\ta = test_data[:, 0]\n11\tb = test_data[:, 1]\n12\tc = test_data[:, 2]\n13\tv = test_data[:, -1]\n14\tx = 0.5 * (2. * b + c) / (a + b + c)\n15\ty = 0.5 * np.sqrt(3) * c / (a + b + c)\n16\tT = tri.Triangulation(x, y)\n17\tplt.figure()\n18\tplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\n19\tplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\n20\tplt.triplot(T, 'k-', marker='x', markersize=8)\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')",
      "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')",
      "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)",
      "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_435": {
    "pid": "coding_435",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(\n11\t    p1, p2, Z_modified,\n12\t    rstride=1, cstride=1,\n13\t    color='b', alpha=0.6,\n14\t    edgecolor='none'\n15\t)\n16\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n17\t    norm_z = (z - z_min) / (z_max - z_min)\n18\t    inv_norm_z = 1 - norm_z\n19\t    scaled_z = inv_norm_z ** contrast\n20\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n21\t    stride = int(round(stride))\n22\t    stride = max(min_stride, min(stride, max_stride))\n23\t    return stride\n24\tz_min = np.min(Z_modified)\n25\tz_max = np.max(Z_modified)\n26\tcontrast = 22.0\n27\tfor i in range(p1.shape[0]):\n28\t    z_row = Z_modified[i, :]\n29\t    avg_z = np.mean(z_row)\n30\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n31\t    indices = np.arange(0, p1.shape[1], current_stride)\n32\t    if indices[-1] != p1.shape[1] - 1:\n33\t        indices = np.append(indices, p1.shape[1] - 1)\n34\t    ax.plot(\n35\t        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n36\t        color='black', linewidth=0.5\n37\t    )\n38\tfor j in range(p2.shape[1]):\n39\t    z_col = Z_modified[:, j]\n40\t    avg_z = np.mean(z_col)\n41\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n42\t    indices = np.arange(0, p2.shape[0], current_stride)\n43\t    if indices[-1] != p2.shape[0] - 1:\n44\t        indices = np.append(indices, p2.shape[0] - 1)\n45\t    ax.plot(\n46\t        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n47\t        color='black', linewidth=0.5\n48\t    )\n49\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n50\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n51\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n52\tax.view_init(elev=30, azim=-45)\n53\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-52 with:\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()",
      "Replace lines 10-52 with:\nsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=45, azim=45)",
      "Replace lines 3-51 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')",
      "Replace lines 4-51 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_436": {
    "pid": "coding_436",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\n11\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n12\t    norm_z = (z - z_min) / (z_max - z_min)\n13\t    inv_norm_z = 1 - norm_z\n14\t    scaled_z = inv_norm_z ** contrast\n15\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n16\t    stride = int(round(stride))\n17\t    stride = max(min_stride, min(stride, max_stride))\n18\t    return stride\n19\tz_min = np.min(Z_modified)\n20\tz_max = np.max(Z_modified)\n21\tcontrast = 22.0\n22\tfor i in range(p1.shape[0]):\n23\t    z_row = Z_modified[i, :]\n24\t    avg_z = np.mean(z_row)\n25\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n26\t    indices = np.arange(0, p1.shape[1], current_stride)\n27\t    if indices[-1] != p1.shape[1] - 1:\n28\t        indices = np.append(indices, p1.shape[1] - 1)\n29\t    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\n30\tfor j in range(p2.shape[1]):\n31\t    z_col = Z_modified[:, j]\n32\t    avg_z = np.mean(z_col)\n33\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n34\t    indices = np.arange(0, p2.shape[0], current_stride)\n35\t    if indices[-1] != p2.shape[0] - 1:\n36\t        indices = np.append(indices, p2.shape[0] - 1)\n37\t    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\n38\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n39\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n40\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n41\tax.view_init(elev=45, azim=45)\n42\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()",
      "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)",
      "Replace lines 4-41 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)",
      "Replace lines 3-41 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_437": {
    "pid": "coding_437",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 18 with:\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)",
      "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_438": {
    "pid": "coding_438",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-18 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_439": {
    "pid": "coding_439",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5],\n6\t                              [1, 0, 2.8],\n7\t                              [-1, -1, 2.2],\n8\t                              [1, -1, 2.6],\n9\t                              [-1, 1, 2.7]])\n10\tfinal_position = np.array([0, 0, 0])\n11\thorizontal_window = np.array([[1, 1, 0],\n12\t                             [1, -1, 0],\n13\t                             [-1, -1, 0],\n14\t                             [-1, 1, 0]])\n15\tvertical_window = np.array([[0.5, 1, 2],\n16\t                            [-0.5, 1, 2],\n17\t                            [-0.5, 1, 1],\n18\t                            [0.5, 1, 1]])\n19\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n20\t        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n21\t        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n22\t        'b-', linewidth=3, label='Target (Horizontal Window)')\n23\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n24\t        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n25\t        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n26\t        'k-', linewidth=2, label='Window (Vertical)')\n27\tfor pos in initial_positions:\n28\t    ax.plot([pos[0], final_position[0]],\n29\t            [pos[1], final_position[1]],\n30\t            [pos[2], final_position[2]], 'r')\n31\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n32\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n33\tax.set_xlabel('x [m]')\n34\tax.set_ylabel('y [m]')\n35\tax.set_zlabel('-z [m]')\n36\tax.set_title('Quadrotor Trajectories with Windows')\n37\tax.legend()\n38\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')",
      "Replace lines 5-37 with:\ninitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)",
      "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')",
      "Replace lines 5-32 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_440": {
    "pid": "coding_440",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\n6\tfinal_position = np.array([0, 0, 0])\n7\thorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\n8\tvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\n9\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\n10\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\n11\tfor pos in initial_positions:\n12\t    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\n13\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n14\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n15\tax.set_xlabel('x [m]')\n16\tax.set_ylabel('y [m]')\n17\tax.set_zlabel('-z [m]')\n18\tax.set_title('Quadrotor Trajectories with Windows')\n19\tax.legend()\n20\tax.xaxis.pane.fill = False\n21\tax.yaxis.pane.fill = False\n22\tax.zaxis.pane.fill = False\n23\tax.xaxis.pane.set_edgecolor('black')\n24\tax.yaxis.pane.set_edgecolor('black')\n25\tax.zaxis.pane.set_edgecolor('black')\n26\tax.xaxis.pane.set_linewidth(1.0)\n27\tax.yaxis.pane.set_linewidth(1.0)\n28\tax.zaxis.pane.set_linewidth(1.0)\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-28 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0],\n                             [1, -1, 0],\n                             [-1, -1, 0],\n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_441": {
    "pid": "coding_441",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\n31\tplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\n32\tplt.gca().set_aspect('equal', adjustable='box')\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 30-31 with:\nlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\nax.legend(handles=legend_elements, loc='upper right', fontsize=12)",
      "Replace lines 21-27 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)",
      "Replace lines 26-27 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)",
      "Replace lines 23-27 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_442": {
    "pid": "coding_442",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n31\t                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\n32\tax.legend(handles=legend_elements, loc='upper right', fontsize=12)\n33\tplt.gca().set_aspect('equal', adjustable='box')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 26-32 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 30-32 with:\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 21-32 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 23-32 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_443": {
    "pid": "coding_443",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', '*', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['o', '*', '.', '\\\\']",
      "Replace line 6 with:\nhatches = ['/', 'X', '|', '\\\\']"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_444": {
    "pid": "coding_444",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', 'X', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['o', 'X', '.', '\\\\']",
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['/', '*', '|', '\\\\']"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_445": {
    "pid": "coding_445",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\tplt.tight_layout()\n9\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))",
      "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])",
      "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])",
      "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_446": {
    "pid": "coding_446",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\t    ax.spines['top'].set_visible(False)\n9\t    ax.spines['right'].set_visible(False)\n10\t    ax.spines['bottom'].set_visible(True)\n11\t    ax.spines['left'].set_visible(True)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Remove lines 8-11",
      "Replace lines 10-11 with:\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))",
      "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])",
      "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_447": {
    "pid": "coding_447",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def _gen_axes_spines(self):\n21\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n22\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n23\t            return {'polar': spine}\n24\t    register_projection(RadarAxes)\n25\t    return theta\n26\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n27\tvalues = {\n28\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n29\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n30\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n31\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n32\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n33\t}\n34\tnum_vars = len(labels)\n35\ttheta = radar_factory(num_vars, frame='polygon')\n36\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n37\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n38\tfor i, (factor, values_list) in enumerate(values.items()):\n39\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n40\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n41\tax.set_varlabels(labels)\n42\tax.set_rgrids([0.2, 0.4, 0.6, 0.8])\n43\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n44\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-42 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)",
      "Replace lines 3-43 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)",
      "Replace lines 39-43 with:\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')",
      "Replace lines 20-42 with:\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level,\n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_448": {
    "pid": "coding_448",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def draw_polygon_grid(self, num_levels=4):\n21\t            for level in np.linspace(0.2, 1.0, num_levels):\n22\t                poly = RegularPolygon((0, 0), num_vars, radius=level,\n23\t                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n24\t                self.add_patch(poly)\n25\t        def _gen_axes_spines(self):\n26\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n27\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n28\t            return {'polar': spine}\n29\t    register_projection(RadarAxes)\n30\t    return theta\n31\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n32\tvalues = {\n33\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n34\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n35\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n36\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n37\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n38\t}\n39\tnum_vars = len(labels)\n40\ttheta = radar_factory(num_vars, frame='polygon')\n41\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n42\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n43\tax.draw_polygon_grid(num_levels=5)\n44\tfor i, (factor, values_list) in enumerate(values.items()):\n45\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n46\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n47\tax.set_varlabels(labels)\n48\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n49\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 20-48 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')",
      "Replace lines 3-48 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)",
      "Replace lines 4-43 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)",
      "Replace lines 20-47 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_449": {
    "pid": "coding_449",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.colors as mcolors\n4\tdata = np.arange(2, 19)\n5\tcmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n6\tbounds = [2, 3, 7, 9, 15, 18]\n7\tnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n8\tsegments_per_ring = [6, 6, 4, 1]\n9\tcolors = []\n10\tstart = 0\n11\tfor segment_count in segments_per_ring:\n12\t    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n13\t    colors.append(ring_colors)\n14\t    start += segment_count\n15\tsizes = [[1] * count for count in segments_per_ring]\n16\tfig, ax = plt.subplots(figsize=(6, 6))\n17\tax.axis('equal')\n18\tradius = [1.5, 1.0, 0.5, 0.25]\n19\tfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n20\t    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n21\t                       wedgeprops=dict(width=0.3, edgecolor='white'))\n22\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n23\tsm.set_array([])\n24\tcbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\n25\tcbar.set_label(\"Discrete intervals, some other units\")\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)",
      "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)",
      "Replace lines 18-24 with:\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)",
      "Replace lines 3-25 with:\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)\ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_450": {
    "pid": "coding_450",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib as mpl\n4\tdata = np.arange(2, 19)\n5\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n6\tax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\n7\tax.grid(False)\n8\tcmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n9\tbounds = [2, 3, 7, 9, 15, 18]\n10\tnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n11\tradii = np.linspace(0.2, 1, 4)\n12\tbold_segments = [3, 5, 6, 11, 12, 16]\n13\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n14\t    n = stop - start\n15\t    dtheta = 2 * np.pi / n\n16\t    for i in range(n):\n17\t        segment_value = data[start + i]\n18\t        color = cmap(norm(segment_value))\n19\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\n20\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n21\t    n = stop - start\n22\t    dtheta = 2 * np.pi / n\n23\t    for i in range(n):\n24\t        lw = 4 if (start + i + 1) in bold_segments else 2\n25\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\n26\tax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\n27\tfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\n28\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n                       wedgeprops=dict(width=0.3, edgecolor='white'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_451": {
    "pid": "coding_451",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\n9\tplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\n10\tplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\n12\tplt.grid(True)\n13\tfor xi, yi1, yi2 in zip(x, y1, y2):\n14\t    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n15\t    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n16\t    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n17\t    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_452": {
    "pid": "coding_452",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\")\n9\tplt.plot(x, y2, label=\"y2\")\n10\tplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\n12\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')",
      "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')",
      "Replace lines 8-11 with:\nplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\nplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\nplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\nplt.grid(True)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')",
      "Insert the following between lines 11-12:\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_453": {
    "pid": "coding_453",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tgames = ['I', 'II', 'III', 'IV', 'V']\n5\tplayer_a_scores = [5, 15, 22, 20, 25]\n6\tplayer_b_scores = [25, 32, 34, 30, 27]\n7\tbar_width = 0.35\n8\tindex = np.arange(len(games))\n9\toffset = bar_width / 2\n10\tfor i, score in enumerate(player_a_scores):\n11\t    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\n12\tfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n13\t    height = b_score - a_score\n14\t    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\n15\tax.set_xlabel(\"Games\")\n16\tax.set_ylabel(\"Score\")\n17\tax.set_title(\"Scores by number of game and players\")\n18\tax.set_xticks(index)\n19\tax.set_xticklabels(games)\n20\tax.set_ylim(0, 60)\n21\tfor i, score in enumerate(player_a_scores):\n22\t    ax.annotate(f'{score}',\n23\t                xy=(index[i] - offset, score),\n24\t                xytext=(0, 3),\n25\t                textcoords=\"offset points\",\n26\t                ha='center', va='bottom')\n27\tfor i, b_score in enumerate(player_b_scores):\n28\t    ax.annotate(f'{b_score}',\n29\t                xy=(index[i] + offset, b_score),\n30\t                xytext=(0, 3),\n31\t                textcoords=\"offset points\",\n32\t                ha='center', va='bottom')\n33\tax.legend([\"Player A\", \"Player B\"], loc='upper right')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-33 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 3-33 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 3-14 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')",
      "Replace lines 3-33 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_454": {
    "pid": "coding_454",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tgames = ['I', 'II', 'III', 'IV', 'V']\n4\tplayer_a_scores = [5, 15, 22, 20, 25]\n5\tplayer_b_scores = [25, 32, 34, 30, 27]\n6\tbar_width = 0.35\n7\tindex = np.arange(len(games))\n8\tfig, ax = plt.subplots()\n9\tbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\n10\tbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\n11\tax.set_xlabel('Games')\n12\tax.set_ylabel('Score')\n13\tax.set_title('Scores by number of game and players')\n14\tax.set_xticks(index)\n15\tax.set_xticklabels(games)\n16\tax.legend()\n17\tfor rect in bar1:\n18\t    height = rect.get_height()\n19\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n20\tfor rect in bar2:\n21\t    height = rect.get_height()\n22\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-22 with:\nfig, ax = plt.subplots()\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')",
      "Replace lines 3-22 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 9-22 with:\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')",
      "Replace lines 3-22 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_455": {
    "pid": "coding_455",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(12, 6))\n3\tax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\n4\tax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n5\t            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n6\t            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n7\tcategories = {\n8\t    \"ENVIRONMENT\": (0.25, 0.9),\n9\t    \"MATERIAL\": (0.4, 0.85),\n10\t    \"METHOD\": (0.55, 0.8),\n11\t    \"PEOPLE\": (0.25, 0.1),\n12\t    \"MEASUREMENT\": (0.4, 0.15),\n13\t    \"MACHINE\": (0.55, 0.2)\n14\t}\n15\tfor cat, (x, y) in categories.items():\n16\t    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n17\t                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n18\tcauses = {\n19\t    \"ENVIRONMENT\": [\"Bad conditions\"],\n20\t    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n21\t    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n22\t    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n23\t    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n24\t    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n25\t}\n26\tpositions = {\n27\t    \"ENVIRONMENT\": [(0.3, 0.8)],\n28\t    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n29\t    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n30\t    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n31\t    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n32\t    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n33\t}\n34\tfor cat, cause_list in causes.items():\n35\t    for i, cause in enumerate(cause_list):\n36\t        x_pos, y_pos = positions[cat][i]\n37\t        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n38\t                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n39\t                    fontsize=9, color=\"black\")\n40\tax.axis('off')\n41\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 2-40 with:\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white',\n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:\n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\n    else:\n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()",
      "Replace lines 8-38 with:\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",",
      "Replace lines 4-40 with:\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')\nplt.tight_layout()",
      "Replace lines 1-40 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_456": {
    "pid": "coding_456",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tplt.figure(figsize=(15, 8))\n4\tplt.style.use('default')\n5\tplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\n6\tplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\n7\tcircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\n8\tplt.gca().add_patch(circle)\n9\tplt.gca().set_aspect('equal', adjustable='box')\n10\tcategories = {\n11\t    'ENVIRONMENT': (2, 8),\n12\t    'MATERIAL': (5, 8),\n13\t    'METHOD': (8, 8),\n14\t    'PEOPLE': (2, 2),\n15\t    'MEASUREMENT': (5, 2),\n16\t    'MACHINE': (8, 2)\n17\t}\n18\tcauses = {\n19\t    'ENVIRONMENT': ['Bad conditions'],\n20\t    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n21\t    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n22\t    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n23\t    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n24\t    'MACHINE': ['Faulty equipment', 'Compatibility']\n25\t}\n26\tfor category, (x, y) in categories.items():\n27\t    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n28\t    box_width = len(category) * 0.2 + 0.4\n29\t    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n30\t                        facecolor='tab:blue', edgecolor='black')\n31\t    plt.gca().add_patch(rect)\n32\t    plt.text(x, y, category, ha='center', va='center', color='white',\n33\t             fontsize=8, fontweight='bold')\n34\t    causes_list = causes[category]\n35\t    spacing = 0.8\n36\t    if y > 5:\n37\t        for i, cause in enumerate(causes_list):\n38\t            y_pos = y - 0.7 - i * spacing\n39\t            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n40\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n41\t                    fontsize=8)\n42\t    else:\n43\t        for i, cause in enumerate(causes_list):\n44\t            y_pos = y + 0.7 + i * spacing\n45\t            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n46\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n47\t                    fontsize=8)\n48\tplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n49\t         fontsize=8, fontweight='bold')\n50\tplt.xlim(-1.2, 11.2)\n51\tplt.ylim(0, 10)\n52\tplt.axis('off')\n53\tplt.gca().set_aspect('equal', adjustable='box')\n54\tplt.tight_layout()\n55\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-54 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)",
      "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')",
      "Replace lines 2-53 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')",
      "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_457": {
    "pid": "coding_457",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\timport numpy as np\n5\treleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n6\t            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n7\t            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n8\t            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n9\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n10\t         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n11\t         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n12\t         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n13\t         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n14\t         '2014-10-26', '2014-10-18', '2014-08-26']\n15\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n16\tplt.figure(figsize=(15, 8))\n17\tfig, ax = plt.subplots(figsize=(15, 8))\n18\tax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\n19\tfor i, (version, date) in enumerate(zip(releases, dates)):\n20\t    major_version = version.split('.')[0]\n21\t    if version.endswith('.0'):\n22\t        color = 'red'\n23\t        alpha = 1.0\n24\t        weight = 2\n25\t    else:\n26\t        color = 'red'\n27\t        alpha = 0.5\n28\t        weight = 1\n29\t    if i % 2 == 0:\n30\t        y_text = 0.1\n31\t        y_start = 0\n32\t        y_end = 0.08\n33\t    else:\n34\t        y_text = -0.1\n35\t        y_start = 0\n36\t        y_end = -0.08\n37\t    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n38\t    if y_text > 0:\n39\t        ax.text(date, y_text, version, ha='center', va='bottom')\n40\t    else:\n41\t        ax.text(date, y_text, version, ha='center', va='top')\n42\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n43\tax.xaxis.set_major_locator(mdates.YearLocator())\n44\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n45\tax.yaxis.set_visible(False)\n46\tax.set_ylim(-0.3, 0.3)\n47\tplt.grid(False)\n48\tax.spines['left'].set_visible(False)\n49\tax.spines['right'].set_visible(False)\n50\tax.spines['top'].set_visible(False)\n51\tplt.tight_layout()\n52\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-46 with:\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\nversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(15, 4))\nax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(versions, dates)):\n    color = 'black' if not version.endswith('.0') else 'red'\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n    else:\n        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.15, 0.15)",
      "Replace lines 1-51 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)",
      "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)",
      "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_458": {
    "pid": "coding_458",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\n5\tversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n6\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n7\tfig, ax = plt.subplots(figsize=(15, 4))\n8\tax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\n9\tfor i, (version, date) in enumerate(zip(versions, dates)):\n10\t    color = 'black' if not version.endswith('.0') else 'red'\n11\t    if i % 2 == 0:\n12\t        y_text = 0.1\n13\t        y_start = 0\n14\t        y_end = 0.08\n15\t    else:\n16\t        y_text = -0.1\n17\t        y_start = 0\n18\t        y_end = -0.08\n19\t    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n20\t    if y_text > 0:\n21\t        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n22\t    else:\n23\t        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\n24\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n25\tax.xaxis.set_major_locator(mdates.YearLocator())\n26\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n27\tax.yaxis.set_visible(False)\n28\tax.set_ylim(-0.15, 0.15)\n29\tplt.grid(False)\n30\tax.spines['left'].set_visible(False)\n31\tax.spines['right'].set_visible(False)\n32\tax.spines['top'].set_visible(False)\n33\tplt.tight_layout()\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-28 with:\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):\n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)",
      "Replace lines 1-33 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)",
      "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)",
      "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_459": {
    "pid": "coding_459",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\tfrom mpl_toolkits.mplot3d import Axes3D\n2\timport matplotlib.pyplot as plt\n3\timport numpy as np\n4\tx = np.linspace(0, 80, 20)\n5\ty = np.linspace(0, 250, 20)\n6\tz = np.linspace(-450, 0, 20)\n7\tX, Z = np.meshgrid(x, z)\n8\tY, Z = np.meshgrid(y, z)\n9\tX2, Y2 = np.meshgrid(x, y)\n10\tZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\n11\tZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\n12\tZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\txz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\n16\tyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\n17\txy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\n18\tcbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\n19\tax.set_xlabel(\"X [km]\")\n20\tax.set_ylabel(\"Y [km]\")\n21\tax.set_zlabel(\"Z [m]\")\n22\tax.set_xlim(0, 80)\n23\tax.set_ylim(0, 250)\n24\tax.set_zlim(-450, 0)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)",
      "Replace lines 1-24 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()",
      "Replace lines 1-18 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_460": {
    "pid": "coding_460",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tNx, Ny, Nz = 100, 300, 500\n4\tX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\n5\tdata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\n6\tkw = {\n7\t    'vmin': data.min(),\n8\t    'vmax': data.max(),\n9\t    'levels': np.linspace(data.min(), data.max(), 10),\n10\t}\n11\tfig = plt.figure(figsize=(5, 4))\n12\tax = fig.add_subplot(111, projection='3d')\n13\t_ = ax.contourf(\n14\t    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n15\t    zdir='z', offset=0, **kw\n16\t)\n17\txmin, xmax = X.min(), X.max()\n18\tymin, ymax = Y.min(), Y.max()\n19\tzmin, zmax = Z.min(), Z.max()\n20\tax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\n21\tedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\n22\tax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\n23\tax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\n24\tax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\n25\tax.set(\n26\t    xlabel='X [km]',\n27\t    ylabel='Y [km]',\n28\t    zlabel='Z [m]',\n29\t    zticks=[0, -150, -300, -450],\n30\t)\n31\tax.view_init(40, -30, 0)\n32\tax.set_box_aspect(None, zoom=0.9)\n33\tfig.colorbar(C, ax=ax, pad=0.1)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-33 with:\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)",
      "Replace lines 1-33 with:\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)\nY, Z = np.meshgrid(y, z)\nX2, Y2 = np.meshgrid(x, y)\nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)",
      "Replace lines 1-33 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()",
      "Insert the following between lines 15-16:\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_461": {
    "pid": "coding_461",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import ConnectionPatch\n4\tsizes = [56, 27, 17]\n5\tlabels = ['Disapprove', 'Approve', 'Undecided']\n6\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n7\texplode = (0.1, 0, 0)\n8\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n9\tage_sizes = [54, 33, 7, 6]\n10\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n11\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n12\tfig.subplots_adjust(wspace=0)\n13\tangle = -180 * sizes[1] / sum(sizes)\n14\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n15\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n16\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n17\tbottom = 1\n18\twidth = 0.2\n19\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n20\t    bottom -= height / 100\n21\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n22\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n23\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n24\tax2.axis('off')\n25\tax2.set_xlim(-2.5 * width, 2.5 * width)\n26\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n27\tcenter, r = wedges[1].center, wedges[1].r\n28\tbar_height = sum(age_sizes) / 100\n29\tx = r * np.cos(np.pi / 180 * theta2) + center[0]\n30\ty = r * np.sin(np.pi / 180 * theta2) + center[1]\n31\tcon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n32\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n33\tax2.add_artist(con)\n34\tx = r * np.cos(np.pi / 180 * theta1) + center[0]\n35\ty = r * np.sin(np.pi / 180 * theta1) + center[1]\n36\tcon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n37\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n38\tax2.add_artist(con)\n39\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)",
      "Replace lines 7-37 with:\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')",
      "Replace line 7 with:\nexplode = (0, 0.1, 0)",
      "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_462": {
    "pid": "coding_462",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsizes = [56, 27, 17]\n4\tlabels = ['Disapprove', 'Approve', 'Undecided']\n5\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n6\texplode = (0.1, 0, 0)\n7\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n8\tage_sizes = [54, 33, 7, 6]\n9\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n10\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n11\tfig.subplots_adjust(wspace=0)\n12\tangle = -180 * sizes[1] / sum(sizes)\n13\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n14\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n15\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n16\tbottom = 1\n17\twidth = 0.2\n18\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n19\t    bottom -= height / 100\n20\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n21\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n22\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n23\tax2.axis('off')\n24\tax2.set_xlim(-2.5 * width, 2.5 * width)\n25\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n26\tcenter, r = wedges[1].center, wedges[1].r\n27\tbar_height = sum(age_sizes) / 100\n28\tx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\n29\ty_top = r * np.sin(np.pi / 180 * theta2) + center[1]\n30\tax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\n31\tx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\n32\ty_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\n33\tax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)",
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)",
      "Replace line 6 with:\nexplode = (0, 0.1, 0)",
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_463": {
    "pid": "coding_463",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.arange(10)\n4\ty = np.arange(10)\n5\tX, Y = np.meshgrid(x, y)\n6\tZ1 = np.sin(X/2) + np.cos(Y/2)\n7\tZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\n8\tZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\n9\tfig = plt.figure()\n10\tax = fig.add_subplot(111, projection='3d')\n11\tax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\n12\tax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\n13\tax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\n14\tax.set_xlabel('x')\n15\tax.set_ylabel('y')\n16\tax.set_zlabel('z')\n17\tax.set_xlim(0, 9)\n18\tax.set_ylim(0, 9)\n19\tax.set_zlim(0, 5)\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=2, cstride=2, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z3))",
      "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))",
      "Replace lines 3-19 with:\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)",
      "Replace lines 1-13 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_464": {
    "pid": "coding_464",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.colors import Normalize\n5\tdef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"CMRmap\"):\n6\t    if norm is None:\n7\t        norm = Normalize()\n8\t    colors = plt.get_cmap(cmap)(norm(array))\n9\t    if value_direction == 'x':\n10\t        nz, ny = array.shape\n11\t        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n12\t        xi = np.full_like(yi, pos)\n13\t    elif value_direction == 'y':\n14\t        nx, nz = array.shape\n15\t        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n16\t        yi = np.full_like(zi, pos)\n17\t    elif value_direction == 'z':\n18\t        ny, nx = array.shape\n19\t        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n20\t        zi = np.full_like(xi, pos)\n21\t    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\n22\tfig = plt.figure()\n23\tax = fig.add_subplot(projection='3d')\n24\tax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\n25\tnx, ny, nz = 8, 10, 5\n26\tdata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\n27\tdata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\n28\tdata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\n29\tshow(ax, data_xy)\n30\tshow(ax, data_yz, value_direction='x')\n31\tshow(ax, data_zx, value_direction='y', pos=ny)\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)",
      "Replace line 5 with:\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):",
      "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)",
      "Replace lines 1-31 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_465": {
    "pid": "coding_465",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\")\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Insert the following between lines 9-10:\naggregated_data.columns = aggregated_data.columns.droplevel()",
      "Replace line 14 with:\nplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_466": {
    "pid": "coding_466",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")",
      "Replace line 14 with:\nplt.legend(title=\"Other Details\")",
      "Replace lines 10-14 with:\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_467": {
    "pid": "coding_467",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")",
      "Replace line 11 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')",
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace line 12 with:\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_468": {
    "pid": "coding_468",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, color=\"#1f77b4\", edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")",
      "Replace line 11 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_469": {
    "pid": "coding_469",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left')\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='center right')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_470": {
    "pid": "coding_470",
    "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 15 with:\nplt.legend(title='Payment Method')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify Without Image",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_471": {
    "pid": "coding_471",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(1000)\n5\ty = np.random.rand(1000) * 2 - 1\n6\tlabels = np.random.choice([0, 1], size=1000)\n7\tplt.figure(figsize=(8, 8))\n8\tplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n9\tplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n10\tplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\n11\tplt.axvline(0, color='black', linestyle=':', linewidth=1)\n12\tplt.xlabel(r'$P(F_{i+1} | F_i)$')\n13\tplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n14\tplt.legend(title='Boundary')\n15\tplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\n16\tplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\n17\tplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n18\tplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n19\tplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n20\tplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n21\tplt.xlim(-0.1, 1.1)\n22\tplt.ylim(-1.1, 1.1)\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()",
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='inout')",
      "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')",
      "Insert the following between lines 22-23:\nplt.tick_params(axis='both', direction='in')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_472": {
    "pid": "coding_472",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.gridspec import GridSpec\n5\tx = np.random.rand(1000)\n6\ty = np.random.rand(1000) * 2 - 1\n7\tlabels = np.random.choice([0, 1], size=1000)\n8\tfig = plt.figure(figsize=(8, 8))\n9\tgs = GridSpec(4, 4, figure=fig)\n10\tax_main = fig.add_subplot(gs[1:4, 0:3])\n11\tax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n12\tax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n13\tax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\n14\tax_main.axvline(0, color='black', linestyle=':', linewidth=1)\n15\tax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\n16\tax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n17\tax_main.legend(title='Boundary')\n18\tax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n19\tax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n20\tax_main.set_xlim(-0.1, 1.1)\n21\tax_main.set_ylim(-1.1, 1.1)\n22\tax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\n23\tax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\n24\tax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\n25\tax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\n26\tax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n27\tax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n28\tax_histx.label_outer()\n29\tax_histy.label_outer()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)",
      "Replace lines 3-29 with:\nfrom matplotlib.gridspec import GridSpec\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='in')",
      "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')",
      "Insert the following between lines 29-30:\nax_histy.tick_params(axis='both', direction='in')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_473": {
    "pid": "coding_473",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.patches as mpatches\n4\tnp.random.seed(0)\n5\tcategories = [\n6\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n7\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n8\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n9\t]\n10\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n11\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n12\tdata = np.random.randint(50, 150, (8, 5, 5))\n13\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n14\taxes = axes.flatten()\n15\tfor i, ax in enumerate(axes[:-1]):\n16\t    for j, level in enumerate(levels):\n17\t        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n18\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n19\t    ax.set_title(categories[i])\n20\t    ax.set_xlim(0, 500)\n21\tfig.delaxes(axes[-1])\n22\thandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\n23\tfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace line 23 with:\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_474": {
    "pid": "coding_474",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tcategories = [\n5\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n6\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n7\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n8\t]\n9\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n10\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n11\tdata = np.random.randint(50, 150, (8, 5, 5))\n12\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n13\taxes = axes.flatten()\n14\tfor i, ax in enumerate(axes[:-1]):\n15\t    for j, level in enumerate(levels):\n16\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n17\t        ax.set_title(categories[i])\n18\t        ax.set_xlim(0, 500)\n19\tfig.delaxes(axes[-1])\n20\tfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n21\tplt.tight_layout()\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))",
      "Replace line 16 with:\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')",
      "Replace lines 11-21 with:\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.15)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_475": {
    "pid": "coding_475",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle='--', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle='--', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)",
      "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')",
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)",
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_476": {
    "pid": "coding_476",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle=':', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle=':', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)",
      "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)",
      "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')",
      "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_477": {
    "pid": "coding_477",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tk = np.linspace(0, 20, 100)\n5\tA = np.linspace(0, 20, 100)\n6\tK, A = np.meshgrid(k, A)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\n11\tax.set_xlabel('k')\n12\tax.set_ylabel('|A|')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 4-12 with:\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')",
      "Replace lines 10-13 with:\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_478": {
    "pid": "coding_478",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tA = np.linspace(0, 20, 100)\n5\tk = np.linspace(0, 20, 100)\n6\tA, k = np.meshgrid(A, k)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\n11\tax.set_xlabel(r'$k$')\n12\tax.set_ylabel(r'$|A|$')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-12 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')",
      "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)",
      "Replace lines 4-13 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')",
      "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_479": {
    "pid": "coding_479",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor ax, crop in zip(axes.flatten(), crops):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    ax.legend()\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 18 with:\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)",
      "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))",
      "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))",
      "Replace line 14 with:\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_480": {
    "pid": "coding_480",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    if index == 2:\n19\t        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()",
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()",
      "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)",
      "Replace line 18 with:\n    if index == 3:"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_481": {
    "pid": "coding_481",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-.o', label='AD')",
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_482": {
    "pid": "coding_482",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)",
      "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')",
      "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, label='IWCV')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_483": {
    "pid": "coding_483",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=3)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=3)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=3)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=3)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=3)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=3)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=3)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=3)",
      "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()",
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')",
      "Replace line 24 with:\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_484": {
    "pid": "coding_484",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()",
      "Replace lines 13-24 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()",
      "Replace line 24 with:\nplt.legend()",
      "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=5)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=5)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=5)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=5)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=5)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=5)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=5)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=5)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_485": {
    "pid": "coding_485",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tx1 = np.random.normal(0.85, 0.1, 100)\n7\ty1 = x1 + np.random.normal(0, 0.1, 100)\n8\tx2 = np.random.normal(0.9, 0.1, 100)\n9\ty2 = x2 + np.random.normal(0, 0.1, 100)\n10\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n11\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n13\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n14\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n15\taxes[0].axhline(0.85, color='red', linestyle='--')\n16\taxes[0].axhline(0.55, color='red', linestyle='--')\n17\taxes[0].set_title('BO03 trial')\n18\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n19\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n20\taxes[1].axhline(0.85, color='red', linestyle='--')\n21\taxes[1].axhline(0.55, color='red', linestyle='--')\n22\taxes[1].set_title('BO06 trial')\n23\tplt.tight_layout()\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-22 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)",
      "Replace lines 16-21 with:\naxes[0].axhline(0.55, color='red', linestyle='-.')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='-.')",
      "Replace lines 6-18 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)",
      "Replace lines 6-18 with:\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_486": {
    "pid": "coding_486",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tsns.set(style=\"whitegrid\")\n7\tx1 = np.random.normal(0.85, 0.1, 100)\n8\ty1 = x1 + np.random.normal(0, 0.1, 100)\n9\tx2 = np.random.normal(0.9, 0.1, 100)\n10\ty2 = x2 + np.random.normal(0, 0.1, 100)\n11\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n13\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n14\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n15\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n16\taxes[0].axhline(0.85, color='red', linestyle='--')\n17\taxes[0].axhline(0.55, color='red', linestyle='--')\n18\taxes[0].set_title('BO03 trial')\n19\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n20\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n21\taxes[1].axhline(0.85, color='red', linestyle='--')\n22\taxes[1].axhline(0.55, color='red', linestyle='--')\n23\taxes[1].set_title('BO06 trial')\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 6 with:\nsns.set(style=\"ggplot2\")",
      "Replace lines 6-23 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)",
      "Replace lines 6-19 with:\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})",
      "Replace lines 6-23 with:\nsns.set(style=\"classic\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_487": {
    "pid": "coding_487",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n7\t    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n8\t    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n9\t    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n11\t    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n12\t}\n13\tfig, ax = plt.subplots(figsize=(10, 6))\n14\tax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\n15\tax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\n16\tax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\n17\tax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\n18\tax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\n19\tax.set_xlabel('Percentage')\n20\tax.set_xlim(-100, 100)\n21\tax.set_xticks([-100, -50, 0, 50, 100])\n22\tax.set_xticklabels([100, 50, 0, 50, 100])\n23\tax.axvline(0, color='black', linewidth=0.8)\n24\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n25\tplt.tight_layout()\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')",
      "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')",
      "Replace lines 3-24 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace lines 4-24 with:\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_488": {
    "pid": "coding_488",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport pandas as pd\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n8\t    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n9\t    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n11\t    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n12\t    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n13\t}\n14\tfig, ax = plt.subplots(figsize=(10, 6))\n15\tax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\n16\tax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\n17\tax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\n18\tax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\n19\tax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\n20\tax.set_xlabel('Percentage')\n21\tax.set_xlim(-100, 100)\n22\tax.set_xticks([-100, -50, 0, 50, 100])\n23\tax.set_xticklabels([100, 50, 0, 50, 100])\n24\tax.axvline(0, color='black', linewidth=0.8)\n25\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n26\tplt.tight_layout()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-25 with:\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace lines 3-19 with:\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)",
      "Replace lines 3-25 with:\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')",
      "Replace line 5 with:\nsns.set(style=\"classic\")"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_489": {
    "pid": "coding_489",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))",
      "Replace lines 11-17 with:\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))",
      "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_490": {
    "pid": "coding_490",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"classic\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tax.set_xlim(-1, 1)\n19\tax.set_ylim(-1, 1)\n20\tax.set_xticks(np.linspace(-1, 1, 5))\n21\tax.set_yticks(np.linspace(-1, 1, 5))\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-21 with:\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)",
      "Replace lines 5-21 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)",
      "Replace lines 5-17 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)",
      "Replace lines 5-21 with:\nsns.set(style=\"white\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;Polar;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_491": {
    "pid": "coding_491",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)",
      "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_492": {
    "pid": "coding_492",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75",
      "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)",
      "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_493": {
    "pid": "coding_493",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\n32\tax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\n33\tax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\n34\tax.tick_params(which=\"minor\", size=0)\n35\tcbar = ax.figure.colorbar(cax, ax=ax)\n36\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])",
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)",
      "Replace lines 31-34 with:\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)",
      "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_494": {
    "pid": "coding_494",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\n32\tcbar = ax.figure.colorbar(cax, ax=ax)\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])",
      "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)",
      "Replace lines 30-31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)",
      "Replace line 31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_495": {
    "pid": "coding_495",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport seaborn as sns\n3\timport pandas as pd\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n7\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n8\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n9\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n10\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n11\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n12\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n13\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n14\t}\n15\tdf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n16\t                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\n17\tcorrelation_matrix = df.corr()\n18\tplt.figure(figsize=(8, 8))\n19\tsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n20\t            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n21\t            mask=None, annot_kws={\"size\": 12},\n22\t            xticklabels=df.columns, yticklabels=df.columns)\n23\tfor i in range(len(correlation_matrix.columns)):\n24\t    for j in range(len(correlation_matrix.columns)):\n25\t        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n26\t                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n27\t                                        alpha=0.6))\n28\tplt.xticks(rotation=45, ha='right', color=\"red\")\n29\tplt.yticks(rotation=0, color=\"red\")\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 2-29 with:\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()",
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()",
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()",
      "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_496": {
    "pid": "coding_496",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport numpy as np\n3\timport matplotlib.pyplot as plt\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n8\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n9\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n10\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n11\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n12\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n13\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n14\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n15\t}\n16\tdf = pd.DataFrame(data, index=[\n17\t    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n18\t    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n19\t])\n20\tfig, ax = plt.subplots(figsize=(10, 8))\n21\tcmap = sns.diverging_palette(220, 10, as_cmap=True)\n22\tnorm = plt.Normalize(vmin=-1, vmax=1)\n23\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n24\tsm.set_array([])\n25\tfor i, col in enumerate(df.columns):\n26\t    for j, row in enumerate(df.index):\n27\t        corr = df.at[row, col]\n28\t        ax.scatter(\n29\t            i + 0.5, j + 0.5,\n30\t            s=abs(corr) * 1500,\n31\t            color=cmap(norm(corr)),\n32\t            alpha=0.9,\n33\t            edgecolors='none'\n34\t        )\n35\tax.set_xticks(np.arange(0.5, len(df.columns), 1))\n36\tax.set_xticklabels(df.columns, rotation=90, color=\"red\")\n37\tax.set_yticks(np.arange(0.5, len(df.index), 1))\n38\tax.set_yticklabels(df.index, rotation=0, color=\"red\")\n39\tax.set_xlim(0, len(df.columns))\n40\tax.set_ylim(0, len(df.index))\n41\tcbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\n42\tcbar.set_ticks(np.linspace(-1, 1, 5))\n43\tcbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\n44\tax.invert_yaxis()\n45\tplt.tight_layout()\n46\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"whitegrid\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(9, 9))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=0.5, linecolor='gray', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 10},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.5))\nplt.xticks(ha='right', color=\"darkred\")\nplt.yticks(rotation=0, color=\"darkred\")",
      "Replace lines 1-44 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)",
      "Replace line 29 with:\n            i, j,",
      "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_497": {
    "pid": "coding_497",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\tfig, ax = plt.subplots(figsize=(10, 3))\n11\ttask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n12\tprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\n13\tfor i, color in enumerate(colors):\n14\t    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\n15\tax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\n16\tax.set_xlabel('Time')\n17\tax.set_ylabel('Progress')\n18\tax.set_xticks([])\n19\tax.set_yticks(np.arange(0.5, 10.5, 1))\n20\tax.set_yticklabels(tasks)\n21\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n22\tplt.tight_layout()\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-20 with:\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)",
      "Replace lines 11-20 with:\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))",
      "Replace lines 4-21 with:\nsns.set(style=\"white\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)\nplt.legend(tasks, loc='lower left', bbox_to_anchor=(1, 0.5))",
      "Replace lines 10-20 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_498": {
    "pid": "coding_498",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\ttask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n11\tprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\n12\ttask_blocks = [\n13\t    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n14\t    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n15\t    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n16\t    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n17\t]\n18\tfig, ax = plt.subplots(figsize=(10, 3))\n19\tfor i, row in enumerate(task_blocks):\n20\t    for j, task_index in enumerate(row):\n21\t        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\n22\tax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\n23\tax.set_xlabel('Time')\n24\tax.set_ylabel('Progress')\n25\tax.set_yticks(np.arange(0, 5, 1))\n26\tax.set_xticks([])\n27\tax.grid(False)\n28\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n29\tplt.tight_layout()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-22 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)",
      "Replace lines 10-28 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)\nplt.legend(tasks)",
      "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))",
      "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_499": {
    "pid": "coding_499",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\n11\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)",
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_joint.grid(True)",
      "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)",
      "Insert the following between lines 10-11:\ng.plot_marginals(sns.kdeplot, fill=True)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_500": {
    "pid": "coding_500",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\n11\tg.ax_marg_x.grid(True)\n12\tg.ax_marg_y.grid(True)\n13\tg.ax_joint.grid(True)\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Remove line 6",
      "Remove lines 11-12",
      "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)",
      "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_501": {
    "pid": "coding_501",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')",
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 16-19 with:\nplt.fill_between(remaining_inventory, y1, y2, color='blue')\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Green stars')",
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_502": {
    "pid": "coding_502",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='o', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')",
      "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')",
      "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Data Reasoning;Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_503": {
    "pid": "coding_503",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace line 14 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')",
      "Replace line 17 with:\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')",
      "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_504": {
    "pid": "coding_504",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 14-15 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')",
      "Replace line 5 with:\nsns.set(style=\"whitegrid\")",
      "Replace lines 15-17 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')",
      "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_505": {
    "pid": "coding_505",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\")\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tax_inset.legend(fontsize=6)\n26\tax.legend()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')",
      "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()",
      "Replace lines 14-25 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)",
      "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_506": {
    "pid": "coding_506",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-24 with:\nax.plot(utilization, rate_before, label='Compound (before)', color='red', linestyle='--')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple', linestyle='-.')\nax.set_xlabel('Utilization')\nax.set_ylabel('Rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nax.legend(loc='upper left')\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"35%\", height=\"35%\", loc='upper right')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)', linestyle=':')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)', linestyle='--')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.3, 0.6, 0.9])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('Utilization', fontsize=8)\nax_inset.set_ylabel('Rate', fontsize=8)\nax_inset.legend(fontsize=6)",
      "Insert the following between lines 24-25:\nax_inset.legend(fontsize=6)\nax.legend()",
      "Insert the following between lines 24-25:\nax.legend()",
      "Insert the following between lines 24-25:\nax_inset.legend()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_507": {
    "pid": "coding_507",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (1, 1))])",
      "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_508": {
    "pid": "coding_508",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])",
      "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (3, 10, 1, 10))])"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_509": {
    "pid": "coding_509",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\n5\terror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\n6\tplt.figure(figsize=(8, 6))\n7\tcolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\n8\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\n9\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n10\tplt.ylabel('Intersite Distance', fontsize=12)\n11\tplt.ylim(0, 0.6)\n12\tplt.xticks(rotation=45)\n13\tplt.tight_layout()\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-8 with:\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)",
      "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))",
      "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))",
      "Replace line 8 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_510": {
    "pid": "coding_510",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\n5\terror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\n6\tplt.figure(figsize=(8, 6))\n7\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\n8\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n9\tplt.ylabel('Intersite Distance', fontsize=12)\n10\tplt.ylim(0, 0.6)\n11\tplt.xticks(rotation=45)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 7 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))",
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)",
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)",
      "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Marker, Line, & Cap",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_511": {
    "pid": "coding_511",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=0, azim=0)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 21 with:\nax.view_init(elev=90, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=90, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=180, azim=90)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_512": {
    "pid": "coding_512",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=90, azim=90)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 21 with:\nax.view_init(elev=180, azim=90)",
      "Replace line 21 with:\nax.view_init(elev=90, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=0)",
      "Replace line 21 with:\nax.view_init(elev=0, azim=90)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_513": {
    "pid": "coding_513",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdx = dy = np.ones_like(zpos) * 0.4\n13\tdz = detected_fraction_vals.flatten()\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\n17\tsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\n18\tax.set_xlabel('Log. Negativity')\n19\tax.set_ylabel('No. Measurements')\n20\tax.set_zlabel('Detected Fraction')\n21\tlevels = np.linspace(dz.min(), dz.max(), 8)\n22\tcmap = plt.get_cmap('viridis')\n23\tnorm = colors.BoundaryNorm(levels, cmap.N)\n24\tfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 16-17 with:\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)",
      "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 12-24 with:\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)",
      "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_514": {
    "pid": "coding_514",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdz = detected_fraction_vals.flatten()\n13\tdx = dy = 0.3\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tlevels = np.linspace(dz.min(), dz.max(), 8)\n17\tcmap = plt.get_cmap('viridis')\n18\tnorm = colors.BoundaryNorm(levels, cmap.N)\n19\tcolors_discrete = cmap(norm(dz))\n20\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\n21\tax.set_xlabel('Log. Negativity')\n22\tax.set_ylabel('No. Measurements')\n23\tax.set_zlabel('Detected Fraction')\n24\tmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n25\tmappable.set_array(dz)\n26\tfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)",
      "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)",
      "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_515": {
    "pid": "coding_515",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2])\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()",
      "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')",
      "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')",
      "Replace line 14 with:\nax2 = fig.add_subplot(gs[2], sharex=ax1)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_516": {
    "pid": "coding_516",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2], sharex=ax1)\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\nax2 = fig.add_subplot(gs[2])",
      "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')",
      "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()",
      "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_517": {
    "pid": "coding_517",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure()\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n13\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n14\tax.set_xlabel(r'$\\epsilon_1$')\n15\tax.set_ylabel(r'$\\epsilon_2$')\n16\tax.set_zlabel('Infidelity')\n17\tax.set_zscale('log')\n18\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n19\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 12-13 with:\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)",
      "Replace lines 10-19 with:\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n                color='magenta', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n                color='black', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)",
      "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)",
      "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_518": {
    "pid": "coding_518",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure(figsize=(10, 8))\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n13\t                color='magenta', alpha=1,\n14\t                rstride=100, cstride=100,\n15\t                edgecolor='k', linewidth=0.5)\n16\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n17\t                color='black', alpha=1,\n18\t                rstride=100, cstride=100,\n19\t                edgecolor='k', linewidth=0.5)\n20\tax.set_xlabel(r'$\\epsilon_1$')\n21\tax.set_ylabel(r'$\\epsilon_2$')\n22\tax.set_zlabel('Infidelity')\n23\tax.set_zscale('log')\n24\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n25\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n26\tax.xaxis.pane.fill = False\n27\tax.yaxis.pane.fill = False\n28\tax.zaxis.pane.fill = False\n29\tax.xaxis.pane.set_edgecolor('black')\n30\tax.yaxis.pane.set_edgecolor('black')\n31\tax.zaxis.pane.set_edgecolor('black')\n32\tax.xaxis.pane.set_linewidth(1.0)\n33\tax.yaxis.pane.set_linewidth(1.0)\n34\tax.zaxis.pane.set_linewidth(1.0)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')",
      "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_519": {
    "pid": "coding_519",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 11 with:\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)",
      "Replace line 9 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),",
      "Replace lines 11-20 with:\nax.fill_between([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 20))\nax.spines['bottom'].set_position(('outward', 20))",
      "Replace lines 7-11 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_520": {
    "pid": "coding_520",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 2-20 with:\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(8, 5))\ny_positions = [4, 3, 2, 1, 0]\nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 4.5], -0.5, 1.5, color=\"gray\", alpha=0.3)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(-1, 30)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 15))\nax.spines['bottom'].set_position(('outward', 15))\nplt.tight_layout()",
      "Replace lines 9-11 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)",
      "Replace line 11 with:\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)",
      "Replace lines 7-10 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_521": {
    "pid": "coding_521",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 13-23 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)",
      "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Replace lines 7-23 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_522": {
    "pid": "coding_522",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)",
      "Replace lines 13-14 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)",
      "Remove line 23",
      "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_523": {
    "pid": "coding_523",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 2))\n7\tax.set_yticks(np.arange(0, 11, 2))\n8\tax.grid(True, which='major', color='red', linewidth=2)\n9\tax.set_xticks(np.arange(2, 9, 1))\n10\tax.set_yticks(np.arange(2, 9, 1))\n11\tax.grid(True, which='minor', color='blue', linewidth=2)\n12\tmain_diag = np.linspace(0, 10, 100)\n13\tax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\n14\tax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\n15\tsolution_x = np.linspace(0, 10, 100)\n16\tsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\n17\tax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\n18\tax.set_xlabel('Query', fontsize=12)\n19\tax.set_ylabel('Reference', fontsize=12)\n20\tax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n21\tax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\n22\tax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-11 with:\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)",
      "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)",
      "Replace lines 6-22 with:\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_524": {
    "pid": "coding_524",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 1))\n7\tax.set_yticks(np.arange(0, 11, 1))\n8\tax.grid(True, color=\"blue\", linewidth=2)\n9\tmain_diag = np.linspace(0, 10, 100)\n10\tax.plot(main_diag, main_diag, color='lightgray', zorder=1)\n11\tax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\n12\tsolution_x = np.linspace(0, 10, 100)\n13\tsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\n14\tax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\n15\tax.set_xlabel('Query', fontsize=12)\n16\tax.set_ylabel('Reference', fontsize=12)\n17\tax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n18\tax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\n19\tax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')",
      "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Gridline;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_525": {
    "pid": "coding_525",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n12\ttheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\n13\twidth = 2 * np.pi / len(data[0])\n14\touter_radius = 1.5\n15\tsize = 0.3\n16\tfor i, ring_data in enumerate(data):\n17\t    radii = np.array(ring_data)\n18\t    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n19\t    outer_radius -= size\n20\tax.set_aspect('equal', 'box')\n21\tax.set_xticks([])\n22\tax.set_yticks([])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")",
      "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")",
      "Replace line 12 with:\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice",
      "Replace lines 3-18 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_526": {
    "pid": "coding_526",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6,6))\n12\tsize = 0.3\n13\touter_radius = 1.5\n14\tfor i in range(len(data)):\n15\t    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n16\t    outer_radius -= size\n17\tax.set(aspect=\"equal\")\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 15 with:\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))",
      "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])",
      "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])",
      "Replace lines 3-17 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_527": {
    "pid": "coding_527",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\tx = np.linspace(0, 1, 50)\n5\ty = np.linspace(0, np.sqrt(3)/2, 50)\n6\tX, Y = np.meshgrid(x, y)\n7\tmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\n8\tX_tri = X[mask]\n9\tY_tri = Y[mask]\n10\ttriang = tri.Triangulation(X_tri, Y_tri)\n11\tZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\n12\tplt.tricontourf(triang, Z, levels=12, cmap='viridis')\n13\tcorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\n14\ttriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\n15\trefiner = tri.UniformTriRefiner(triangle)\n16\ttrimesh = refiner.refine_triangulation(subdiv=4)\n17\tplt.triplot(trimesh, '--', color='black')\n18\tplt.gca().set_aspect('equal', adjustable='box')\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Remove lines 13-17",
      "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]\nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\nplt.triplot(T, 'k-', marker='x', markersize=8)",
      "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')",
      "Replace lines 12-17 with:\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_528": {
    "pid": "coding_528",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\ttest_data = np.array([[0,0,1,0],\n5\t                      [0,1,0,0],\n6\t                      [1,0,0,0],\n7\t                      [0.25,0.25,0.5,1],\n8\t                      [0.25,0.5,0.25,1],\n9\t                      [0.5,0.25,0.25,1]])\n10\ta = test_data[:, 0]\n11\tb = test_data[:, 1]\n12\tc = test_data[:, 2]\n13\tv = test_data[:, -1]\n14\tx = 0.5 * (2. * b + c) / (a + b + c)\n15\ty = 0.5 * np.sqrt(3) * c / (a + b + c)\n16\tT = tri.Triangulation(x, y)\n17\tplt.figure()\n18\tplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\n19\tplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\n20\tplt.triplot(T, 'k-', marker='x', markersize=8)\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')",
      "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')",
      "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)",
      "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_529": {
    "pid": "coding_529",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(\n11\t    p1, p2, Z_modified,\n12\t    rstride=1, cstride=1,\n13\t    color='b', alpha=0.6,\n14\t    edgecolor='none'\n15\t)\n16\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n17\t    norm_z = (z - z_min) / (z_max - z_min)\n18\t    inv_norm_z = 1 - norm_z\n19\t    scaled_z = inv_norm_z ** contrast\n20\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n21\t    stride = int(round(stride))\n22\t    stride = max(min_stride, min(stride, max_stride))\n23\t    return stride\n24\tz_min = np.min(Z_modified)\n25\tz_max = np.max(Z_modified)\n26\tcontrast = 22.0\n27\tfor i in range(p1.shape[0]):\n28\t    z_row = Z_modified[i, :]\n29\t    avg_z = np.mean(z_row)\n30\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n31\t    indices = np.arange(0, p1.shape[1], current_stride)\n32\t    if indices[-1] != p1.shape[1] - 1:\n33\t        indices = np.append(indices, p1.shape[1] - 1)\n34\t    ax.plot(\n35\t        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n36\t        color='black', linewidth=0.5\n37\t    )\n38\tfor j in range(p2.shape[1]):\n39\t    z_col = Z_modified[:, j]\n40\t    avg_z = np.mean(z_col)\n41\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n42\t    indices = np.arange(0, p2.shape[0], current_stride)\n43\t    if indices[-1] != p2.shape[0] - 1:\n44\t        indices = np.append(indices, p2.shape[0] - 1)\n45\t    ax.plot(\n46\t        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n47\t        color='black', linewidth=0.5\n48\t    )\n49\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n50\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n51\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n52\tax.view_init(elev=30, azim=-45)\n53\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 10-52 with:\nsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=45, azim=45)",
      "Replace lines 3-51 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')",
      "Replace lines 4-51 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')",
      "Replace lines 16-52 with:\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_530": {
    "pid": "coding_530",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\n11\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n12\t    norm_z = (z - z_min) / (z_max - z_min)\n13\t    inv_norm_z = 1 - norm_z\n14\t    scaled_z = inv_norm_z ** contrast\n15\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n16\t    stride = int(round(stride))\n17\t    stride = max(min_stride, min(stride, max_stride))\n18\t    return stride\n19\tz_min = np.min(Z_modified)\n20\tz_max = np.max(Z_modified)\n21\tcontrast = 22.0\n22\tfor i in range(p1.shape[0]):\n23\t    z_row = Z_modified[i, :]\n24\t    avg_z = np.mean(z_row)\n25\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n26\t    indices = np.arange(0, p1.shape[1], current_stride)\n27\t    if indices[-1] != p1.shape[1] - 1:\n28\t        indices = np.append(indices, p1.shape[1] - 1)\n29\t    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\n30\tfor j in range(p2.shape[1]):\n31\t    z_col = Z_modified[:, j]\n32\t    avg_z = np.mean(z_col)\n33\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n34\t    indices = np.arange(0, p2.shape[0], current_stride)\n35\t    if indices[-1] != p2.shape[0] - 1:\n36\t        indices = np.append(indices, p2.shape[0] - 1)\n37\t    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\n38\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n39\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n40\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n41\tax.view_init(elev=45, azim=45)\n42\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-41 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)",
      "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()",
      "Replace lines 3-41 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)",
      "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning;Gridline",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_531": {
    "pid": "coding_531",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)",
      "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace line 18 with:\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_532": {
    "pid": "coding_532",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-18 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')",
      "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_533": {
    "pid": "coding_533",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5],\n6\t                              [1, 0, 2.8],\n7\t                              [-1, -1, 2.2],\n8\t                              [1, -1, 2.6],\n9\t                              [-1, 1, 2.7]])\n10\tfinal_position = np.array([0, 0, 0])\n11\thorizontal_window = np.array([[1, 1, 0],\n12\t                             [1, -1, 0],\n13\t                             [-1, -1, 0],\n14\t                             [-1, 1, 0]])\n15\tvertical_window = np.array([[0.5, 1, 2],\n16\t                            [-0.5, 1, 2],\n17\t                            [-0.5, 1, 1],\n18\t                            [0.5, 1, 1]])\n19\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n20\t        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n21\t        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n22\t        'b-', linewidth=3, label='Target (Horizontal Window)')\n23\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n24\t        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n25\t        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n26\t        'k-', linewidth=2, label='Window (Vertical)')\n27\tfor pos in initial_positions:\n28\t    ax.plot([pos[0], final_position[0]],\n29\t            [pos[1], final_position[1]],\n30\t            [pos[2], final_position[2]], 'r')\n31\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n32\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n33\tax.set_xlabel('x [m]')\n34\tax.set_ylabel('y [m]')\n35\tax.set_zlabel('-z [m]')\n36\tax.set_title('Quadrotor Trajectories with Windows')\n37\tax.legend()\n38\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')",
      "Replace lines 5-37 with:\ninitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)",
      "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')",
      "Replace lines 5-32 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_534": {
    "pid": "coding_534",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\n6\tfinal_position = np.array([0, 0, 0])\n7\thorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\n8\tvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\n9\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\n10\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\n11\tfor pos in initial_positions:\n12\t    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\n13\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n14\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n15\tax.set_xlabel('x [m]')\n16\tax.set_ylabel('y [m]')\n17\tax.set_zlabel('-z [m]')\n18\tax.set_title('Quadrotor Trajectories with Windows')\n19\tax.legend()\n20\tax.xaxis.pane.fill = False\n21\tax.yaxis.pane.fill = False\n22\tax.zaxis.pane.fill = False\n23\tax.xaxis.pane.set_edgecolor('black')\n24\tax.yaxis.pane.set_edgecolor('black')\n25\tax.zaxis.pane.set_edgecolor('black')\n26\tax.xaxis.pane.set_linewidth(1.0)\n27\tax.yaxis.pane.set_linewidth(1.0)\n28\tax.zaxis.pane.set_linewidth(1.0)\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 5-28 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0],\n                             [1, -1, 0],\n                             [-1, -1, 0],\n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()",
      "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_535": {
    "pid": "coding_535",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\n31\tplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\n32\tplt.gca().set_aspect('equal', adjustable='box')\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 21-27 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)",
      "Replace lines 30-31 with:\nlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\nax.legend(handles=legend_elements, loc='upper right', fontsize=12)",
      "Replace lines 26-27 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)",
      "Replace lines 23-27 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_536": {
    "pid": "coding_536",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n31\t                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\n32\tax.legend(handles=legend_elements, loc='upper right', fontsize=12)\n33\tplt.gca().set_aspect('equal', adjustable='box')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 23-32 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 26-32 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 30-32 with:\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)",
      "Replace lines 21-32 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_537": {
    "pid": "coding_537",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', '*', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 6 with:\nhatches = ['o', '*', '.', '\\\\']",
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['/', 'X', '|', '\\\\']",
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_538": {
    "pid": "coding_538",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', 'X', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['/', '*', '|', '\\\\']",
      "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()",
      "Replace line 6 with:\nhatches = ['o', 'X', '.', '\\\\']"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_539": {
    "pid": "coding_539",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\tplt.tight_layout()\n9\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))",
      "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)",
      "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])",
      "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_540": {
    "pid": "coding_540",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\t    ax.spines['top'].set_visible(False)\n9\t    ax.spines['right'].set_visible(False)\n10\t    ax.spines['bottom'].set_visible(True)\n11\t    ax.spines['left'].set_visible(True)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])",
      "Remove lines 8-11",
      "Replace lines 10-11 with:\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))",
      "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_541": {
    "pid": "coding_541",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def _gen_axes_spines(self):\n21\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n22\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n23\t            return {'polar': spine}\n24\t    register_projection(RadarAxes)\n25\t    return theta\n26\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n27\tvalues = {\n28\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n29\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n30\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n31\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n32\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n33\t}\n34\tnum_vars = len(labels)\n35\ttheta = radar_factory(num_vars, frame='polygon')\n36\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n37\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n38\tfor i, (factor, values_list) in enumerate(values.items()):\n39\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n40\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n41\tax.set_varlabels(labels)\n42\tax.set_rgrids([0.2, 0.4, 0.6, 0.8])\n43\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n44\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 20-42 with:\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level,\n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)",
      "Replace lines 39-43 with:\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')",
      "Replace lines 4-42 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)",
      "Replace lines 3-43 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_542": {
    "pid": "coding_542",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def draw_polygon_grid(self, num_levels=4):\n21\t            for level in np.linspace(0.2, 1.0, num_levels):\n22\t                poly = RegularPolygon((0, 0), num_vars, radius=level,\n23\t                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n24\t                self.add_patch(poly)\n25\t        def _gen_axes_spines(self):\n26\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n27\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n28\t            return {'polar': spine}\n29\t    register_projection(RadarAxes)\n30\t    return theta\n31\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n32\tvalues = {\n33\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n34\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n35\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n36\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n37\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n38\t}\n39\tnum_vars = len(labels)\n40\ttheta = radar_factory(num_vars, frame='polygon')\n41\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n42\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n43\tax.draw_polygon_grid(num_levels=5)\n44\tfor i, (factor, values_list) in enumerate(values.items()):\n45\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n46\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n47\tax.set_varlabels(labels)\n48\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n49\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-48 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)",
      "Replace lines 20-47 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])",
      "Replace lines 4-43 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)",
      "Replace lines 20-48 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_543": {
    "pid": "coding_543",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.colors as mcolors\n4\tdata = np.arange(2, 19)\n5\tcmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n6\tbounds = [2, 3, 7, 9, 15, 18]\n7\tnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n8\tsegments_per_ring = [6, 6, 4, 1]\n9\tcolors = []\n10\tstart = 0\n11\tfor segment_count in segments_per_ring:\n12\t    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n13\t    colors.append(ring_colors)\n14\t    start += segment_count\n15\tsizes = [[1] * count for count in segments_per_ring]\n16\tfig, ax = plt.subplots(figsize=(6, 6))\n17\tax.axis('equal')\n18\tradius = [1.5, 1.0, 0.5, 0.25]\n19\tfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n20\t    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n21\t                       wedgeprops=dict(width=0.3, edgecolor='white'))\n22\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n23\tsm.set_array([])\n24\tcbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\n25\tcbar.set_label(\"Discrete intervals, some other units\")\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)",
      "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)",
      "Replace lines 3-25 with:\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)\ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')",
      "Replace lines 18-24 with:\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_544": {
    "pid": "coding_544",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib as mpl\n4\tdata = np.arange(2, 19)\n5\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n6\tax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\n7\tax.grid(False)\n8\tcmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n9\tbounds = [2, 3, 7, 9, 15, 18]\n10\tnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n11\tradii = np.linspace(0.2, 1, 4)\n12\tbold_segments = [3, 5, 6, 11, 12, 16]\n13\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n14\t    n = stop - start\n15\t    dtheta = 2 * np.pi / n\n16\t    for i in range(n):\n17\t        segment_value = data[start + i]\n18\t        color = cmap(norm(segment_value))\n19\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\n20\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n21\t    n = stop - start\n22\t    dtheta = 2 * np.pi / n\n23\t    for i in range(n):\n24\t        lw = 4 if (start + i + 1) in bold_segments else 2\n25\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\n26\tax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\n27\tfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\n28\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n                       wedgeprops=dict(width=0.3, edgecolor='white'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")",
      "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Polar;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_545": {
    "pid": "coding_545",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\n9\tplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\n10\tplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\n12\tplt.grid(True)\n13\tfor xi, yi1, yi2 in zip(x, y1, y2):\n14\t    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n15\t    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n16\t    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n17\t    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')",
      "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_546": {
    "pid": "coding_546",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\")\n9\tplt.plot(x, y2, label=\"y2\")\n10\tplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\n12\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Insert the following between lines 11-12:\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)",
      "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')",
      "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')",
      "Replace lines 8-11 with:\nplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\nplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\nplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\nplt.grid(True)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Axis & Scale;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_547": {
    "pid": "coding_547",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tgames = ['I', 'II', 'III', 'IV', 'V']\n5\tplayer_a_scores = [5, 15, 22, 20, 25]\n6\tplayer_b_scores = [25, 32, 34, 30, 27]\n7\tbar_width = 0.35\n8\tindex = np.arange(len(games))\n9\toffset = bar_width / 2\n10\tfor i, score in enumerate(player_a_scores):\n11\t    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\n12\tfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n13\t    height = b_score - a_score\n14\t    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\n15\tax.set_xlabel(\"Games\")\n16\tax.set_ylabel(\"Score\")\n17\tax.set_title(\"Scores by number of game and players\")\n18\tax.set_xticks(index)\n19\tax.set_xticklabels(games)\n20\tax.set_ylim(0, 60)\n21\tfor i, score in enumerate(player_a_scores):\n22\t    ax.annotate(f'{score}',\n23\t                xy=(index[i] - offset, score),\n24\t                xytext=(0, 3),\n25\t                textcoords=\"offset points\",\n26\t                ha='center', va='bottom')\n27\tfor i, b_score in enumerate(player_b_scores):\n28\t    ax.annotate(f'{b_score}',\n29\t                xy=(index[i] + offset, b_score),\n30\t                xytext=(0, 3),\n31\t                textcoords=\"offset points\",\n32\t                ha='center', va='bottom')\n33\tax.legend([\"Player A\", \"Player B\"], loc='upper right')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-33 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 3-33 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')",
      "Replace lines 3-33 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 3-14 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": false
  },
  "coding_548": {
    "pid": "coding_548",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tgames = ['I', 'II', 'III', 'IV', 'V']\n4\tplayer_a_scores = [5, 15, 22, 20, 25]\n5\tplayer_b_scores = [25, 32, 34, 30, 27]\n6\tbar_width = 0.35\n7\tindex = np.arange(len(games))\n8\tfig, ax = plt.subplots()\n9\tbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\n10\tbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\n11\tax.set_xlabel('Games')\n12\tax.set_ylabel('Score')\n13\tax.set_title('Scores by number of game and players')\n14\tax.set_xticks(index)\n15\tax.set_xticklabels(games)\n16\tax.legend()\n17\tfor rect in bar1:\n18\t    height = rect.get_height()\n19\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n20\tfor rect in bar2:\n21\t    height = rect.get_height()\n22\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-22 with:\nfig, ax = plt.subplots()\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')",
      "Replace lines 3-22 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()",
      "Replace lines 9-22 with:\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')",
      "Replace lines 3-22 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_549": {
    "pid": "coding_549",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(12, 6))\n3\tax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\n4\tax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n5\t            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n6\t            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n7\tcategories = {\n8\t    \"ENVIRONMENT\": (0.25, 0.9),\n9\t    \"MATERIAL\": (0.4, 0.85),\n10\t    \"METHOD\": (0.55, 0.8),\n11\t    \"PEOPLE\": (0.25, 0.1),\n12\t    \"MEASUREMENT\": (0.4, 0.15),\n13\t    \"MACHINE\": (0.55, 0.2)\n14\t}\n15\tfor cat, (x, y) in categories.items():\n16\t    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n17\t                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n18\tcauses = {\n19\t    \"ENVIRONMENT\": [\"Bad conditions\"],\n20\t    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n21\t    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n22\t    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n23\t    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n24\t    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n25\t}\n26\tpositions = {\n27\t    \"ENVIRONMENT\": [(0.3, 0.8)],\n28\t    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n29\t    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n30\t    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n31\t    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n32\t    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n33\t}\n34\tfor cat, cause_list in causes.items():\n35\t    for i, cause in enumerate(cause_list):\n36\t        x_pos, y_pos = positions[cat][i]\n37\t        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n38\t                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n39\t                    fontsize=9, color=\"black\")\n40\tax.axis('off')\n41\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 8-38 with:\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",",
      "Replace lines 1-40 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)",
      "Replace lines 4-40 with:\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')\nplt.tight_layout()",
      "Replace lines 2-40 with:\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white',\n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:\n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\n    else:\n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_550": {
    "pid": "coding_550",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tplt.figure(figsize=(15, 8))\n4\tplt.style.use('default')\n5\tplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\n6\tplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\n7\tcircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\n8\tplt.gca().add_patch(circle)\n9\tplt.gca().set_aspect('equal', adjustable='box')\n10\tcategories = {\n11\t    'ENVIRONMENT': (2, 8),\n12\t    'MATERIAL': (5, 8),\n13\t    'METHOD': (8, 8),\n14\t    'PEOPLE': (2, 2),\n15\t    'MEASUREMENT': (5, 2),\n16\t    'MACHINE': (8, 2)\n17\t}\n18\tcauses = {\n19\t    'ENVIRONMENT': ['Bad conditions'],\n20\t    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n21\t    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n22\t    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n23\t    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n24\t    'MACHINE': ['Faulty equipment', 'Compatibility']\n25\t}\n26\tfor category, (x, y) in categories.items():\n27\t    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n28\t    box_width = len(category) * 0.2 + 0.4\n29\t    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n30\t                        facecolor='tab:blue', edgecolor='black')\n31\t    plt.gca().add_patch(rect)\n32\t    plt.text(x, y, category, ha='center', va='center', color='white',\n33\t             fontsize=8, fontweight='bold')\n34\t    causes_list = causes[category]\n35\t    spacing = 0.8\n36\t    if y > 5:\n37\t        for i, cause in enumerate(causes_list):\n38\t            y_pos = y - 0.7 - i * spacing\n39\t            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n40\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n41\t                    fontsize=8)\n42\t    else:\n43\t        for i, cause in enumerate(causes_list):\n44\t            y_pos = y + 0.7 + i * spacing\n45\t            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n46\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n47\t                    fontsize=8)\n48\tplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n49\t         fontsize=8, fontweight='bold')\n50\tplt.xlim(-1.2, 11.2)\n51\tplt.ylim(0, 10)\n52\tplt.axis('off')\n53\tplt.gca().set_aspect('equal', adjustable='box')\n54\tplt.tight_layout()\n55\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')",
      "Replace lines 1-54 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)",
      "Replace lines 2-53 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')",
      "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Alignment, Orientation, & Position;Advanced Chart Type",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_551": {
    "pid": "coding_551",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\timport numpy as np\n5\treleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n6\t            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n7\t            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n8\t            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n9\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n10\t         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n11\t         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n12\t         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n13\t         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n14\t         '2014-10-26', '2014-10-18', '2014-08-26']\n15\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n16\tplt.figure(figsize=(15, 8))\n17\tfig, ax = plt.subplots(figsize=(15, 8))\n18\tax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\n19\tfor i, (version, date) in enumerate(zip(releases, dates)):\n20\t    major_version = version.split('.')[0]\n21\t    if version.endswith('.0'):\n22\t        color = 'red'\n23\t        alpha = 1.0\n24\t        weight = 2\n25\t    else:\n26\t        color = 'red'\n27\t        alpha = 0.5\n28\t        weight = 1\n29\t    if i % 2 == 0:\n30\t        y_text = 0.1\n31\t        y_start = 0\n32\t        y_end = 0.08\n33\t    else:\n34\t        y_text = -0.1\n35\t        y_start = 0\n36\t        y_end = -0.08\n37\t    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n38\t    if y_text > 0:\n39\t        ax.text(date, y_text, version, ha='center', va='bottom')\n40\t    else:\n41\t        ax.text(date, y_text, version, ha='center', va='top')\n42\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n43\tax.xaxis.set_major_locator(mdates.YearLocator())\n44\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n45\tax.yaxis.set_visible(False)\n46\tax.set_ylim(-0.3, 0.3)\n47\tplt.grid(False)\n48\tax.spines['left'].set_visible(False)\n49\tax.spines['right'].set_visible(False)\n50\tax.spines['top'].set_visible(False)\n51\tplt.tight_layout()\n52\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-46 with:\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\nversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(15, 4))\nax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(versions, dates)):\n    color = 'black' if not version.endswith('.0') else 'red'\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n    else:\n        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.15, 0.15)",
      "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)",
      "Replace lines 1-51 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)",
      "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_552": {
    "pid": "coding_552",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\n5\tversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n6\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n7\tfig, ax = plt.subplots(figsize=(15, 4))\n8\tax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\n9\tfor i, (version, date) in enumerate(zip(versions, dates)):\n10\t    color = 'black' if not version.endswith('.0') else 'red'\n11\t    if i % 2 == 0:\n12\t        y_text = 0.1\n13\t        y_start = 0\n14\t        y_end = 0.08\n15\t    else:\n16\t        y_text = -0.1\n17\t        y_start = 0\n18\t        y_end = -0.08\n19\t    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n20\t    if y_text > 0:\n21\t        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n22\t    else:\n23\t        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\n24\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n25\tax.xaxis.set_major_locator(mdates.YearLocator())\n26\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n27\tax.yaxis.set_visible(False)\n28\tax.set_ylim(-0.15, 0.15)\n29\tplt.grid(False)\n30\tax.spines['left'].set_visible(False)\n31\tax.spines['right'].set_visible(False)\n32\tax.spines['top'].set_visible(False)\n33\tplt.tight_layout()\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)",
      "Replace lines 4-28 with:\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):\n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)",
      "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)",
      "Replace lines 1-33 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_553": {
    "pid": "coding_553",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\tfrom mpl_toolkits.mplot3d import Axes3D\n2\timport matplotlib.pyplot as plt\n3\timport numpy as np\n4\tx = np.linspace(0, 80, 20)\n5\ty = np.linspace(0, 250, 20)\n6\tz = np.linspace(-450, 0, 20)\n7\tX, Z = np.meshgrid(x, z)\n8\tY, Z = np.meshgrid(y, z)\n9\tX2, Y2 = np.meshgrid(x, y)\n10\tZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\n11\tZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\n12\tZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\txz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\n16\tyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\n17\txy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\n18\tcbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\n19\tax.set_xlabel(\"X [km]\")\n20\tax.set_ylabel(\"Y [km]\")\n21\tax.set_zlabel(\"Z [m]\")\n22\tax.set_xlim(0, 80)\n23\tax.set_ylim(0, 250)\n24\tax.set_zlim(-450, 0)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)",
      "Replace lines 1-24 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()",
      "Replace lines 1-18 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)",
      "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "A",
    "extraction": "A",
    "true_false": true
  },
  "coding_554": {
    "pid": "coding_554",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tNx, Ny, Nz = 100, 300, 500\n4\tX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\n5\tdata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\n6\tkw = {\n7\t    'vmin': data.min(),\n8\t    'vmax': data.max(),\n9\t    'levels': np.linspace(data.min(), data.max(), 10),\n10\t}\n11\tfig = plt.figure(figsize=(5, 4))\n12\tax = fig.add_subplot(111, projection='3d')\n13\t_ = ax.contourf(\n14\t    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n15\t    zdir='z', offset=0, **kw\n16\t)\n17\txmin, xmax = X.min(), X.max()\n18\tymin, ymax = Y.min(), Y.max()\n19\tzmin, zmax = Z.min(), Z.max()\n20\tax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\n21\tedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\n22\tax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\n23\tax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\n24\tax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\n25\tax.set(\n26\t    xlabel='X [km]',\n27\t    ylabel='Y [km]',\n28\t    zlabel='Z [m]',\n29\t    zticks=[0, -150, -300, -450],\n30\t)\n31\tax.view_init(40, -30, 0)\n32\tax.set_box_aspect(None, zoom=0.9)\n33\tfig.colorbar(C, ax=ax, pad=0.1)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-33 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()",
      "Insert the following between lines 15-16:\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw",
      "Replace lines 1-33 with:\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)\nY, Z = np.meshgrid(y, z)\nX2, Y2 = np.meshgrid(x, y)\nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)",
      "Replace lines 3-33 with:\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_555": {
    "pid": "coding_555",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import ConnectionPatch\n4\tsizes = [56, 27, 17]\n5\tlabels = ['Disapprove', 'Approve', 'Undecided']\n6\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n7\texplode = (0.1, 0, 0)\n8\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n9\tage_sizes = [54, 33, 7, 6]\n10\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n11\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n12\tfig.subplots_adjust(wspace=0)\n13\tangle = -180 * sizes[1] / sum(sizes)\n14\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n15\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n16\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n17\tbottom = 1\n18\twidth = 0.2\n19\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n20\t    bottom -= height / 100\n21\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n22\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n23\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n24\tax2.axis('off')\n25\tax2.set_xlim(-2.5 * width, 2.5 * width)\n26\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n27\tcenter, r = wedges[1].center, wedges[1].r\n28\tbar_height = sum(age_sizes) / 100\n29\tx = r * np.cos(np.pi / 180 * theta2) + center[0]\n30\ty = r * np.sin(np.pi / 180 * theta2) + center[1]\n31\tcon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n32\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n33\tax2.add_artist(con)\n34\tx = r * np.cos(np.pi / 180 * theta1) + center[0]\n35\ty = r * np.sin(np.pi / 180 * theta1) + center[1]\n36\tcon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n37\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n38\tax2.add_artist(con)\n39\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)",
      "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)",
      "Replace line 7 with:\nexplode = (0, 0.1, 0)",
      "Replace lines 7-37 with:\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')"
    ],
    "answer": "C",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": true
  },
  "coding_556": {
    "pid": "coding_556",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsizes = [56, 27, 17]\n4\tlabels = ['Disapprove', 'Approve', 'Undecided']\n5\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n6\texplode = (0.1, 0, 0)\n7\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n8\tage_sizes = [54, 33, 7, 6]\n9\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n10\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n11\tfig.subplots_adjust(wspace=0)\n12\tangle = -180 * sizes[1] / sum(sizes)\n13\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n14\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n15\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n16\tbottom = 1\n17\twidth = 0.2\n18\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n19\t    bottom -= height / 100\n20\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n21\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n22\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n23\tax2.axis('off')\n24\tax2.set_xlim(-2.5 * width, 2.5 * width)\n25\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n26\tcenter, r = wedges[1].center, wedges[1].r\n27\tbar_height = sum(age_sizes) / 100\n28\tx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\n29\ty_top = r * np.sin(np.pi / 180 * theta2) + center[1]\n30\tax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\n31\tx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\n32\ty_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\n33\tax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 6 with:\nexplode = (0, 0.1, 0)",
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)",
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)",
      "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_557": {
    "pid": "coding_557",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.arange(10)\n4\ty = np.arange(10)\n5\tX, Y = np.meshgrid(x, y)\n6\tZ1 = np.sin(X/2) + np.cos(Y/2)\n7\tZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\n8\tZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\n9\tfig = plt.figure()\n10\tax = fig.add_subplot(111, projection='3d')\n11\tax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\n12\tax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\n13\tax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\n14\tax.set_xlabel('x')\n15\tax.set_ylabel('y')\n16\tax.set_zlabel('z')\n17\tax.set_xlim(0, 9)\n18\tax.set_ylim(0, 9)\n19\tax.set_zlim(0, 5)\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=2, cstride=2, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z3))",
      "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))",
      "Replace lines 1-13 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')",
      "Replace lines 3-19 with:\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_558": {
    "pid": "coding_558",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.colors import Normalize\n5\tdef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"CMRmap\"):\n6\t    if norm is None:\n7\t        norm = Normalize()\n8\t    colors = plt.get_cmap(cmap)(norm(array))\n9\t    if value_direction == 'x':\n10\t        nz, ny = array.shape\n11\t        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n12\t        xi = np.full_like(yi, pos)\n13\t    elif value_direction == 'y':\n14\t        nx, nz = array.shape\n15\t        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n16\t        yi = np.full_like(zi, pos)\n17\t    elif value_direction == 'z':\n18\t        ny, nx = array.shape\n19\t        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n20\t        zi = np.full_like(xi, pos)\n21\t    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\n22\tfig = plt.figure()\n23\tax = fig.add_subplot(projection='3d')\n24\tax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\n25\tnx, ny, nz = 8, 10, 5\n26\tdata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\n27\tdata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\n28\tdata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\n29\tshow(ax, data_xy)\n30\tshow(ax, data_yz, value_direction='x')\n31\tshow(ax, data_zx, value_direction='y', pos=ny)\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-31 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)",
      "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)",
      "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)",
      "Replace line 5 with:\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "3D;Data Reasoning",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": false
  },
  "coding_559": {
    "pid": "coding_559",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\")\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")",
      "Insert the following between lines 9-10:\naggregated_data.columns = aggregated_data.columns.droplevel()",
      "Replace line 14 with:\nplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_560": {
    "pid": "coding_560",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 14 with:\nplt.legend(title=\"Other Details\")",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")",
      "Replace lines 10-14 with:\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")",
      "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "B",
    "extraction": "B",
    "true_false": true
  },
  "coding_561": {
    "pid": "coding_561",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")",
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace line 12 with:\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace line 11 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": true
  },
  "coding_562": {
    "pid": "coding_562",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, color=\"#1f77b4\", edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 11 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')",
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")",
      "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")",
      "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")"
    ],
    "answer": "D",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend;Color & Texture",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "C",
    "extraction": "C",
    "true_false": false
  },
  "coding_563": {
    "pid": "coding_563",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left')\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='center right')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))"
    ],
    "answer": "B",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  },
  "coding_564": {
    "pid": "coding_564",
    "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?",
    "options": [
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')",
      "Replace line 15 with:\nplt.legend(title='Payment Method')",
      "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left')"
    ],
    "answer": "A",
    "solution": "",
    "subject": "Coding",
    "task": "Modify With Image",
    "category": "Legend",
    "source": "new_annotated",
    "type": "Multiple Choice",
    "context": "",
    "response": "D",
    "extraction": "D",
    "true_false": false
  }
}